[
    {
        "domain": "Inspector",
        "types": [],
        "commands": [
            {
                "name": "addScriptToEvaluateOnLoad",
                "parameters": [
                    { "name": "scriptSource", "type": "string" }
                ]
            },
            {
                "name": "removeAllScriptsToEvaluateOnLoad"
            },
            {
                "name": "reloadPage",
                "parameters": [
                    { "name": "ignoreCache", "type": "boolean" }
                ]
            },
            {
                "name": "openInInspectedWindow",
                "parameters": [
                    { "name": "url", "type": "string" }
                ]
            },
            {
                "name": "didEvaluateForTestInFrontend",
                "parameters": [
                    { "name": "testCallId", "type": "integer" },
                    { "name": "jsonResult", "type": "string" }
                ]
            },
            {
                "name": "setUserAgentOverride",
                "parameters": [
                    { "name": "userAgent", "type": "string" }
                ]
            },
            {
                "name": "getCookies",
                "returns": [
                    { "name": "cookies", "type": "array", "items": { "$ref" : "Cookie"} },
                    { "name": "cookiesString", "type": "string" }
                ]
            },
            {
                "name": "deleteCookie",
                "parameters": [
                    { "name": "cookieName", "type": "string" },
                    { "name": "domain", "type": "string" }
                ]
            }
        ],
        "events": [
            {
                "name": "frontendReused"
            },
            {
                "name": "bringToFront"
            },
            {
                "name": "disconnectFromBackend"
            },
            {
                "name": "inspectedURLChanged",
                "parameters": [
                    { "name": "url", "type": "string" }
                ]
            },
            {
                "name": "domContentEventFired",
                "parameters": [
                    { "name": "time", "type": "number" }
                ]
            },
            {
                "name": "loadEventFired",
                "parameters": [
                    { "name": "time", "type": "number" }
                ]
            },
            {
                "name": "reset"
            },
            {
                "name": "showPanel",
                "parameters": [
                    { "name": "panel", "type": "string" }
                ]
            },
            {
                "name": "startUserInitiatedDebugging"
            },
            {
                "name": "evaluateForTestInFrontend",
                "parameters": [
                    { "name": "testCallId", "type": "integer" },
                    { "name": "script", "type": "string" }
                ]
            },
            {
                "name": "inspect",
                "parameters": [
                    { "name": "object", "$ref": "RemoteObject" },
                    { "name": "hints", "type": "object" }
                ]
            }
        ]
    },
    {
        "domain": "Runtime",
        "types": [],
        "commands": [
            {
                "name": "evaluate",
                "parameters": [
                    { "name": "expression", "type": "string" },
                    { "name": "objectGroup", "type": "string" },
                    { "name": "includeCommandLineAPI", "type": "boolean" }
                ],
                "returns": [
                    { "name": "result", "$ref": "RuntimeObject" }
                ]
            },
            {
                "name": "evaluateOn",
                "parameters": [
                    { "name": "objectId", "type": "string" },
                    { "name": "expression", "type": "string" }
                ],
                "returns": [
                    { "name": "result", "$ref": "RuntimeObject" }
                ]
            },
            {
                "name": "getProperties",
                "parameters": [
                    { "name": "objectId", "type": "string" },
                    { "name": "ignoreHasOwnProperty", "type": "boolean" },
                    { "name": "abbreviate", "type": "boolean" }
                ],
                "returns": [
                    { "name": "result", "type": "array", "items": { "$ref" : "RuntimeProperty"} }
                ]
            },
            {
                "name": "setPropertyValue",
                "parameters": [
                    { "name": "objectId", "type": "string" },
                    { "name": "propertyName", "type": "string" },
                    { "name": "expression", "type": "string" }
                ]
            },
            {
                "name": "releaseObject",
                "parameters": [
                    { "name": "objectId", "type": "string" }
                ]
            },
            {
                "name": "releaseObjectGroup",
                "parameters": [
                    { "name": "objectGroup", "type": "string" }
                ]
            }
        ]
    },
    {
        "domain": "Console",
        "types": [],
        "commands": [
            {
                "name": "enable",
                "returns": [
                   { "name": "expiredMessagesCount", "type": "integer" }
                ]
            },
            {
                "name": "disable"
           },
            {
                "name": "clearConsoleMessages"
            },
            {
                "name": "setMonitoringXHREnabled",
                "parameters": [
                    { "name": "enabled", "type": "boolean" }
                ]
            },
            {
                "name": "addInspectedNode",
                "parameters": [
                    { "name": "nodeId", "type": "integer" }
                ]
            }
        ],
        "events": [
            {
                "name": "consoleMessage",
                "parameters": [
                    { "name": "messageObj", "$ref": "ConsoleMessage" }
                ]
            },
           {
                "name": "consoleMessageRepeatCountUpdated",
                "parameters": [
                    { "name": "count", "type": "integer" }
                ]
            },
            {
                "name": "consoleMessagesCleared"
            }
        ]
    },
    {
        "domain": "Network",
        "description": "Network domain allows tracking network activities of the page. It exposes information about HTTP and WebSocket requests and responses, their headers, bodies, timing, etc. It also allows getting the tree of the Frames on the page along with information about their resources.",
        "types": [
            {
                "id": "ResourceTiming",
                "type": "object",
                "description": "Timing information for the request.",
                "properties": {
                    "requestTime": { "type": "number", "description": "Timing's requestTime is a baseline in seconds, while the other numbers are ticks in milliseconds relatively to this requestTime." },
                    "proxyStart": { "type": "number", "description": "Started resolving proxy." },
                    "proxyEnd": { "type": "number", "description": "Finished resolving proxy." },
                    "dnsStart": { "type": "number", "description": "Started DNS address resolve." },
                    "dnsEnd": { "type": "number", "description": "Finished DNS address resolve." },
                    "connectStart": { "type": "number", "description": "Started connecting to the remote host." },
                    "connectEnd": { "type": "number", "description": "Connected to the remote host." },
                    "sslStart": { "type": "number", "description": "Started SSL handshake." },
                    "sslEnd": { "type": "number", "description": "Finished SSL handshake." },
                    "sendStart": { "type": "number", "description": "Started sending request." },
                    "sendEnd": { "type": "number", "description": "Finished sending request." },
                    "receiveHeadersEnd": { "type": "number", "description": "Finished receiving response headers." }
                }
            },
            {
                "id": "ResourceRequest",
                "type": "object",
                "description": "HTTP request data.",
                "properties": {
                    "url": { "type": "string", "description": "Request URL." },
                    "method": { "type": "string", "description": "HTTP request method." },
                    "headers": { "type": "object", "description": "HTTP request headers." },
                    "postData": { "type": "string", "optional": true, "description": "HTTP POST request data." }
                }
            },
            {
                "id": "ResourceResponse",
                "type": "object",
                "description": "HTTP response data.",
                "properties": {
                    "status": { "type": "number", "description": "HTTP response status code." },
                    "statusText": { "type": "string", "description": "HTTP response status text." },
                    "headers": { "type": "object", "description": "HTTP response headers." },
                    "mimeType": { "type": "string", "description": "Resource mimeType as determined by the browser." },
                    "requestHeaders": { "type": "object", "optional": true, "description": "Refined HTTP request headers that were actually transmitted over the network." },
                    "connectionReused": { "type": "boolean", "description": "Specifies whether physical connection was actually reused for this request." },
                    "connectionID": { "type": "number", "description": "Physical connection id that was actually used for this request." },
                    "fromDiskCache": { "type": "boolean", "optional": true, "description": "Specifies that the resource was loaded from the disk cache." },
                    "timing": { "$ref": "ResourceTiming", "optional": true, "description": "Timing information for the given request." }
                }
            },
            {
                "id": "CachedResource",
                "type": "object",
                "description": "Information about the cached resource.",
                "properties": {
                    "url": { "type": "string", "description": "Resource URL." },
                    "type": { "type": "string", "description": "Type of this resource. // FIXME" },
                    "response": { "$ref": "ResourceResponse", "description": "Cached response data." },
                    "bodySize": { "type": "number", "description": "Cached response body size." }
                }
            },
            {
                "id": "Frame",
                "type": "object",
                "description": "Information about the Frame on the page.",
                "properties": {
                    "id": { "type": "string", "description": "Frame unique identifier." },
                    "parentId": { "type": "string", "description": "Parent frame identifier." },
                    "loaderId": { "type": "string", "description": "Identifier of the loader associated with this frame." },
                    "name": { "type": "string", "optional": true, "description": "Frame's name as specified in the tag." },
                    "url": { "type": "string", "description": "Frame document's URL." }
                }
            },
            {
                "id": "FrameResourceTree",
                "type": "object",
                "description": "Information about the Frame hierarchy along with their cached resources.",
                "properties": {
                    "frame": { "$ref": "Frame", "description": "Frame information for this tree item." },
                    "childFrames": { "type": "array", "optional": true, "items": { "$ref": "FrameResourceTree" }, "description": "Child frames." },
                    "resources": { "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "url": { "type": "string", "description": "Resource URL." },
                                "type": { "type": "string", "description": "Type of this resource. // FIXME" }
                            }
                        },
                        "description": "Information about frame resources."
                    }
                }
            }
        ],
        "commands": [
            {
                "name": "enable",
                "description": "Enables network tracking, network events will now be delivered to the client."
            },
            {
                "name": "disable",
                "description": "Disables network tracking, prevents network events from being sent to the client."
            },
            {
                "name": "getCachedResources",
                "description": "Returns present frame / resource tree structure.",
                "returns": [
                    { "name": "frameTree", "$ref": "FrameResourceTree", "description": "Present frame / resource tree structure." }
                ]
            },
            {
                "name": "getResourceContent",
                "description": "Returns content of the given resource.",
                "parameters": [
                    { "name": "frameId", "type": "string", "description": "Frame id to get resource for."  },
                    { "name": "url", "type": "string", "description": "URL of the resource to get content for."  },
                    { "name": "base64Encode", "type": "boolean", "optional": true, "description": "Requests that resource content is served as base64."  }
                ],
                "returns": [
                    { "name": "content", "type": "string", "description": "Resource content." }
                ]
            },
            {
                "name": "setExtraHeaders",
                "description": "Allows sending extra HTTP headers with the requests from this page.",
                "parameters": [
                    { "name": "headers", "type": "object", "description": "Map with extra HTTP headers." }
                ]
            }
        ],
        "events": [
            {
                "name": "frameDetachedFromParent",
                "description": "Fired when frame has been detached from its parent.",
                "parameters": [
                    { "name": "frameId", "type": "string", "description": "If of the frame that has been detached." }
                ]
            },
            {
                "name": "willSendRequest",
                "description": "Fired when page is about to send HTTP request.",
                "parameters": [
                    { "name": "identifier", "type": "integer", "description": "Request identifier." },
                    { "name": "frameId", "type": "string", "description": "Frame identifier." },
                    { "name": "loaderId", "type": "string", "description": "Loader identifier." },
                    { "name": "documentURL", "type": "string", "description": "URL of the document this resource is loaded for." },
                    { "name": "request", "$ref": "ResourceRequest", "description": "Request data." },
                    { "name": "redirectResponse", "$ref": "ResourceResponse", "description": "Redirect response data." },
                    { "name": "time", "type": "number", "description": "Timestamp." },
                    { "name": "callStack", "type": "array", "items": { "$ref" : "DebuggerStackFrame"}, "description": "JavaScript stack trace upon issuing this request." }
                ]
            },
            {
                "name": "markResourceAsCached",
                "description": "Fired when request is known to be served from memory cache.",
                "parameters": [
                    { "name": "identifier", "type": "integer", "description": "Request identifier." }
                ]
            },
            {
                "name": "didReceiveResponse",
                "description": "Fired when HTTP response is available.",
                "parameters": [
                    { "name": "identifier", "type": "integer", "description": "Request identifier." },
                    { "name": "time", "type": "number", "description": "Timestamp." },
                    { "name": "resourceType", "type": "string", "description": "Resource type. // FIXME" },
                    { "name": "response", "$ref": "ResourceResponse", "description": "Response data." }
                ]
            },
            {
                "name": "didReceiveContentLength",
                "description": "Fired when data chunk was received over the network.",
                "parameters": [
                    { "name": "identifier", "type": "integer", "description": "Request identifier." },
                    { "name": "time", "type": "number", "description": "Timestamp." },
                    { "name": "dataLength", "type": "integer", "description": "Data chunk length." },
                    { "name": "lengthReceived", "type": "integer", "description": "Actual bytes received (might be less than dataLength for compressed encodings)." }
                ]
            },
            {
                "name": "didFinishLoading",
                "description": "Fired when HTTP request has finished loading.",
                "parameters": [
                    { "name": "identifier", "type": "integer", "description": "Request identifier." },
                    { "name": "finishTime", "type": "number", "description": "Timestamp." }
                ]
            },
            {
                "name": "didFailLoading",
                "description": "Fired when HTTP request has failed to load.",
                "parameters": [
                    { "name": "identifier", "type": "integer", "description": "Request identifier." },
                    { "name": "time", "type": "number", "description": "Timestamp." },
                    { "name": "errorText", "type": "string", "description": "User friendly error message." }
                ]
            },
            {
                "name": "didLoadResourceFromMemoryCache",
                "description": "Fired when HTTP request has been served from memory cache.",
                "parameters": [
                    { "name": "frameId", "type": "string", "description": "Frame identifier." },
                    { "name": "loaderId", "type": "string", "description": "Loader identifier." },
                    { "name": "documentURL", "type": "string", "description": "URL of the document this resource is loaded for." },
                    { "name": "time", "type": "number", "description": "Timestamp." },
                    { "name": "resource", "$ref": "CachedResource", "description": "Cached resource data." }
                ]
            },
            {
                "name": "setInitialContent",
                "description": "Fired for XMLHttpRequests when their content becomes available.",
                "parameters": [
                    { "name": "identifier", "type": "integer", "description": "Request identifier." },
                    { "name": "content", "type": "string", "description": "Resource content." },
                    { "name": "type", "type": "string", "description": "Resource type. // FIXME" }
                ]
            },
            {
                "name": "didCommitLoadForFrame",
                "description": "Fired once navigation of the frame has completed. Frame is now associated with the new loader.",
                "parameters": [
                    { "name": "frame", "$ref": "Frame", "description": "Frame identifier." },
                    { "name": "loaderId", "type": "string", "description": "Loader identifier." }
                ]
            },
            {
                "name": "didCreateWebSocket",
                "description": "Fired upon WebSocket creation.",
                "parameters": [
                    { "name": "identifier", "type": "integer", "description": "Request identifier." },
                    { "name": "url", "type": "string", "description": "WebSocket request URL." }
                ]
            },
            {
                "name": "willSendWebSocketHandshakeRequest",
                "description": "Fired when WebSocket is about to initiate handshake.",
                "parameters": [
                    { "name": "identifier", "type": "integer", "description": "Request identifier." },
                    { "name": "time", "type": "number", "description": "Timestamp." },
                    { "name": "request", "type": "object", "description": "WebSocket request data." }
                ]
            },
            {
                "name": "didReceiveWebSocketHandshakeResponse",
                "description": "Fired when WebSocket handshake response becomes available.",
                "parameters": [
                    { "name": "identifier", "type": "integer", "description": "Request identifier." },
                    { "name": "time", "type": "number", "description": "Timestamp." },
                    { "name": "response", "type": "object", "description": "WebSocket response data." }
                ]
            },
            {
                "name": "didCloseWebSocket",
                "description": "Fired when WebSocket is closed.",
                "parameters": [
                    { "name": "identifier", "type": "integer", "description": "Request identifier." },
                    { "name": "time", "type": "number", "description": "Timestamp." }
                ]
            }
        ]
    },
    {
        "domain": "Database",
        "types": [],
        "commands": [
            {
                "name": "getDatabaseTableNames",
                "parameters": [
                    { "name": "databaseId", "type": "integer" }
                ],
                "returns": [
                    { "name": "tableNames", "type": "array", "items": { "type": "string" } }
                ]
            },
            {
                "name": "executeSQL",
                "parameters": [
                    { "name": "databaseId", "type": "integer" },
                    { "name": "query", "type": "string" }
                ],
                "returns": [
                    { "name": "success", "type": "boolean" },
                    { "name": "transactionId", "type": "integer" }
                ]
            }
        ],
        "events": [
            {
                "name": "addDatabase",
                "parameters": [
                    { "name": "database", "$ref": "DatabaseDatabase" }
                ]
            },
            {
                "name": "sqlTransactionSucceeded",
                "parameters": [
                    { "name": "transactionId", "type": "integer" },
                    { "name": "columnNames", "type": "array", "items": { "type": "string" } },
                    { "name": "values", "type": "array", "items": { "type": "string or number" }}
                ]
            },
            {
                "name": "sqlTransactionFailed",
                "parameters": [
                    { "name": "transactionId", "type": "integer" },
                    { "name": "sqlError", "$ref": "DatabaseError" }
                ]
            }
        ]
    },
    {
        "domain": "DOMStorage",
        "types": [],
        "commands": [
            {
                "name": "getDOMStorageEntries",
                "parameters": [
                    { "name": "storageId", "type": "integer" }
                ],
                "returns": [
                    { "name": "entries", "type": "array", "items": { "$ref" : "DOMStorageEntry"} }
                ]
            },
            {
                "name": "setDOMStorageItem",
                "parameters": [
                    { "name": "storageId", "type": "integer" },
                    { "name": "key", "type": "string" },
                    { "name": "value", "type": "string" }
                ],
                "returns": [
                    { "name": "success", "type": "boolean" }
                ]
            },
            {
                "name": "removeDOMStorageItem",
                "parameters": [
                    { "name": "storageId", "type": "integer" },
                    { "name": "key", "type": "string" }
                ],
                "returns": [
                    { "name": "success", "type": "boolean" }
                ]
            }
        ],
        "events": [
            {
                "name": "addDOMStorage",
                "parameters": [
                    { "name": "storage", "$ref": "DOMStorageStorage" }
                ]
            },
            {
                "name": "updateDOMStorage",
                "parameters": [
                    { "name": "storageId", "type": "integer" }
                ]
            }
        ]
    },
    {
        "domain": "ApplicationCache",
        "types": [],
        "commands": [
            {
                "name": "getApplicationCaches",
                "returns": [
                    { "name": "applicationCaches", "$ref": "AppCache" }
                ]
            }
        ],
        "events": [
            {
                "name": "updateApplicationCacheStatus",
                "parameters": [
                    { "name": "status", "type": "integer" }
                ]
            },
            {
                "name": "updateNetworkState",
                "parameters": [
                    { "name": "isNowOnline", "type": "boolean" }
                ]
            }
        ]
    },
    {
        "domain": "DOM",
        "description": "This domain exposes DOM read/write operations. Each DOM Node is represented with its mirror object that has an <code>id</code>. This <code>id</code> can be used to get additional information on the Node, convert it into the JavaScript object, etc. It is important that client receives DOM events only for the nodes that are known to the client. Backend keeps track of the nodes that were sent to the client and never sends the same node twice. It is client's responsibility to collect information about the nodes that were sent to the client.",
        "types": [
            {
                "id": "DOMNode",
                "type": "object",
                "properties": {
                    "id": { "type": "integer", "description": "Node identifier that is passed into the rest of the DOM messages as the <code>nodeId</code>. Backend will only push node with given <code>id</code> once. It is aware of all requested nodes and will only fire DOM events for nodes known to the client." },
                    "nodeType": { "type": "integer",  "description": "<code>Node</code>'s nodeType." },
                    "nodeName": { "type": "string", "description": "<code>Node</code>'s nodeName." },
                    "localName": { "type": "string", "description": "<code>Node</code>'s localName." },
                    "nodeValue": { "type": "string", "description": "<code>Node</code>'s nodeValue." },
                    "childNodeCount": { "type": "integer", "optional": true, "description": "Child count for <code>Container</code> nodes." },
                    "children": { "type": "array", "optional": true, "items": { "$ref" : "DOMNode" }, "description": "Child nodes of this node when requested with children." },
                    "attributes": { "type": "array", "optional": true, "items": { "type" : "string" }, "description": "Attributes of the <code>Element</code> node in the form of flat array <code>[name1, value1, name2, value2]</code>." },
                    "documentURL": { "type": "string", "optional": true, "description": "Document URL that <code>Document</code> or <code>FrameOwner</code> node points to." },
                    "publicId": { "type": "string", "optional": true, "description": "<code>DocumentType</code>'s publicId. // FIXME" },
                    "systemId": { "type": "string", "optional": true, "description": "<code>DocumentType</code>'s systemId. // FIXME" },
                    "internalSubset": { "type": "string", "optional": true, "description": "<code>DocumentType</code>'s internalSubset. // FIXME" },
                    "name": { "type": "string", "optional": true, "description": "<code>Attr</code>'s name. // FIXME" },
                    "value": { "type": "string", "optional": true, "description": "<code>Attr</code>'s value. // FIXME" }
                },
                "description": "DOM interaction is implemented in terms of mirror objects that represent the actual DOM nodes. DOMNode is a base node mirror type."
            },
            {
                "id": "DOMEventListener",
                "type": "object",
                "properties": {
                    "type": { "type": "string", "description": "<code>EventListener</code>'s type." },
                    "useCapture": { "type": "boolean", "description": "<code>EventListener</code>'s useCapture." },
                    "isAttribute": { "type": "boolean", "description": "<code>EventListener</code>'s isAttribute." },
                    "nodeId": { "type": "integer",  "description": "Target <code>DOMNode</code> id." },
                    "listenerBody": { "type": "string", "description": "Listener function body." },
                    "sourceName": { "type": "string", "optional" : true, "description": "Handler location source name." },
                    "lineNumber": { "type": "number", "optional" : true, "description": "Handler location line number." }
                },
                "description": "DOM interaction is implemented in terms of mirror objects that represent the actual DOM nodes. DOMNode is a base node mirror type."
            }
        ],
        "commands": [
            {
                "name": "getDocument",
                "returns": [
                    { "name": "root", "$ref": "DOMNode", "description": "Resulting node." }
                ],
                "description": "Returns the root DOM node to the caller."
            },
            {
                "name": "getChildNodes",
                "parameters": [
                    { "name": "nodeId", "type": "integer", "description": "Id of the node to get children for." }
                ],
                "description": "Requests that children of the node with given id are returned to the caller in form of <code>setChildNodes</code> events."
            },
            {
                "name": "querySelector",
                "parameters": [
                    { "name": "nodeId", "type": "integer", "description": "Id of the node to query upon." },
                    { "name": "selectors", "type": "string", "description": "Selector string." },
                    { "name": "documentWide", "type": "boolean", "description": "Set to true to start querying from the node's document." }
                ],
                "returns": [
                    { "name": "elementId", "type": "integer", "description": "Query selector result." }
                ],
                "description": "Executes <code>querySelector</code> on a given node. Setting <code>documentWide</code> to true starts selecting from the document node."
            },
            {
                "name": "querySelectorAll",
                "parameters": [
                    { "name": "nodeId", "type": "integer", "description": "Id of the node to query upon." },
                    { "name": "selectors", "type": "string", "description": "Selector string." },
                    { "name": "documentWide", "type": "boolean", "description": "Set to true to start querying from the node's document." }
                ],
                "returns": [
                    { "name": "nodeIds", "type": "array", "items": { "type": "integer" }, "description": "Query selector result."  }
                ],
                "description": "Executes <code>querySelectorAll</code> on a given node. Setting <code>documentWide</code> to true starts selecting from the document node."
            },
            {
                "name": "setNodeName",
                "parameters": [
                    { "name": "nodeId", "type": "integer", "description": "Id of the node to set name for."  },
                    { "name": "name", "type": "string", "description": "New node's name." }
                ],
                "returns": [
                    { "name": "outNodeId", "type": "integer", "description": "New node's id." }
                ],
                "description": "Sets node name for a node with given id."
            },
            {
                "name": "setNodeValue",
                "parameters": [
                    { "name": "nodeId", "type": "integer", "description": "Id of the node to set value for." },
                    { "name": "value", "type": "string", "description": "New node's value." }
                ],
                "description": "Sets node value for a node with given id."
            },
            {
                "name": "removeNode",
                "parameters": [
                    { "name": "nodeId", "type": "integer", "description": "Id of the node to remove." }
                ],
                "description": "Removes node with given id."
            },
            {
                "name": "setAttribute",
                "parameters": [
                    { "name": "elementId", "type": "integer", "description": "Id of the element to set attribute for." },
                    { "name": "name", "type": "string", "description": "Attribute name." },
                    { "name": "value", "type": "string", "description": "Attribute value." }
                ],
                "description": "Sets attribute for an element with given id."
            },
            {
                "name": "removeAttribute",
                "parameters": [
                    { "name": "elementId", "type": "integer", "description": "Id of the element to remove attribute from." },
                    { "name": "name", "type": "string", "description": "Name of the attribute to remove." }
                ],
                "description": "Removes attribute with given name from an element with given id."
            },
            {
                "name": "getEventListenersForNode",
                "parameters": [
                    { "name": "nodeId", "type": "integer", "description": "Id of the node to get listeners for." }
                ],
                "returns": [
                    { "name": "listenersArray", "type": "array", "items": { "$ref" : "DOMEventListener"}, "description": "Array of relevant listeners." }
                ],
                "description": "Returns event listeners relevant to the node."
            },
            {
                "name": "copyNode",
                "parameters": [
                    { "name": "nodeId", "type": "integer", "description": "Id of the node to copy." }
                ],
                "description": "Copies node's HTML markup into the clipboard."
            },
            {
                "name": "getOuterHTML",
                "parameters": [
                    { "name": "nodeId", "type": "integer", "description": "Id of the node to get markup for." }
                ],
                "returns": [
                    { "name": "outerHTML", "type": "string", "description": "Outer HTML markup." }
                ],
                "description": "Returns node's HTML markup."
            },
            {
                "name": "setOuterHTML",
                "parameters": [
                    { "name": "nodeId", "type": "integer", "description": "Id of the node to set markup for." },
                    { "name": "outerHTML", "type": "string", "description": "Outer HTML markup to set." }
                ],
                "returns": [
                    { "name": "outNodeId", "type": "integer", "description": "Setting outer HTML can change node's id." }
                ],
                "description": "Sets node HTML markup, returns new node id."
            },
            {
                "name": "performSearch",
                "parameters": [
                    { "name": "query", "type": "string", "description": "Plain text or query selector or XPath search query." },
                    { "name": "runSynchronously", "type": "boolean", "description": "When set to true, performing search synchronously (can block user interaction)." }
                ],
                "description": "Starts asynchronous search for a given string in the DOM tree. Use <code>cancelSearch</code> to stop given asynchronous search task."
            },
            {
                "name": "cancelSearch",
                "description": "Cancels asynchronous search started with <code>performSearch</code>."
            },
            {
                "name": "pushNodeToFrontend",
                "parameters": [
                    { "name": "objectId", "type": "string", "description": "JavaScript object id to convert into node." }
                ],
                "returns": [
                    { "name": "nodeId", "type": "integer", "description": "Node id for given object." }
                ],
                "description": "Requests that the node is sent to the caller given the JavaScript node object reference."
            },
            {
                "name": "setSearchingForNode",
                "parameters": [
                    { "name": "enabled", "type": "boolean" }
                ],
                "returns": [
                    { "name": "newState", "type": "boolean" }
                ]
            },
            {
                "name": "highlightDOMNode",
                "parameters": [
                    { "name": "nodeId", "type": "integer" }
                ]
            },
            {
                "name": "hideDOMNodeHighlight"
            },
            {
                "name": "highlightFrame",
                "parameters": [
                    { "name": "frameId", "type": "string" }
                ]
            },
            {
                "name": "hideFrameHighlight"
            },

            {
                "name": "pushNodeByPathToFrontend",
                "parameters": [
                    { "name": "path", "type": "string", "description": "Path to node in the proprietary format." }
                ],
                "returns": [
                    { "name": "nodeId", "type": "integer", "description": "Id of the node for given path." }
                ],
                "description": "Requests that the node is sent to the caller given its path. // FIXME, use XPath"
            },
            {
                "name": "resolveNode",
                "parameters": [
                    { "name": "nodeId", "type": "integer", "description": "Id of the node to resolve." }
                ],
                "returns": [
                    { "name": "object", "$ref": "Object", "description": "JavaScript object wrapper for given node." }
                ],
                "description": "Resolves JavaScript node object for given node id."
            }
        ],
        "events": [
            {
                "name": "documentUpdated",
                "description": "Fired when <code>Document</code> has been totally updated. Node ids are no longer valid."
            },
            {
                "name": "setChildNodes",
                "parameters": [
                    { "name": "parentId", "type": "integer", "description": "Parent node id to populate with children." },
                    { "name": "nodes", "type": "array", "items": { "$ref" : "DOMNode"}, "description": "Child nodes array." }
                ],
                "description": "Fired when backend wants to provide client with the missing DOM structure. This happens upon most of the calls requesting node ids."
            },
            {
                "name": "attributesUpdated",
                "parameters": [
                    { "name": "id", "type": "integer", "description": "Id of the node that has changed." },
                    { "name": "attributes", "type": "array", "items": { "$ref" : "DOMAttribute"}, "description": "New attributes value." }
                ],
                "description": "Fired when <code>Element</code>'s attributes are updated."
            },
            {
                "name": "characterDataModified",
                "parameters": [
                    { "name": "id", "type": "integer", "description": "Id of the node that has changed." },
                    { "name": "newValue", "type": "string", "description": "New text value." }
                ],
                "description": "Mirrors <code>DOMCharacterDataModified</code> event."
            },
            {
                "name": "childNodeCountUpdated",
                "parameters": [
                    { "name": "id", "type": "integer", "description": "Id of the node that has changed." },
                    { "name": "newValue", "type": "integer", "description": "New node count." }
                ],
                "description": "Fired when <code>Container</code>'s child node count has changed."
            },
            {
                "name": "childNodeInserted",
                "parameters": [
                    { "name": "parentId", "type": "integer", "description": "Id of the node that has changed." },
                    { "name": "prevId", "type": "integer", "description": "If of the previous siblint." },
                    { "name": "node", "$ref": "DOMNode", "description": "Inserted node data." }
                ],
                "description": "Mirrors <code>DOMNodeInserted</code> event."
            },
            {
                "name": "childNodeRemoved",
                "parameters": [
                    { "name": "parentId", "type": "integer", "description": "Parent id." },
                    { "name": "id", "type": "integer", "description": "Id of the node that has been removed." }
                ],
                "description": "Mirrors <code>DOMNodeRemoved</code> event."
            },
            {
                "name": "searchResults",
                "parameters": [
                    { "name": "nodeIds", "type": "array", "items": { "type": "integer" }, "description": "Ids of the search result nodes." }
                ],
                "description": "Pushes search results initiated using <code>performSearch</code> to the client."
            }
        ]
    },
    {
        "domain": "CSS",
        "types": [],
        "commands": [
            {
                "name": "getStylesForNode",
                "parameters": [
                    { "name": "nodeId", "type": "integer" }
                ],
                "returns": [
                    { "name": "styles", "$ref": "CSSNodeStyles" }
                ]
            },
            {
                "name": "getComputedStyleForNode",
                "parameters": [
                    { "name": "nodeId", "type": "integer" }
                ],
                "returns": [
                    { "name": "style", "$ref": "CSSComputedStyle" }
                ]
            },
            {
                "name": "getInlineStyleForNode",
                "parameters": [
                    { "name": "nodeId", "type": "integer" }
                ],
                "returns": [
                    { "name": "style", "$ref": "CSSStyle" }
                ]
            },
            {
                "name": "getAllStyles",
                "returns": [
                    { "name": "styleSheetIds", "type": "array", "items": { "type": "string" } }
                ]
            },
            {
                "name": "getStyleSheet",
                "parameters": [
                    { "name": "styleSheetId", "type": "string" }
                ],
                "returns": [
                    { "name": "styleSheet", "$ref": "CSSStyleSheet" }
                ]
            },
            {
                "name": "getStyleSheetText",
                "parameters": [
                    { "name": "styleSheetId", "type": "string" }
                ],
                "returns": [
                    { "name": "url", "type": "string" },
                    { "name": "text", "type": "string" }
                ]
            },
            {
                "name": "setStyleSheetText",
                "parameters": [
                    { "name": "styleSheetId", "type": "string" },
                    { "name": "text", "type": "string" }
                ],
                "returns": [
                    { "name": "success", "type": "boolean" }
                ]
            },
            {
                "name": "setPropertyText",
                "parameters": [
                    { "name": "styleId", "$ref": "CSSStyleId" },
                    { "name": "propertyIndex", "type": "integer" },
                    { "name": "text", "type": "string" },
                    { "name": "overwrite", "type": "boolean" }
                ],
                "returns": [
                    { "name": "style", "$ref": "CSSStyle" }
                ]
            },
            {
                "name": "toggleProperty",
                "parameters": [
                    { "name": "styleId", "$ref": "CSSStyleId" },
                    { "name": "propertyIndex", "type": "integer" },
                    { "name": "disable", "type": "boolean" }
                ],
                "returns": [
                    { "name": "style", "$ref": "CSSStyle" }
                ]
            },
            {
                "name": "setRuleSelector",
                "parameters": [
                    { "name": "ruleId", "$ref": "CSSRuleId" },
                    { "name": "selector", "type": "string" }
                ],
                "returns": [
                    { "name": "rule", "$ref": "CSSRule" }
                ]
            },
            {
                "name": "addRule",
                "parameters": [
                    { "name": "contextNodeId", "type": "integer" },
                    { "name": "selector", "type": "string" }
                ],
                "returns": [
                    { "name": "rule", "$ref": "CSSRule" }
                ]
            },
            {
                "name": "getSupportedCSSProperties",
                "returns": [
                    { "name": "cssProperties", "type": "array", "items": { "type": "string" } }
                ]
            }
        ]
    },
    {
        "domain": "Timeline",
        "types": [],
        "commands": [
            {
                "name": "start"
            },
            {
                "name": "stop"
            }
        ],
        "events": [
            {
                "name": "timelineProfilerWasStarted"
            },
            {
                "name": "timelineProfilerWasStopped"
            },
            {
                "name": "addRecordToTimeline",
                "parameters": [
                    { "name": "record", "$ref": "TimelineRecord" }
                ]
            }
        ]
    },
    {
        "domain": "Debugger",
        "types": [],
        "commands": [
            {
                "name": "enable"
            },
            {
                "name": "disable"
            },
            {
                "name": "activateBreakpoints"
            },
            {
                "name": "deactivateBreakpoints"
            },
            {
                "name": "setJavaScriptBreakpoint",
                "parameters": [
                    { "name": "url", "type": "string" },
                    { "name": "lineNumber", "type": "integer" },
                    { "name": "columnNumber", "type": "integer" },
                    { "name": "condition", "type": "string" },
                    { "name": "enabled", "type": "boolean" }
                ],
                "returns": [
                    { "name": "breakpointId", "type": "string" },
                    { "name": "locations", "type": "array", "items": { "$ref" : "DebuggerLocation"} }
                ]
            },
            {
                "name": "setJavaScriptBreakpointBySourceId",
                "parameters": [
                    { "name": "sourceId", "type": "string" },
                    { "name": "lineNumber", "type": "integer" },
                    { "name": "columnNumber", "type": "integer" },
                    { "name": "condition", "type": "string" },
                    { "name": "enabled", "type": "boolean" }
                ],
                "returns": [
                    { "name": "breakpointId", "type": "string" },
                    { "name": "actualLineNumber", "type": "integer" },
                    { "name": "actualColumnNumber", "type": "integer" }
                ]
            },
            {
                "name": "removeJavaScriptBreakpoint",
                "parameters": [
                    { "name": "breakpointId", "type": "string" }
                ]
            },
            {
                "name": "continueToLocation",
                "parameters": [
                    { "name": "sourceId", "type": "string" },
                    { "name": "lineNumber", "type": "integer" },
                    { "name": "columnNumber", "type": "integer" }
                ]
            },
            {
                "name": "stepOver"
            },
            {
                "name": "stepInto"
            },
            {
                "name": "stepOut"
            },
            {
                "name": "pause"
            },
            {
                "name": "resume"
            },
            {
                "name": "editScriptSource",
                "parameters": [
                    { "name": "sourceID", "type": "string" },
                    { "name": "newContent", "type": "string" }
                ],
                "returns": [
                    { "name": "success", "type": "boolean" },
                    { "name": "result", "type": "string" },
                    { "name": "stackFrames", "type": "array", "items": { "$ref" : "DebuggerStackFrame"} }
                ]
            },
            {
                "name": "getScriptSource",
                "parameters": [
                    { "name": "sourceID", "type": "string" }
                ],
                "returns": [
                    { "name": "scriptSource", "type": "string" }
                ]
            },
            {
                "name": "setPauseOnExceptionsState",
                "parameters": [
                    { "name": "pauseOnExceptionsState", "type": "integer" }
                ],
                "returns": [
                    { "name": "newState", "type": "integer" }
                ]
            },
            {
                "name": "evaluateOnCallFrame",
                "parameters": [
                    { "name": "callFrameId", "type": "string" },
                    { "name": "expression", "type": "string" },
                    { "name": "objectGroup", "type": "string" },
                    { "name": "includeCommandLineAPI", "type": "boolean" }
                ],
                "returns": [
                    { "name": "result", "$ref": "RuntimeObject" }
                ]
            }
        ],
        "events": [
            {
                "name": "debuggerWasEnabled"
            },
            {
                "name": "debuggerWasDisabled"
            },
            {
                "name": "parsedScriptSource",
                "parameters": [
                    { "name": "sourceID", "type": "string" },
                    { "name": "url", "type": "string" },
                    { "name": "lineOffset", "type": "integer" },
                    { "name": "columnOffset", "type": "integer" },
                    { "name": "length", "type": "integer" },
                    { "name": "scriptWorldType", "type": "integer" }
                ]
            },
            {
                "name": "failedToParseScriptSource",
                "parameters": [
                    { "name": "url", "type": "string" },
                    { "name": "data", "type": "string" },
                    { "name": "firstLine", "type": "integer" },
                    { "name": "errorLine", "type": "integer" },
                    { "name": "errorMessage", "type": "string" }
                ]
            },
            {
                "name": "breakpointResolved",
                "parameters": [
                    { "name": "breakpointId", "type": "string" },
                    { "name": "sourceId", "type": "string" },
                    { "name": "lineNumber", "type": "integer" },
                    { "name": "columnNumber", "type": "integer" }
                ]
            },
            {
                "name": "pausedScript",
                "parameters": [
                    { "name": "details", "$ref": "DebuggerBacktrace" }
                ]
            },
            {
                "name": "resumedScript"
            },
            {
                "name": "didCreateWorker",
                "parameters": [
                    { "name": "id", "type": "integer" },
                    { "name": "url", "type": "string" },
                    { "name": "isShared", "type": "boolean" }
                ]
            },
            {
                "name": "didDestroyWorker",
                "parameters": [
                    { "name": "id", "type": "integer" }
                ]
            }
        ]
    },
    {
        "domain": "BrowserDebugger",
        "types": [],
        "commands": [
            {
                "name": "setDOMBreakpoint",
                "parameters": [
                    { "name": "nodeId", "type": "integer" },
                    { "name": "type", "type": "integer" }
                ]
            },
            {
                "name": "removeDOMBreakpoint",
                "parameters": [
                    { "name": "nodeId", "type": "integer" },
                    { "name": "type", "type": "integer" }
                ]
            },
            {
                "name": "setEventListenerBreakpoint",
                "parameters": [
                    { "name": "eventName", "type": "string" }
                ]
            },
            {
                "name": "removeEventListenerBreakpoint",
                "parameters": [
                    { "name": "eventName", "type": "string" }
                ]
            },
            {
                "name": "setXHRBreakpoint",
                "parameters": [
                    { "name": "url", "type": "string" }
                ]
            },
            {
                "name": "removeXHRBreakpoint",
                "parameters": [
                    { "name": "url", "type": "string" }
                ]
            }
        ]
    },
    {
        "domain": "Profiler",
        "types": [],
        "commands": [
            {
                "name": "enable"
            },
            {
                "name": "disable"
            },
            {
                "name": "isEnabled",
                "returns": [
                    { "name": "state", "type": "boolean" }
                ]
            },
            {
                "name": "start"
            },
            {
                "name": "stop"
            },
            {
                "name": "getProfileHeaders",
                "returns": [
                    { "name": "headers", "type": "array", "items": { "$ref" : "ProfileHeader"} }
                ]
            },
            {
                "name": "getProfile",
                "parameters": [
                    { "name": "type", "type": "string" },
                    { "name": "uid", "type": "integer" }
                ],
                "returns": [
                    { "name": "profile", "$ref": "Profile" }
                ]
            },
            {
                "name": "removeProfile",
                "parameters": [
                    { "name": "type", "type": "string" },
                    { "name": "uid", "type": "integer" }
                ]
            },
            {
                "name": "clearProfiles"
            },
            {
                "name": "takeHeapSnapshot",
                "parameters": [
                    { "name": "detailed", "type": "boolean" }
                ]
            },
            {
                "name": "getExactHeapSnapshotNodeRetainedSize",
                "parameters": [
                    { "name": "uid", "type": "integer" },
                    { "name": "nodeId", "type": "integer" }
                ],
                "returns": [
                    { "name": "size", "type": "integer" }
                ]
            },
            {
                "name": "collectGarbage"
            }
        ],
        "events": [
            {
                "name": "profilerWasEnabled"
            },
            {
                "name": "profilerWasDisabled"
            },
            {
                "name": "addProfileHeader",
                "parameters": [
                    { "name": "header", "$ref": "ProfileHeader" }
                ]
            },
            {
                "name": "addHeapSnapshotChunk",
                "parameters": [
                    { "name": "uid", "type": "integer" },
                    { "name": "chunk", "type": "string" }
                ]
            },
            {
                "name": "finishHeapSnapshot",
                "parameters": [
                    { "name": "uid", "type": "integer" }
                ]
            },
            {
                "name": "setRecordingProfile",
                "parameters": [
                    { "name": "isProfiling", "type": "boolean" }
                ]
            },
            {
                "name": "resetProfiles"
            },
            {
                "name": "reportHeapSnapshotProgress",
                "parameters": [
                    { "name": "done", "type": "integer" },
                    { "name": "total", "type": "integer" }
                ]
            }
        ]
    }
]
