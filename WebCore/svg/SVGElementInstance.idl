/*
 * Copyright (C) 2007, 2008 Nikolas Zimmermann <zimmermann@kde.org>
 * Copyright (C) 2008 Apple Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public License
 * along with this library; see the file COPYING.LIB.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA 02110-1301, USA.
 */

module svg {

    interface [
        Conditional=SVG,
        CustomMarkFunction,
        GenerateNativeConverter
    ] SVGElementInstance
#if defined(LANGUAGE_OBJECTIVE_C) && LANGUAGE_OBJECTIVE_C
        : Object, EventTarget
#endif /* defined(LANGUAGE_OBJECTIVE_C) */
    {
        readonly attribute SVGElement correspondingElement;
        readonly attribute SVGUseElement correspondingUseElement;
        readonly attribute SVGElementInstance parentNode;
        readonly attribute SVGElementInstanceList childNodes;
        readonly attribute SVGElementInstance firstChild;
        readonly attribute SVGElementInstance lastChild;
        readonly attribute SVGElementInstance previousSibling;
        readonly attribute SVGElementInstance nextSibling;

        // EventTarget
#if !defined(LANGUAGE_OBJECTIVE_C) || !LANGUAGE_OBJECTIVE_C
        attribute [DontEnum] EventListener onabort;
        attribute [DontEnum] EventListener onblur;
        attribute [DontEnum] EventListener onchange;
        attribute [DontEnum] EventListener onclick;
        attribute [DontEnum] EventListener oncontextmenu;
        attribute [DontEnum] EventListener ondblclick;
        attribute [DontEnum] EventListener onerror;
        attribute [DontEnum] EventListener onfocus;
        attribute [DontEnum] EventListener oninput;
        attribute [DontEnum] EventListener onkeydown;
        attribute [DontEnum] EventListener onkeypress;
        attribute [DontEnum] EventListener onkeyup;
        attribute [DontEnum] EventListener onload;
        attribute [DontEnum] EventListener onmousedown;
        attribute [DontEnum] EventListener onmousemove;
        attribute [DontEnum] EventListener onmouseout;
        attribute [DontEnum] EventListener onmouseover;
        attribute [DontEnum] EventListener onmouseup;
        attribute [DontEnum] EventListener onmousewheel;
        attribute [DontEnum] EventListener onbeforecut;
        attribute [DontEnum] EventListener oncut;
        attribute [DontEnum] EventListener onbeforecopy;
        attribute [DontEnum] EventListener oncopy;
        attribute [DontEnum] EventListener onbeforepaste;
        attribute [DontEnum] EventListener onpaste;
        attribute [DontEnum] EventListener ondragenter;
        attribute [DontEnum] EventListener ondragover;
        attribute [DontEnum] EventListener ondragleave;
        attribute [DontEnum] EventListener ondrop;
        attribute [DontEnum] EventListener ondragstart;
        attribute [DontEnum] EventListener ondrag;
        attribute [DontEnum] EventListener ondragend;
        attribute [DontEnum] EventListener onreset;
        attribute [DontEnum] EventListener onresize;
        attribute [DontEnum] EventListener onscroll;
        attribute [DontEnum] EventListener onsearch;
        attribute [DontEnum] EventListener onselect;
        attribute [DontEnum] EventListener onselectstart;
        attribute [DontEnum] EventListener onsubmit;
        attribute [DontEnum] EventListener onunload;

        void addEventListener(in DOMString type, 
                              in EventListener listener, 
                              in boolean useCapture);
        void removeEventListener(in DOMString type, 
                                 in EventListener listener, 
                                 in boolean useCapture);
        boolean dispatchEvent(in Event event)
            raises(EventException);
#endif /* defined(LANGUAGE_OBJECTIVE_C) */
    };
}
