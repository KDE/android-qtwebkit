/*
 * Copyright (C) 2006 Apple Computer, Inc.
 * Copyright (C) 2006 Samuel Weinig <sam.weinig@gmail.com>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public License
 * along with this library; see the file COPYING.LIB.  If not, write to
 * the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

module core {

    interface [LegacyParent=KJS::DOMEventTargetNode, GenerateConstructor] Document : EventTargetNode {

        // DOM Level 1 Core
        
        readonly attribute DocumentType doctype;
        
        readonly attribute DOMImplementation implementation;
        
        readonly attribute Element documentElement;
        
        Element createElement(in DOMString tagName)
            raises (DOMException);
        
        DocumentFragment createDocumentFragment();
        
        Text createTextNode(in DOMString data);
        
        Comment createComment(in DOMString data);
        
        CDATASection createCDATASection(in DOMString data)
            raises(DOMException);
        
        [OldStyleObjC] ProcessingInstruction createProcessingInstruction(in DOMString target, 
                                                                           in DOMString data)
            raises (DOMException);
        
        Attr createAttribute(in DOMString name)
            raises (DOMException);
        
        EntityReference createEntityReference(in DOMString name)
            raises(DOMException);
        
        NodeList getElementsByTagName(in DOMString tagname);
        
        // DOM Level 2 Core
        
        [OldStyleObjC] Node importNode(in Node importedNode,
                                         in boolean deep)
            raises (DOMException);
        
        [OldStyleObjC] Element createElementNS(in DOMString namespaceURI,
                                                 in DOMString qualifiedName)
            raises (DOMException);
        
        [OldStyleObjC] Attr createAttributeNS(in DOMString namespaceURI,
                                                in DOMString qualifiedName)
            raises (DOMException);
        
        [OldStyleObjC] NodeList getElementsByTagNameNS(in DOMString namespaceURI,
                                                         in DOMString localName);
        
        Element getElementById(in DOMString elementId);

        // DOM Level 2 Events (DocumentEvents interface)

        Event createEvent(in DOMString eventType)
            raises(DOMException);

        // DOM Level 2 Tranversal and Range (DocumentRange interface)

        Range createRange();

        // DOM Level 2 Tranversal and Range (DocumentTraversal interface)

        [Exclude=ObjC] NodeIterator createNodeIterator(in Node root, 
                                                       in unsigned long whatToShow,
                                                       in NodeFilter filter,
                                                       in boolean entityReferenceExpansion)
            raises(DOMException);

        [Exclude=ObjC] TreeWalker createTreeWalker(in Node root, 
                                                   in unsigned long whatToShow, 
                                                   in NodeFilter filter, 
                                                   in boolean entityReferenceExpansion)
            raises(DOMException);

        // DOM Level 2 Abstract Views (DocumentView interface)

        readonly attribute DOMWindow defaultView;

        // DOM Level 2 Style (DocumentStyle interface)

        readonly attribute StyleSheetList styleSheets;

        // DOM Level 2 Style (DocumentCSS interface)

        [OldStyleObjC] CSSStyleDeclaration getOverrideStyle(in Element element, 
                                             in DOMString pseudoElement);

        // DOM Level 3 Core

        readonly attribute [ConvertNullStringTo=Null, Exclude=ObjC] DOMString inputEncoding;
        
        Node adoptNode(in Node source)
            raises (DOMException);

#ifdef XPATH_SUPPORT
        // DOM Level 3 XPath (XPathEvaluator interface)
        [OldStyleObjC] XPathExpression createExpression(in DOMString expression,
                                         in XPathNSResolver resolver)
            raises(DOMException);

        XPathNSResolver createNSResolver(in Node nodeResolver);
        
        [OldStyleObjC] XPathResult evaluate(in DOMString expression,
                             in Node contextNode, 
                             in XPathNSResolver resolver,
                             in unsigned short type,
                             in XPathResult inResult)
            raises(DOMException);
#endif

        // Common extensions

        [Exclude=ObjC] boolean execCommand(in DOMString command, 
                                           in boolean userInterface, 
                                           in DOMString value);

        [Exclude=ObjC] boolean queryCommandEnabled(in DOMString command);

        [Exclude=ObjC] boolean queryCommandIndeterm(in DOMString command);

        [Exclude=ObjC] boolean queryCommandState(in DOMString command);

        [Exclude=ObjC] boolean queryCommandSupported(in DOMString command);

        [ConvertNullStringTo=False, Exclude=ObjC] DOMString queryCommandValue(in DOMString command);

        // IE extensions

        readonly attribute [Exclude=ObjC] DOMString URL;

        attribute [ConvertNullStringTo=Undefined, Exclude=ObjC] DOMString charset;

        readonly attribute [ConvertNullStringTo=Undefined, Exclude=ObjC] DOMString defaultCharset;

        readonly attribute [ConvertNullStringTo=Undefined, Exclude=ObjC] DOMString readyState;

        [Exclude=ObjC] Element elementFromPoint(in long x, in long y);

        // Mozilla extensions

        readonly attribute [ConvertNullStringTo=Null, Exclude=ObjC] DOMString characterSet;

        // WebKit extensions

        readonly attribute [ConvertNullStringTo=Null, Exclude=ObjC] DOMString preferredStylesheetSet;

        attribute [ConvertNullStringTo=Null, Exclude=ObjC] DOMString selectedStylesheetSet;

    };

}
