/*
 * Copyright (C) 2006 Apple Computer, Inc.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public License
 * along with this library; see the file COPYING.LIB.  If not, write to
 * the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

// touched to regenerate

module core {

    interface [LegacyParent=KJS::DOMElement] Element : EventTargetNode {

        // DOM Level 1

        NodeList getElementsByTagName(in DOMString name);

        // ConvertNullStringTo=Null is used here since if the attribute isn't present at all
        // the function should return null and not "".
        [ConvertNullStringTo=Null] DOMString getAttribute(in DOMString name);

        void setAttribute(in DOMString name,
                          in DOMString value)
            raises(DOMException);

        void removeAttribute(in DOMString name)
            raises(DOMException);

        Attr getAttributeNode(in DOMString name);

        Attr setAttributeNode(in Attr newAttr)
            raises(DOMException);

        Attr removeAttributeNode(in Attr oldAttr)
            raises(DOMException);

        // DOM Level 2

        NodeList getElementsByTagNameNS(in [ConvertNullToNullString] DOMString namespaceURI,
                                        in DOMString localName);

        boolean hasAttribute(in DOMString name);

        boolean hasAttributeNS(in [ConvertNullToNullString] DOMString namespaceURI,
                               in DOMString localName);

        DOMString getAttributeNS(in [ConvertNullToNullString] DOMString namespaceURI,
                                 in DOMString localName);

        void setAttributeNS(in [ConvertNullToNullString] DOMString namespaceURI,
                            in DOMString qualifiedName, 
                            in DOMString value)
            raises(DOMException);

        void removeAttributeNS(in [ConvertNullToNullString] DOMString namespaceURI,
                               in DOMString localName)
            raises(DOMException);

        Attr getAttributeNodeNS(in [ConvertNullToNullString] DOMString namespaceURI,
                                in DOMString localName);

        Attr setAttributeNodeNS(in Attr newAttr)
            raises(DOMException);

        // extensions

        void focus();
        void blur();

        readonly attribute CSSStyleDeclaration style;

    };

}

