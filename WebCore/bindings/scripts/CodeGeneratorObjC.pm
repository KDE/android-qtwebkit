# 
# Copyright (C) 2005 Nikolas Zimmermann <wildfox@kde.org>
# Copyright (C) 2006 Anders Carlsson <andersca@mac.com> 
# Copyright (C) 2006 Samuel Weinig <sam.weinig@gmail.com>
# Copyright (C) 2006 Apple Computer, Inc.
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Library General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.
# 
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Library General Public License for more details.
# 
# You should have received a copy of the GNU Library General Public License
# aint with this library; see the file COPYING.LIB.  If not, write to
# the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.
#

package CodeGeneratorObjC;

use File::stat;

my $module = "";
my $outputDir = "";
my %implIncludes = ();
my %headerForwardDeclarations = ();
my %headerForwardDeclarationsForProtocols = ();
my $buildingForTigerOrEarlier = 1 if $ENV{"MACOSX_DEPLOYMENT_TARGET"} and $ENV{"MACOSX_DEPLOYMENT_TARGET"} <= 10.4;
my $buildingForLeopardOrLater = 1 if $ENV{"MACOSX_DEPLOYMENT_TARGET"} and $ENV{"MACOSX_DEPLOYMENT_TARGET"} >= 10.5;

my $exceptionInit = "WebCore::ExceptionCode ec = 0;";
my $exceptionRaiseOnError = "raiseOnDOMError(ec);";

# Default Licence Templates
my $headerLicenceTemplate = << "EOF";
/*
 * Copyright (C) 2004-2006 Apple Computer, Inc.  All rights reserved.
 * Copyright (C) 2006 Samuel Weinig <sam.weinig\@gmail.com>
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE COMPUTER, INC. ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE COMPUTER, INC. OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 */
EOF

my $implementationLicenceTemplate = << "EOF";
/*
 * This file is part of the WebKit open source project.
 * This file has been generated by generate-bindings.pl. DO NOT MODIFY!
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE COMPUTER, INC. ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE COMPUTER, INC. OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. 
 */
EOF

# Default constructor
sub new
{
    my $object = shift;
    my $reference = { };

    $codeGenerator = shift;
    $outputDir = shift;

    bless($reference, $object);
    return $reference;
}

sub finish
{
    my $object = shift;

    # Commit changes!
    $object->WriteData();
}

# Params: 'domClass' struct
sub GenerateInterface
{
    my $object = shift;
    my $dataNode = shift;

    $codeGenerator->RemoveExcludedAttributesAndFunctions($dataNode, "ObjC");

    # Start actual generation..
    $object->GenerateHeader($dataNode);
    $object->GenerateImplementation($dataNode);

    my $name = $dataNode->name;

    # Open files for writing...
    my $headerFileName = "$outputDir/DOM$name.h";
    my $implFileName = "$outputDir/DOM$name.mm";

    open($IMPL, ">$implFileName") or die "Couldn't open file $implFileName";
    open($HEADER, ">$headerFileName") or die "Couldn't open file $headerFileName";
}

# Params: 'idlDocument' struct
sub GenerateModule
{
    my $object = shift;
    my $dataNode = shift;  
    
    $module = $dataNode->module;    
}

sub GetClassName
{
    my $name = $codeGenerator->StripModule(shift);

    # special cases
    if ($name eq "boolean") {
        return "BOOL";
    } elsif ($name eq "unsigned long") {
        return "unsigned";
    } elsif ($name eq "long") {
        return "int";
    } elsif ($name eq "DOMString") {
        return "NSString";
    } elsif ($name eq "DOMWindow") {
        return "DOMAbstractView";
    } elsif ($name eq "XPathNSResolver") {
        return "id <DOMXPathNSResolver>";
    } elsif ($name eq "unsigned short" 
             or $name eq "float"
             or $name eq "void"
             or $name eq "DOMImplementation") {
        return $name;
    }

    # Default, assume Objective-C type has the same type name as
    # idl type prefixed with "DOM".
    return "DOM" . $name;
}

sub GetImplClassName
{
    my $name = $codeGenerator->StripModule(shift);

    # special cases
    if ($name eq "DOMImplementation") {
        return "DOMImplementationFront";
    }

    if ($name eq "Rect") {
        return "RectImpl";
    }

    return $name;
}

sub GetParentImplClassName
{
    my $dataNode = shift;

    return "Object" if @{$dataNode->parents} eq 0;

    my $parent = $codeGenerator->StripModule($dataNode->parents(0));

    # special cases
    if ($parent eq "EventTargetNode") {
        $parent = "Node";
    } elsif ($parent eq "HTMLCollection") {
        $parent = "Object";
    }

    return $parent;
}

sub GetObjCType
{
    my $name = GetClassName(shift);

    if ($codeGenerator->IsPrimitiveType($name)
            or $name eq "BOOL"
            or $name eq "unsigned"
            or $name eq "int"
            or $name eq "id <DOMXPathNSResolver>") {
        return $name;
    }

    # Default, return type as a pointer.
    return "$name *";
}

sub GetObjCTypeMaker
{
    my $type = $codeGenerator->StripModule(shift);

    if ($codeGenerator->IsPrimitiveType($type) or $type eq "DOMString") {
        return "";
    }

    if ($type eq "RGBColor") {
        return "_RGBColorWithRGB";
    }

    my $typeMaker = "";

    if ($type eq "HTMLCollection") {
        $typeMaker = "collection";
    } elsif ($type eq "HTMLFormElement") {
        $typeMaker = "formElement";
    } elsif ($type eq "HTMLElement") {
        $typeMaker = "element";
    } elsif ($type eq "HTMLOptionsCollection") {
        $typeMaker = "optionsCollection";
    } elsif ($type eq "HTMLDocument") {
        $typeMaker = "HTMLDocument";
    } elsif ($type eq "HTMLTableCaptionElement") {
        $typeMaker = "tableCaptionElement";
    } elsif ($type eq "HTMLTableSectionElement") {
        $typeMaker = "tableSectionElement";
    } elsif ($type eq "CSSStyleDeclaration") {
        $typeMaker = "styleDeclaration";
    } elsif ($type eq "CSSStyleSheet") {
        $typeMaker = "CSSStyleSheet";
    } elsif ($type eq "CSSRule") {
        $typeMaker = "rule";
    } elsif ($type eq "CSSRuleList") {
        $typeMaker = "ruleList";
    } elsif ($type eq "CSSValue") {
        $typeMaker = "value";
    } elsif ($type eq "CSSPrimitiveValue") {
        $typeMaker = "value";
    } elsif ($type eq "DOMImplementation") {
        $typeMaker = "DOMImplementation";
    } elsif ($type eq "CDATASection") {
        $typeMaker = "CDATASection";
    } elsif ($type eq "DOMWindow") {
        $typeMaker = "abstractView";
    } elsif ($type eq "XPathResult") {
        $typeMaker = "xpathResult";
    } elsif ($type eq "XPathNSResolver") {
        $typeMaker = "xpathNSResolver";
    } elsif ($type eq "XPathExpression") {
        $typeMaker = "xpathExpression";
    } else {
        $typeMaker = lcfirst($type);
    }

    # put into the form "_fooBarWith" for type FooBar.
    $typeMaker = "_" . $typeMaker . "With";
    return $typeMaker;
}

sub AddForwardDeclarationsForType
{
    my $type = $codeGenerator->StripModule(shift);
    
    if ($codeGenerator->IsPrimitiveType($type) or $type eq "DOMString") {
        return;
    }

    if ($type eq "DOMImplementation") {
        $headerForwardDeclarations{"$type"} = 1;
        return;
    }

    if ($type eq "DOMWindow") {
        $headerForwardDeclarations{"DOMAbstractView"} = 1;
        return;
    }

    if ($type eq "XPathNSResolver") {
        $headerForwardDeclarationsForProtocols{"DOMXPathNSResolver"} = 1;
        return;
    }

    $headerForwardDeclarations{"DOM$type"} = 1;
}

sub AddIncludesForType
{
    my $type = $codeGenerator->StripModule(shift);

    return if $codeGenerator->IsPrimitiveType($type);

    if ($type eq "DOMString") {
        $implIncludes{"PlatformString.h"} = 1;
        return;
    }

    # Temp DOMCSS.h
    if ($type eq "Rect") {
        $implIncludes{"DOMRect.h"} = 1;
        $implIncludes{"RectImpl.h"} = 1;
        return;
    }
    if ($type eq "RGBColor") {
        $implIncludes{"DOMRGBColor.h"} = 1;
        $implIncludes{"Color.h"} = 1;
        return;
    }

    # Temp DOMEvents.h
    if ($type eq "Event") {
        $implIncludes{"DOMEvents.h"} = 1;
        $implIncludes{"DOMEventsInternal.h"} = 1;
        $implIncludes{"$type.h"} = 1;
        return;
    }

    # Temp DOMViews.h
    if ($type eq "DOMWindow") {
        $implIncludes{"DOMViews.h"} = 1;
        $implIncludes{"DOMViewsInternal.h"} = 1;
        $implIncludes{"$type.h"} = 1;
        return;
    }

    # Temp DOMXPath.h
    if ($type eq "XPathExpression" or $type eq "XPathNSResolver" or $type eq "XPathResult") {
        $implIncludes{"DOMXPath.h"} = 1;
        $implIncludes{"DOMXPathInternal.h"} = 1;
        $implIncludes{"$type.h"} = 1;
        return;
    }

    # Temp DOMImplementationFront.h
    if ($type eq "DOMImplementation") {
        $implIncludes{"DOMImplementationFront.h"} = 1;
    }

    # FIXME: for some reason it won't compile without both CSSStyleDeclaration.h
    # and CSSMutableStyleDeclaration.h
    if ($type eq "CSSStyleDeclaration") {
        $implIncludes{"CSSMutableStyleDeclaration.h"} = 1;
    }


    # Add type specific internal types.
    $implIncludes{"DOMHTMLInternal.h"} = 1 if $type =~ /^HTML/;

    # Default, include the same named file (the implementation) and the same name prefixed with "DOM". 
    $implIncludes{"$type.h"} = 1;
    $implIncludes{"DOM$type.h"} = 1;
}

sub GenerateHeader
{
    my $object = shift;
    my $dataNode = shift;

    # Make sure that we don't have more than one parent.
    die "A class can't have more than one parent in ObjC." if @{$dataNode->parents} > 1;

    my $interfaceName = $dataNode->name;
    my $className = GetClassName($interfaceName);
    my $parentClassName = "DOM" . GetParentImplClassName($dataNode);

    my $numConstants = @{$dataNode->constants};
    my $numAttributes = @{$dataNode->attributes};
    my $numFunctions = @{$dataNode->functions};

    # - Add default header template
    @headerContentHeader = split("\r", $headerLicenceTemplate);

    # - INCLUDES -
    push(@headerContentHeader, "\n#import <WebCore/$parentClassName.h>\n\n");

    # - Add constants.
    if ($numConstants > 0) {
        my @headerConstants = ();
        foreach my $constant (@{$dataNode->constants}) {

            my $constantName = $constant->name;
            my $constantValue = $constant->value;
            my $output = "    DOM_" . $constantName . " = " . $constantValue;
            
            push(@headerConstants, $output);
        }

        my $combinedConstants = join(",\n", @headerConstants);

        # FIXME: the formatting of the enums should line up the equal signs.
        push(@headerContent, "enum {\n");
        push(@headerContent, $combinedConstants);
        push(@headerContent, "\n};\n\n");        
    }

    # - Begin @interface 
    push(@headerContent, "\@interface $className : $parentClassName\n");

    # - Add attribute getters/setters.
    if ($numAttributes > 0) {
        my @headerAttributes = ();

        foreach (@{$dataNode->attributes}) {
            my $attribute = $_;

            AddForwardDeclarationsForType($attribute->signature->type);

            my $attributeName = $attribute->signature->name;
            if ($attributeName eq "id") {
                # Special case attribute id to be idName to avoid Obj-C nameing conflict.
                $attributeName .= "Name";
            } elsif ($attributeName eq "frame") {
                # Special case attribute frame to be frameBorders.
                $attributeName .= "Borders";
            }

            my $attributeType = GetObjCType($attribute->signature->type);
            my $attributeIsReadonly = ($attribute->type =~ /^readonly/);

            if ($buildingForLeopardOrLater) {
                my $property = "\@property" . ($attributeIsReadonly ? "(readonly)" : "") . " " . $attributeType . ($attributeType =~ /\*$/ ? "" : " ") . $attributeName . ";\n";
                push(@headerAttributes, $property);
            } else {
                # - GETTER
                my $getter = "- (" . $attributeType . ")" . $attributeName . ";\n";
                push(@headerAttributes, $getter);

                # - SETTER
                if (!$attributeIsReadonly) {
                    my $setter = "- (void)set" . ucfirst($attributeName) . ":(" . $attributeType . ")new" . ucfirst($attributeName) . ";\n";
                    push(@headerAttributes, $setter);
                }
            }
        }

        push(@headerContent, @headerAttributes) if @headerAttributes > 0;
    }

    my @deprecatedHeaderFunctions = ();

    # - Add functions.
    if ($numFunctions > 0) {
        my @headerFunctions = ();

        foreach (@{$dataNode->functions}) {
            my $function = $_;

            AddForwardDeclarationsForType($function->signature->type);

            my $functionName = $function->signature->name;
            my $returnType = GetObjCType($function->signature->type);
            my $numberOfParameters = @{$function->parameters};

            my $parameterIndex = 0;
            my $functionSig = "- ($returnType)$functionName";
            foreach my $param (@{$function->parameters}) {
                my $paramName = $param->name;
                my $paramType = GetObjCType($param->type);

                AddForwardDeclarationsForType($param->type);

                if ($parameterIndex >= 1) {
                    my $paramPrefix = $param->extendedAttributes->{"ObjCPrefix"};
                    $paramPrefix = $paramName unless defined($paramPrefix);
                    $functionSig .= " $paramPrefix";
                }

                $functionSig .= ":($paramType)$paramName";

                $parameterIndex++;
            }

            $functionSig .= ";\n";

            push(@headerFunctions, $functionSig);

            # generate the old style method names with un-named parameters, these methods are deprecated
            if (@{$function->parameters} > 1 and $function->signature->extendedAttributes->{"OldStyleObjC"}) {
                my $deprecatedFunctionSig = $functionSig;
                $deprecatedFunctionSig =~ s/\s\w+:/ :/g; # remove parameter names
                $deprecatedFunctionSig =~ s/;\n$/ DEPRECATED_IN_MAC_OS_X_VERSION_10_5_AND_LATER;\n/ if $buildingForLeopardOrLater;
                push(@deprecatedHeaderFunctions, $deprecatedFunctionSig);
            }
        }

        if (@headerFunctions > 0) {
            push(@headerContent, "\n") if $buildingForLeopardOrLater and $numAttributes > 0;
            push(@headerContent, @headerFunctions);
        }
    }

    # - End @interface 
    push(@headerContent, "\@end\n");

    if (@deprecatedHeaderFunctions > 0) {
        # - Deprecated category @interface 
        push(@headerContent, "\n\@interface $className (" . $className . "Deprecated)\n");
        push(@headerContent, @deprecatedHeaderFunctions);
        push(@headerContent, "\@end\n");
    }
}

sub GenerateImplementation
{
    my $object = shift;
    my $dataNode = shift;

    my $interfaceName = $dataNode->name;
    my $className = GetClassName($interfaceName);
    my $implClassName = GetImplClassName($interfaceName);
    my $parentImplClassName = GetParentImplClassName($dataNode);

    my $numAttributes = @{$dataNode->attributes};
    my $numFunctions = @{$dataNode->functions};
    my $hasFunctionsOrAttributes = $numAttributes + $numFunctions;

    # - Add default header template.
    @implContentHeader = split("\r", $implementationLicenceTemplate);

    # - INCLUDES -
    push(@implContentHeader, "\n#import \"config.h\"\n");
    push(@implContentHeader, "#import \"$className.h\"\n\n");

    if ($hasFunctionsOrAttributes) {
        push(@implContentHeader, "#import \"DOMInternal.h\"\n");
        push(@implContentHeader, "#import <wtf/GetPtr.h>\n");

        # include module-dependent internal interfaces.
        if ($module eq "html") {
            # HTML module internal interfaces
            push(@implContentHeader, "#import \"DOMHTMLInternal.h\"\n");
        } elsif ($module eq "css") {
            # CSS module internal interfaces
            push(@implContentHeader, "#import \"DOMCSSInternal.h\"\n");
        } elsif ($module eq "events") {
            # CSS module internal interfaces
            push(@implContentHeader, "#import \"DOMEventsInternal.h\"\n");
        } elsif ($module eq "xpath") {
            # CSS module internal interfaces
            push(@implContentHeader, "#import \"DOMXPathInternal.h\"\n");
        }

        # include Implementation class
        push(@implContentHeader, "#import \"$implClassName.h\" // implementation class\n");
    }

    @implContent = ();

    # START implementation
    push(@implContent, "\@implementation $className\n\n");

    if ($hasFunctionsOrAttributes) {
        # Add namespace to implementation class name 
        $implClassName = "WebCore::" . $implClassName;

        if ($parentImplClassName eq "Object") {
            # Only generate 'dealloc' and 'finalize' methods for direct subclasses of DOMObject.

            push(@implContent, "#define IMPL reinterpret_cast<$implClassName*>(_internal)\n\n");

            push(@implContent, "- (void)dealloc\n");
            push(@implContent, "{\n");
            push(@implContent, "    if (_internal)\n");
            push(@implContent, "        IMPL->deref();\n");
            push(@implContent, "    [super dealloc];\n");
            push(@implContent, "}\n\n");

            push(@implContent, "- (void)finalize\n");
            push(@implContent, "{\n");
            push(@implContent, "    if (_internal)\n");
            push(@implContent, "        IMPL->deref();\n");
            push(@implContent, "    [super finalize];\n");
            push(@implContent, "}\n\n");
            
        } elsif ($interfaceName eq "CSSStyleSheet") {
            # Special case for CSSStyleSheet
            push(@implContent, "#define IMPL reinterpret_cast<WebCore::CSSStyleSheet*>(_internal)\n\n");
        } else {
            my $internalBaseType;
            if ($parentImplClassName eq "CSSValue") {
                $internalBaseType = "WebCore::CSSValue"
            } elsif ($parentImplClassName eq "CSSRule") {
                $internalBaseType = "WebCore::CSSRule"
            } else {
                $internalBaseType = "WebCore::Node"
            }

            push(@implContent, "#define IMPL static_cast<$implClassName*>(reinterpret_cast<$internalBaseType*>(_internal))\n\n");
        }
    }

    # - Attributes
    if ($numAttributes > 0) {
        foreach (@{$dataNode->attributes}) {
            my $attribute = $_;

            AddIncludesForType($attribute->signature->type);

            my $idlType = $codeGenerator->StripModule($attribute->signature->type);

            my $attributeName = $attribute->signature->name;
            my $attributeType = GetObjCType($attribute->signature->type);
            my $attributeIsReadonly = ($attribute->type =~ /^readonly/);

            my $interfaceName = $attributeName;
            if ($attributeName eq "id") {
                # Special case attribute id to be idName to avoid Obj-C nameing conflict.
                $interfaceName .= "Name";
            } elsif ($attributeName eq "frame") {
                # Special case attribute frame to be frameBorders.
                $interfaceName .= "Borders";
            }

            # - GETTER
            my $getterSig = "- ($attributeType)$interfaceName\n";
            my $hasGetterException = @{$attribute->getterExceptions};
            my $getterContentHead = "IMPL->$attributeName(";
            my $getterContentTail = ")";

            my $attributeTypeSansPtr = $attributeType;
            $attributeTypeSansPtr =~ s/ \*$//; # Remove trailing " *" from pointer types.
            my $typeMaker = GetObjCTypeMaker($attribute->signature->type);

            # Special cases
            if ($attributeTypeSansPtr eq "DOMImplementation") {
                # FIXME: We have to special case DOMImplementation until DOMImplementationFront is removed
                $getterContentHead = "[$attributeTypeSansPtr $typeMaker:implementationFront(IMPL";
                $getterContentTail .= "]";
            } elsif ($attributeName =~ /(\w+)DisplayString$/) {
                my $attributeToDisplay = $1;
                $getterContentHead = "IMPL->$attributeToDisplay().replace(\'\\\\\', [self _element]->document()->backslashAsCurrencySymbol()";
                $implIncludes{"Document.h"} = 1;
            } elsif ($typeMaker ne "") {
                # Surround getter with TypeMaker
                $getterContentHead = "[$attributeTypeSansPtr $typeMaker:WTF::getPtr(" . $getterContentHead;
                $getterContentTail .= ")]";
            }

            my $getterContent;
            if ($hasGetterException) {
                $getterContent = $getterContentHead . "ec" . $getterContentTail;
            } else {
                $getterContent = $getterContentHead . $getterContentTail;
            }

            push(@implContent, $getterSig);
            push(@implContent, "{\n");
            if ($hasGetterException) {
                # Differentiated between when the return type is a pointer and
                # not for white space issue (ie. Foo *result vs. int result).
                if ($attributeType =~ /\*$/) {
                    $getterContent = $attributeType . "result = " . $getterContent;
                } else {
                    $getterContent = $attributeType . " result = " . $getterContent;
                }

                push(@implContent, "    $exceptionInit\n");
                push(@implContent, "    $getterContent;\n");
                push(@implContent, "    $exceptionRaiseOnError\n");
                push(@implContent, "    return result;\n");
            } else {
                push(@implContent, "    return $getterContent;\n");
            }
            push(@implContent, "}\n\n");

            # - SETTER
            if (!$attributeIsReadonly) {
                # Exception handling
                my $hasSetterException = @{$attribute->setterExceptions};

                $attributeName = "set" . ucfirst($attributeName);
                my $setterName = "set" . ucfirst($interfaceName);
                my $argName = "new" . ucfirst($interfaceName);

                # FIXME: should move this out into it's own fuction to share with
                # the similar function parameter code below.
                my $arg = "";
                if ($codeGenerator->IsPrimitiveType($idlType) or $idlType eq "DOMString") {
                    $arg = $argName;
                } elsif ($idlType eq "HTMLTableCaptionElement") {
                    $arg = "[" . $argName . " _tableCaptionElement]";
                } elsif ($idlType eq "HTMLTableSectionElement") {
                    $arg = "[" . $argName . " _tableSectionElement]";
                } else {
                    $arg = "[" . $argName . " _" . lcfirst($idlType) . "]";
                }

                my $setterSig = "- (void)$setterName:($attributeType)$argName\n";

                push(@implContent, $setterSig);
                push(@implContent, "{\n");

                unless ($codeGenerator->IsPrimitiveType($idlType) or $idlType eq "DOMString") {
                    push(@implContent, "    ASSERT($argName);\n\n");
                }

                if ($hasSetterException) {
                    push(@implContent, "    $exceptionInit\n");
                    push(@implContent, "    IMPL->$attributeName($arg, ec);\n");
                    push(@implContent, "    $exceptionRaiseOnError\n");
                } else {
                    push(@implContent, "    IMPL->$attributeName($arg);\n");
                }

                push(@implContent, "}\n\n");
            }
        }
    }

    my @deprecatedFunctions = ();

    # - Functions
    if ($numFunctions > 0) {
        foreach (@{$dataNode->functions}) {
            my $function = $_;

            AddIncludesForType($function->signature->type);

            my $functionName = $function->signature->name;
            my $returnType = GetObjCType($function->signature->type);
            my $hasParameters = @{$function->parameters};
            my $raisesExceptions = @{$function->raisesExceptions};

            my @parameterNames = ();
            my @needsAssert = ();
            my %custom = ();

            my $parameterIndex = 0;
            my $functionSig = "- ($returnType)$functionName";
            foreach (@{$function->parameters}) {
                my $param = $_;
                my $paramName = $param->name;
                my $paramType = GetObjCType($param->type);

                AddIncludesForType($param->type);

                # FIXME: should move this out into it's own fuction to share with
                # the similar setter parameter code above.
                my $idlType = $codeGenerator->StripModule($param->type);
                if ($codeGenerator->IsPrimitiveType($idlType) or $idlType eq "DOMString") {
                    push(@parameterNames, $paramName);
                } elsif ($idlType eq "XPathNSResolver") {
                    my $implGetter = "[nativeResolver _xpathNSResolver]";
                    push(@parameterNames, $implGetter);
                    $needsCustom{"XPathNSResolver"} = $paramName;
                } elsif ($idlType eq "XPathResult") {
                    my $implGetter = "[" . $paramName . " _xpathResult]";
                    push(@parameterNames, $implGetter);
                } elsif ($idlType eq "HTMLElement") {
                    my $implGetter = "[" . $paramName . " _HTMLElement]";
                    push(@parameterNames, $implGetter);
                } else {
                    my $implGetter = "[" . $paramName . " _" . lcfirst($idlType) . "]";
                    push(@parameterNames, $implGetter);
                }

                unless ($codeGenerator->IsPrimitiveType($idlType) or $idlType eq "DOMString") {
                    push(@needsAssert, "    ASSERT($paramName);\n");
                }

                if ($parameterIndex >= 1) {
                    my $paramPrefix = $param->extendedAttributes->{"ObjCPrefix"};
                    $paramPrefix = $paramName unless defined($paramPrefix);
                    $functionSig .= " $paramPrefix";
                }

                $functionSig .= ":($paramType)$paramName";

                $parameterIndex++;
            }

            my @functionContent = ();

            # special case the XPathNSResolver
            if (defined $needsCustom{"XPathNSResolver"}) {
                my $paramName = $needsCustom{"XPathNSResolver"};
                push(@functionContent, "    if ($paramName && ![$paramName isMemberOfClass:[DOMNativeXPathNSResolver class]])\n");
                push(@functionContent, "        [NSException raise:NSGenericException format:\@\"createExpression currently does not work with custom NS resolvers\"];\n");
                push(@functionContent, "    DOMNativeXPathNSResolver *nativeResolver = (DOMNativeXPathNSResolver *)$paramName;\n\n");
            }

            if ($returnType eq "void") {
                # Special case 'void' return type.
                my $functionContentHead = "IMPL->$functionName(";
                my $functionContentTail = ");";
                my $content = "";

                if ($hasParameters) {
                    my $params = join(", ", @parameterNames);
                    if ($raisesExceptions) {
                        $content = $functionContentHead . $params . ", ec" . $functionContentTail;
                    } else {
                        $content = $functionContentHead . $params . $functionContentTail;
                    }
                } else {
                    if ($raisesExceptions) {
                        $content = $functionContentHead . "ec" . $functionContentTail;
                    } else {
                        $content = $functionContentHead . $functionContentTail;
                    }
                }

                if ($raisesExceptions) {
                    push(@functionContent, "    $exceptionInit\n");
                    push(@functionContent, "    $content\n");
                    push(@functionContent, "    $exceptionRaiseOnError\n");
                } else {
                    push(@functionContent, "    $content\n");
                }
            } else {
                my $functionContentHead = "IMPL->" . $functionName . "(";
                my $functionContentTail = ")";

                my $typeMaker = GetObjCTypeMaker($function->signature->type);
                unless ($typeMaker eq "") {
                    my $returnTypeClass = "";
                    if ($function->signature->type eq "XPathNSResolver") {
                        # Special case XPathNSResolver
                        $returnTypeClass = "DOMNativeXPathNSResolver";
                    } else {
                        # Remove trailing " *" from pointer types.
                        $returnTypeClass = $returnType;
                        $returnTypeClass =~ s/ \*$//;
                    }

                    # Surround getter with TypeMaker
                    if ($returnTypeClass eq "DOMRGBColor") {
                        $functionContentHead = "[$returnTypeClass $typeMaker:" . $functionContentHead;
                        $functionContentTail .= "]";
                    } else {
                        $functionContentHead = "[$returnTypeClass $typeMaker:WTF::getPtr(" . $functionContentHead;
                        $functionContentTail .= ")]";
                    }
                }

                my $content = "";

                if ($hasParameters) {
                    my $params = join(", " , @parameterNames);
                    if ($raisesExceptions) {
                        $content = $functionContentHead . $params . ", ec" . $functionContentTail;
                    } else {
                        $content = $functionContentHead . $params . $functionContentTail;
                    }
                } else {
                    if ($raisesExceptions) {
                        $content = $functionContentHead . "ec" . $functionContentTail;
                    } else {
                        $content = $functionContentHead . $functionContentTail;
                    }
                }

                if ($raisesExceptions) {
                    # Differentiated between when the return type is a pointer and
                    # not for white space issue (ie. Foo *result vs. int result).
                    if ($returnType =~ /\*$/) {
                        $content = $returnType . "result = " . $content;
                    } else {
                        $content = $returnType . " result = " . $content;
                    }

                    push(@functionContent, "    $exceptionInit\n");
                    push(@functionContent, "    $content;\n");
                    push(@functionContent, "    $exceptionRaiseOnError\n");
                    push(@functionContent, "    return result;\n");
                } else {
                    push(@functionContent, "    return $content;\n");
                }
            }

            push(@implContent, "$functionSig\n");
            push(@implContent, "{\n");
            push(@implContent, @functionContent);
            push(@implContent, "}\n\n");

            # generate the old style method names with un-named parameters, these methods are deprecated
            if (@{$function->parameters} > 1 and $function->signature->extendedAttributes->{"OldStyleObjC"}) {
                my $deprecatedFunctionSig = $functionSig;
                $deprecatedFunctionSig =~ s/\s\w+:/ :/g; # remove parameter names

                push(@deprecatedFunctions, "\n$deprecatedFunctionSig\n");
                push(@deprecatedFunctions, "{\n");
                push(@deprecatedFunctions, @functionContent);
                push(@deprecatedFunctions, "}\n\n");
            }

            # Clear the hash
            %needsCustom = ();
        }
    }

    # END implementation
    push(@implContent, "\@end\n");

    if (@deprecatedFunctions > 0) {
        # - Deprecated category @implementation
        push(@implContent, "\n\@implementation $className (" . $className . "Deprecated)\n");
        push(@implContent, @deprecatedFunctions);
        push(@implContent, "\@end\n");
    }
}

# Internal helper
sub WriteData
{
    if (defined($IMPL)) {
        # Write content to file.
        print $IMPL @implContentHeader;

        my $includeCount = 0;
        foreach my $implInclude (sort keys(%implIncludes)) {
            print $IMPL "#import \"$implInclude\"\n";
            $includeCount++;
        }

        print $IMPL "\n" if $includeCount;

        print $IMPL @implContent;
        close($IMPL);
        undef($IMPL);

        @implHeaderContent = "";
        @implContent = "";    
        %implIncludes = ();
    }

    if (defined($HEADER)) {
        # Write content to file.
        print $HEADER @headerContentHeader;

        my $forwardDeclarationCount = 0;
        foreach my $forwardClassDeclaration (sort keys(%headerForwardDeclarations)) {
            print $HEADER "\@class $forwardClassDeclaration;\n";
            $forwardDeclarationCount++;
        }

        foreach my $forwardProtocolDeclaration (sort keys(%headerForwardDeclarationsForProtocols)) {
            print $HEADER "\@protocol $forwardProtocolDeclaration;\n";
            $forwardDeclarationCount++;
        }

        print $HEADER "\n" if $forwardDeclarationCount;

        print $HEADER @headerContent;
        close($HEADER);
        undef($HEADER);

        @headerContentHeader = "";
        @headerContent = "";
        %headerForwardDeclarations = ();
        %headerForwardDeclarationsForProtocols = ();
    }
}

1;
