2009-09-26  David Kilzer  <ddkilzer@apple.com>

        Part 2 of 2: <http://webkit.org/b/29753> DerivedSources.make broken for non-Mac targets

        Reviewed by Darin Adler.

        Fix ENABLE_ORIENTATION_EVENTS for non-Mac platforms.

        * DerivedSources.make: Moved Platform.h check for
        ENABLE_ORIENTATION_EVENTS into Mac-only section and added
        default of ENABLE_ORIENTATION_EVENTS = 0 to non-Mac section.
        Added ifndef test to make it possible to override both
        ENABLE_DASHBOARD_SUPPORT and ENABLE_ORIENTATION_EVENTS external
        to the makefile.  Moved addition of ENABLE_ORIENTATION_EVENTS to
        ADDITIONAL_IDL_DEFINES to common section.
        * GNUmakefile.am: Added support for ENABLE_ORIENTATION_EVENTS if
        it is ever used.
        * WebCore.pro: Ditto.

2009-09-26  Kent Tamura  <tkent@chromium.org>

        Reviewed by David Kilzer.

        Move placeholder-related code to HTMLTextFormControlElement from
        HTMLInputElement, WMLInputElement, InputElement, and
        HTMLTextAreaElement.
        https://bugs.webkit.org/show_bug.cgi?id=28703

        * dom/InputElement.cpp:
        (WebCore::InputElement::dispatchFocusEvent):
        (WebCore::InputElement::dispatchBlurEvent):
        (WebCore::InputElement::setValueFromRenderer):
        * dom/InputElement.h:
        * html/HTMLFormControlElement.cpp:
        (WebCore::HTMLTextFormControlElement::HTMLTextFormControlElement):
        (WebCore::HTMLTextFormControlElement::~HTMLTextFormControlElement):
        (WebCore::HTMLTextFormControlElement::dispatchFocusEvent):
        (WebCore::HTMLTextFormControlElement::dispatchBlurEvent):
        (WebCore::HTMLTextFormControlElement::placeholderShouldBeVisible):
        (WebCore::HTMLTextFormControlElement::updatePlaceholderVisibility):
        * html/HTMLFormControlElement.h:
        (WebCore::HTMLTextFormControlElement::handleFocusEvent):
        (WebCore::HTMLTextFormControlElement::handleBlurEvent):
        * html/HTMLInputElement.cpp:
        (WebCore::HTMLInputElement::HTMLInputElement):
        (WebCore::HTMLInputElement::handleFocusEvent):
        (WebCore::HTMLInputElement::handleBlurEvent):
        (WebCore::HTMLInputElement::parseMappedAttribute):
        (WebCore::HTMLInputElement::createRenderer):
        (WebCore::HTMLInputElement::setValue):
        (WebCore::HTMLInputElement::setValueFromRenderer):
        * html/HTMLInputElement.h:
        (WebCore::HTMLInputElement::supportsPlaceholder):
        (WebCore::HTMLInputElement::isEmptyValue):
        * html/HTMLIsIndexElement.cpp:
        (WebCore::HTMLIsIndexElement::parseMappedAttribute):
        * html/HTMLTextAreaElement.cpp:
        (WebCore::HTMLTextAreaElement::HTMLTextAreaElement):
        (WebCore::HTMLTextAreaElement::createRenderer):
        * html/HTMLTextAreaElement.h:
        (WebCore::HTMLTextAreaElement::supportsPlaceholder):
        (WebCore::HTMLTextAreaElement::isEmptyValue):
        * rendering/RenderTextControl.cpp:
        (WebCore::RenderTextControl::RenderTextControl):
        * rendering/RenderTextControl.h:
        * rendering/RenderTextControlMultiLine.cpp:
        (WebCore::RenderTextControlMultiLine::RenderTextControlMultiLine):
        * rendering/RenderTextControlMultiLine.h:
        * rendering/RenderTextControlSingleLine.cpp:
        (WebCore::RenderTextControlSingleLine::RenderTextControlSingleLine):
        (WebCore::RenderTextControlSingleLine::updateFromElement):
        * rendering/RenderTextControlSingleLine.h:
        * wml/WMLInputElement.cpp:
        (WebCore::WMLInputElement::setValue):
        (WebCore::WMLInputElement::createRenderer):
        * wml/WMLInputElement.h:

2009-09-26  Shu Chang  <Chang.Shu@nokia.com>

        Reviewed by Alexey Proskuryakov.

        Optimize the code so only the text from start to end is scanned.
        https://bugs.webkit.org/show_bug.cgi?id=29092

        On a platform with webkit+Qt+Symbian, the parsing time for a 600K text
        file improved from 400ms to 40ms (10x faster).

        * dom/Text.cpp:
        (WebCore::Text::createWithLengthLimit):

2009-09-26  Xiaomei Ji  <xji@chromium.org>

        Reviewed by Eric Seidel.

        This Patch fixes [chromium] the drop-down is always left-aligned even
        for RTL element.
        https://bugs.webkit.org/show_bug.cgi?id=29612

        For auto-complete, the items in drop-down should be right-aligned if
        the directionality of <input> field is RTL.
        For <select><option>, the items in drop-down should be right-aligned
        if the directionality of <select> is RTL.

        No automatic test is possible. Manual tests are added.

        * manual-tests/autofill_alignment.html: Added.
        * manual-tests/select_alignment.html: Added.
        * platform/chromium/PopupMenuChromium.cpp:
        (WebCore::PopupListBox::paintRow): Adjust the starting x-axis of text to
        be paint if it should be right-aligned.

2009-09-25  Dan Bernstein  <mitz@apple.com>

        Reviewed by Sam Weinig.

        REGRESSION (r48775) FontList.plist written by TOT WebKit causes Safari 4
        to crash on launch
        https://bugs.webkit.org/show_bug.cgi?id=29759

        * platform/graphics/win/FontDatabase.cpp:
        (WebCore::writeFontDatabaseToPlist): Reverted to saving the CG font DB
        property list at the root of FontList.plist, but with an additional
        key for the last value of the Fonts registry key.
        (WebCore::populateFontDatabase): Pass the FontList.plist in its entirety
        to populatFontDatabaseFromPlist.

2009-09-25  Kevin Ollivier  <kevino@theolliviers.com>

        Build fix. Adding missing header files.

        * bindings/js/JSNamedNodeMapCustom.cpp:

2009-09-25  David Kilzer  <ddkilzer@apple.com>

        Part 1 of 2: <http://webkit.org/b/29753> DerivedSources.make broken for non-Mac targets

        Reviewed by Darin Adler.

        * DerivedSources.make: Move tests for ENABLE_CONTEXT_MENUS,
        ENABLE_DRAG_SUPPORT and ENABLE_INSPECTOR into Mac-only section.

2009-09-25  Adam Barth  <abarth@webkit.org>

        Reviewed by Darin Adler.

        Load blocks during unload should not affect targeted loads
        https://bugs.webkit.org/show_bug.cgi?id=29747

        Move the check of the unload state after checking for targeted links.

        Test: fast/loader/unload-hyperlink-targeted.html

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::loadURL):

2009-09-25  Kenneth Russell  <kbr@google.com>

        Reviewed by Dimitri Glazkov.

        [Chromium] Add initial V8 bindings for WebGL
        https://bugs.webkit.org/show_bug.cgi?id=29664

        * WebCore.gypi:
        * bindings/scripts/CodeGeneratorV8.pm:
        * bindings/v8/DOMObjectsInclude.h:
        * bindings/v8/DerivedSourcesAllInOne.cpp:
        * bindings/v8/V8DOMWrapper.cpp:
        (WebCore::V8DOMWrapper::getTemplate):
        * bindings/v8/V8Index.cpp:
        * bindings/v8/V8Index.h:
        * bindings/v8/custom/V8CanvasArrayBufferCustom.cpp: Added.
        (WebCore::CALLBACK_FUNC_DECL):
        * bindings/v8/custom/V8CanvasArrayCustom.h: Added.
        (WebCore::constructCanvasArray):
        * bindings/v8/custom/V8CanvasByteArrayCustom.cpp: Added.
        (WebCore::CALLBACK_FUNC_DECL):
        (WebCore::INDEXED_PROPERTY_GETTER):
        (WebCore::INDEXED_PROPERTY_SETTER):
        * bindings/v8/custom/V8CanvasFloatArrayCustom.cpp: Added.
        (WebCore::CALLBACK_FUNC_DECL):
        (WebCore::INDEXED_PROPERTY_GETTER):
        (WebCore::INDEXED_PROPERTY_SETTER):
        * bindings/v8/custom/V8CanvasIntArrayCustom.cpp: Added.
        (WebCore::CALLBACK_FUNC_DECL):
        (WebCore::INDEXED_PROPERTY_GETTER):
        (WebCore::INDEXED_PROPERTY_SETTER):
        * bindings/v8/custom/V8CanvasRenderingContext3DCustom.cpp: Added.
        (WebCore::jsArrayToFloatArray):
        (WebCore::jsArrayToIntArray):
        (WebCore::CALLBACK_FUNC_DECL):
        (WebCore::):
        (WebCore::vertexAttribAndUniformHelperf):
        (WebCore::uniformHelperi):
        (WebCore::uniformMatrixHelper):
        * bindings/v8/custom/V8CanvasShortArrayCustom.cpp: Added.
        (WebCore::CALLBACK_FUNC_DECL):
        (WebCore::INDEXED_PROPERTY_GETTER):
        (WebCore::INDEXED_PROPERTY_SETTER):
        * bindings/v8/custom/V8CanvasUnsignedByteArrayCustom.cpp: Added.
        (WebCore::CALLBACK_FUNC_DECL):
        (WebCore::INDEXED_PROPERTY_GETTER):
        (WebCore::INDEXED_PROPERTY_SETTER):
        * bindings/v8/custom/V8CanvasUnsignedIntArrayCustom.cpp: Added.
        (WebCore::CALLBACK_FUNC_DECL):
        (WebCore::INDEXED_PROPERTY_GETTER):
        (WebCore::INDEXED_PROPERTY_SETTER):
        * bindings/v8/custom/V8CanvasUnsignedShortArrayCustom.cpp: Added.
        (WebCore::CALLBACK_FUNC_DECL):
        (WebCore::INDEXED_PROPERTY_GETTER):
        (WebCore::INDEXED_PROPERTY_SETTER):
        * bindings/v8/custom/V8CustomBinding.h:
        * bindings/v8/custom/V8DocumentCustom.cpp:
        (WebCore::CALLBACK_FUNC_DECL):
        * bindings/v8/custom/V8HTMLCanvasElementCustom.cpp:
        (WebCore::CALLBACK_FUNC_DECL):
        * platform/graphics/GraphicsContext3D.h:

2009-09-25  Jeremy Orlow  <jorlow@chromium.org>

        This is breaking Chromium try bots, so I'm counting this as a build fix.

        Add more svn:ignore exceptions.  On different platforms, these files are
        generated with different case for WebCore.

        * WebCore.gyp: Changed property svn:ignore.

2009-09-25  Alexey Proskuryakov  <ap@apple.com>

        Reverting r48767, as it broke Windows build in a non-trivial way.

        * bindings/js/JSAbstractWorkerCustom.cpp:
        (WebCore::JSAbstractWorker::addEventListener):
        (WebCore::JSAbstractWorker::removeEventListener):
        * bindings/js/JSDOMApplicationCacheCustom.cpp:
        (WebCore::JSDOMApplicationCache::addEventListener):
        (WebCore::JSDOMApplicationCache::removeEventListener):
        * bindings/js/JSDOMGlobalObject.cpp:
        (WebCore::JSDOMGlobalObject::createJSAttributeEventListener):
        * bindings/js/JSDOMWindowCustom.cpp:
        (WebCore::JSDOMWindow::addEventListener):
        (WebCore::JSDOMWindow::removeEventListener):
        * bindings/js/JSEventListener.cpp:
        (WebCore::JSEventListener::JSEventListener):
        (WebCore::JSEventListener::jsFunction):
        (WebCore::JSEventListener::markJSFunction):
        (WebCore::JSEventListener::handleEvent):
        (WebCore::JSEventListener::reportError):
        * bindings/js/JSEventListener.h:
        (WebCore::JSEventListener::create):
        * bindings/js/JSEventSourceCustom.cpp:
        (WebCore::JSEventSource::addEventListener):
        (WebCore::JSEventSource::removeEventListener):
        * bindings/js/JSLazyEventListener.cpp:
        (WebCore::JSLazyEventListener::JSLazyEventListener):
        (WebCore::JSLazyEventListener::jsFunction):
        (WebCore::JSLazyEventListener::parseCode):
        * bindings/js/JSLazyEventListener.h:
        (WebCore::JSLazyEventListener::create):
        * bindings/js/JSMessagePortCustom.cpp:
        (WebCore::JSMessagePort::addEventListener):
        (WebCore::JSMessagePort::removeEventListener):
        * bindings/js/JSNodeCustom.cpp:
        (WebCore::JSNode::addEventListener):
        (WebCore::JSNode::removeEventListener):
        * bindings/js/JSSVGElementInstanceCustom.cpp:
        (WebCore::JSSVGElementInstance::addEventListener):
        (WebCore::JSSVGElementInstance::removeEventListener):
        * bindings/js/JSWorkerContextCustom.cpp:
        (WebCore::JSWorkerContext::addEventListener):
        (WebCore::JSWorkerContext::removeEventListener):
        * bindings/js/JSXMLHttpRequestCustom.cpp:
        (WebCore::JSXMLHttpRequest::addEventListener):
        (WebCore::JSXMLHttpRequest::removeEventListener):
        * bindings/js/JSXMLHttpRequestUploadCustom.cpp:
        (WebCore::JSXMLHttpRequestUpload::addEventListener):
        (WebCore::JSXMLHttpRequestUpload::removeEventListener):
        * bindings/js/ScriptEventListener.cpp:
        (WebCore::createAttributeEventListener):
        * bindings/objc/ObjCEventListener.h:
        * bindings/objc/ObjCEventListener.mm:
        (WebCore::ObjCEventListener::handleEvent):
        * bindings/scripts/CodeGeneratorJS.pm:
        * dom/EventListener.h:
        (WebCore::EventListener::reportError):
        (WebCore::EventListener::jsFunction):
        * dom/EventTarget.cpp:
        (WebCore::EventTarget::fireEventListeners):
        * inspector/InspectorDOMAgent.cpp:
        (WebCore::InspectorDOMAgent::handleEvent):
        * inspector/InspectorDOMAgent.h:
        * inspector/InspectorDOMStorageResource.cpp:
        (WebCore::InspectorDOMStorageResource::handleEvent):
        * inspector/InspectorDOMStorageResource.h:
        * loader/ImageDocument.cpp:
        (WebCore::ImageEventListener::handleEvent):
        * svg/animation/SVGSMILElement.cpp:
        (WebCore::ConditionEventListener::handleEvent):
        * workers/WorkerContext.cpp:
        (WebCore::WorkerContext::reportException):

2009-09-24  Tony Chang  <tony@chromium.org>

        Reviewed by David Levin.

        Add a gyp variable to allow building a debug webcore without debug
        symbols.  This allows for faster compile, link, and gdb times.

        https://bugs.webkit.org/show_bug.cgi?id=29721

        No new tests, build config change.

        * WebCore.gyp/WebCore.gyp:

2009-09-25  Darin Fisher  <darin@chromium.org>

        Reviewed by Dimitri Glazkov.

        Declare RegisteredEventListener as a class instead of a struct.
        This fixes a warning in the Chromium build.

        * dom/RegisteredEventListener.h:

2009-09-25  Dan Bernstein  <mitz@apple.com>

        Reviewed by Jon Honeycutt.

        WebCore part of
        <rdar://problem/7211635> 2 byte characters are displayed as garbaged
        <rdar://problem/7212626> garbled/gibberish text (off-by-one)

        When the Windows Fonts directory contains more than one font file for a
        given font name, which of the fonts gets assigned to the name in the
        Core Graphics font database was determined arbitrarily and did not
        always match the font GDI used for the same font name. The mismatch
        caused character-to-glyph mapping to use one font and glyph rendering to
        use another.

        The fix is to update the Core Graphics font database from the registry
        entries (that reflect the name-to-font mapping that GDI uses) after
        populating it with the result of scanning the Fonts directory. As a
        consequence, the directory needs to be scanned at startup every time the
        registry key changes, so the last value of the registry key is kept
        in the property list on disk so that it could be compared to the current
        value on startup.

        * platform/graphics/win/FontDatabase.cpp:
        (WebCore::populateFontDatabaseFromPlist): Now takes a property list as
        a parameter and avoids round-tripping through XML by calling
        wkAddFontsFromPlist() instead of wkAddFontsFromPlistRepresentation().
        (WebCore::fontFilenamesFromRegistryKey):
        (WebCore::cgFontDBKey):
        (WebCore::writeFontDatabaseToPlist): Now takes the CG font DB property
        list and a property list with the font filenames from the registry and
        writes a dictionary with those property lists as values.
        (WebCore::fontFilenamesFromRegistry): Added. Returns an array with the
        values in the HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Fonts
        registry key.
        (WebCore::populateFontDatabase): Changed to read the contents of the
        Fonts registry key and compare it with the last-saved value from the
        property list, and to call wkAddFontsFromRegistry() after populating the
        CG font DB from the file system. Uses wkCreateFontsPlist() instead of
        wkCreateFontsPlistRepresentation() to avoid round-tripping through XML.

2009-09-25  Geoffrey Garen  <ggaren@apple.com>

        Reviewed by Darin Adler.

        Inlined some object creation code, including lexicalGlobalObject access
        https://bugs.webkit.org/show_bug.cgi?id=29750

        * bindings/js/JSInspectorBackendCustom.cpp:
        (WebCore::JSInspectorBackend::currentCallFrame):
        * inspector/JavaScriptDebugServer.cpp:
        (WebCore::JavaScriptDebugServer::hasBreakpoint): Updated for JavaScriptCore
        API changes.

2009-09-25  Dave Hyatt  <hyatt@apple.com>

        Reviewed by Anders Carlsson.

        https://bugs.webkit.org/show_bug.cgi?id=24399
        Make @import work in user stylesheets.  The first bug was that the URL wasn't being set on the
        user sheets themselves, so relative @import URLs couldn't resolve properly.  The second bug
        was that the loads would be denied.  This is fixed by using the requestUserCSSStyleSheet method
        instead of the normal request method.  In order to know when to do this, CSSStyleSheets now have
        a propagated boolean, m_isUserStyleSheet, that lets them know if they are user stylesheets or not.

        * css/CSSImportRule.cpp:
        (WebCore::CSSImportRule::insertedIntoParent):
        * css/CSSStyleSheet.cpp:
        (WebCore::CSSStyleSheet::CSSStyleSheet):
        * css/CSSStyleSheet.h:
        (WebCore::CSSStyleSheet::setIsUserStyleSheet):
        (WebCore::CSSStyleSheet::isUserStyleSheet):
        * dom/Document.cpp:
        (WebCore::Document::pageUserSheet):
        (WebCore::Document::pageGroupUserSheets):

2009-09-25  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Darin Adler.

        Crash with hardware accelerated rotation of a PDF image in a data URL
        <rdar://problem/7250378>
        
        PDF images don't return a color space from CGImageGetColorSpace(),
        so we need to null-check the return value before use.

        Test: compositing/color-matching/pdf-image-match.html

        * platform/graphics/mac/GraphicsLayerCA.mm:
        (WebCore::GraphicsLayerCA::setContentsToImage):

2009-09-25  Darin Adler  <darin@apple.com>

        Reviewed by Geoffrey Garen.

        Null-deref when first access to an Attr node is after its Element is destroyed
        https://bugs.webkit.org/show_bug.cgi?id=29748

        Test: fast/dom/Attr/access-after-element-destruction.html

        * bindings/js/JSAttrCustom.cpp:
        (WebCore::JSAttr::markChildren): Added. Keeps the ownerElement alive as
        long as the Attr is alive.

        * bindings/js/JSNamedNodeMapCustom.cpp:
        (WebCore::JSNamedNodeMap::markChildren): Added. Keeps the Element alive as
        long as the NamedNodeMap is alive.

        * dom/Attr.idl: Added CustomMarkFunction attribute.

        * dom/NamedAttrMap.cpp:
        (WebCore::NamedNodeMap::getAttributeItem): Tweaked formatting.
        (WebCore::NamedNodeMap::detachFromElement): Call clearAttributes so we don't
        have attributes hanging around that might need an Attr node created; that way
        we won't crash with a null-dereference trying to deal with one of them. This
        can't happen when working with JavaScript since the Element will be kept
        alive due to the change above.
        (WebCore::NamedNodeMap::addAttribute): Fix function name in comment.
        (WebCore::NamedNodeMap::removeAttribute): Removed unneeded "+ 1" and added
        missing braces.

        * dom/NamedAttrMap.h: Made the element function public so it can be used by
        the JavaScript binding to keep the Element alive.

        * dom/NamedNodeMap.idl: Added CustomMarkFunction attribute.

2009-09-24  Alexey Proskuryakov  <ap@apple.com>

        Reviewed by Darin Adler and Sam Weinig.

        Onclick not fired for an element copied with cloneContents() or cloneNode()
        https://bugs.webkit.org/show_bug.cgi?id=25130

        The change here is that JS event listeners don't keep a reference to a global object from
        where they were created, and instead take it as a parameter when parsing source code. Also,
        the listener creation won't fail just because it happens for an element in a frameless
        document.
        Thus, moving nodes between documents no longer results in having incorrect registered
        lazy event listeners on them.

        Tests: fast/events/attribute-listener-cloned-from-frameless-doc-context-2.html
               fast/events/attribute-listener-cloned-from-frameless-doc-context.html
               fast/events/attribute-listener-cloned-from-frameless-doc.xhtml
               fast/events/attribute-listener-extracted-from-frameless-doc-context-2.html
               fast/events/attribute-listener-extracted-from-frameless-doc-context.html

        * bindings/js/JSEventListener.cpp:
        (WebCore::JSEventListener::JSEventListener): Don't take a reference to JSDOMGlobalObject.
        (WebCore::JSEventListener::jsFunction): Take ScriptExecutionContext as a parameter for
        getting to JSDOMGlobalObject. It's not used in base class, but is in JSLazyEventListner.
        (WebCore::JSEventListener::markJSFunction): Don't mark the global object.
        (WebCore::JSEventListener::handleEvent): Get global object from ScriptExecutionContext.
        (WebCore::JSEventListener::reportError): Ditto.

        * bindings/js/JSEventListener.h: (WebCore::JSEventListener::create): Don't keep a reference
        to JSDOMGlobalObject.

        * bindings/js/JSLazyEventListener.cpp: (WebCore::JSLazyEventListener::parseCode): Listener
        creation was split between this function and ScriptEventListener; moved it here, as JS
        global object can be different now.

        * bindings/js/JSLazyEventListener.h: (WebCore::JSLazyEventListener::create): Keep source URL,
        which can not be determined at parsing time.

        * bindings/js/ScriptEventListener.cpp: (WebCore::createAttributeEventListener): Moved code
        for listener creation to JSLazyEventListener. XSSAuditor code remains here, because tests
        expect that errors are logged at document parsing time, and because I don't know what other
        side effects moving it vould have.

        * dom/EventListener.h: handleEvent() and reportError() now take ScriptExecutionContext,
        because JSC needs a global context here.

        * bindings/js/JSAbstractWorkerCustom.cpp:
        (WebCore::JSAbstractWorker::addEventListener):
        (WebCore::JSAbstractWorker::removeEventListener):
        * bindings/js/JSDOMApplicationCacheCustom.cpp:
        (WebCore::JSDOMApplicationCache::addEventListener):
        (WebCore::JSDOMApplicationCache::removeEventListener):
        * bindings/js/JSDOMGlobalObject.cpp:
        (WebCore::JSDOMGlobalObject::createJSAttributeEventListener):
        * bindings/js/JSDOMWindowCustom.cpp:
        (WebCore::JSDOMWindow::addEventListener):
        (WebCore::JSDOMWindow::removeEventListener):
        * bindings/js/JSEventSourceCustom.cpp:
        (WebCore::JSEventSource::addEventListener):
        (WebCore::JSEventSource::removeEventListener):
        * bindings/js/JSMessagePortCustom.cpp:
        (WebCore::JSMessagePort::addEventListener):
        (WebCore::JSMessagePort::removeEventListener):
        * bindings/js/JSNodeCustom.cpp:
        (WebCore::JSNode::addEventListener):
        (WebCore::JSNode::removeEventListener):
        * bindings/js/JSSVGElementInstanceCustom.cpp:
        (WebCore::JSSVGElementInstance::addEventListener):
        (WebCore::JSSVGElementInstance::removeEventListener):
        * bindings/js/JSWorkerContextCustom.cpp:
        (WebCore::JSWorkerContext::addEventListener):
        (WebCore::JSWorkerContext::removeEventListener):
        * bindings/js/JSXMLHttpRequestCustom.cpp:
        (WebCore::JSXMLHttpRequest::addEventListener):
        (WebCore::JSXMLHttpRequest::removeEventListener):
        * bindings/js/JSXMLHttpRequestUploadCustom.cpp:
        (WebCore::JSXMLHttpRequestUpload::addEventListener):
        (WebCore::JSXMLHttpRequestUpload::removeEventListener):
        * bindings/objc/ObjCEventListener.h:
        * bindings/objc/ObjCEventListener.mm:
        (WebCore::ObjCEventListener::handleEvent):
        * bindings/scripts/CodeGeneratorJS.pm:
        * dom/EventTarget.cpp:
        (WebCore::EventTarget::fireEventListeners):
        * inspector/InspectorDOMAgent.cpp:
        (WebCore::InspectorDOMAgent::handleEvent):
        * inspector/InspectorDOMAgent.h:
        * inspector/InspectorDOMStorageResource.cpp:
        (WebCore::InspectorDOMStorageResource::handleEvent):
        * inspector/InspectorDOMStorageResource.h:
        * loader/ImageDocument.cpp:
        (WebCore::ImageEventListener::handleEvent):
        * svg/animation/SVGSMILElement.cpp:
        (WebCore::ConditionEventListener::handleEvent):
        * workers/WorkerContext.cpp:
        (WebCore::WorkerContext::reportException):
        Don't pass global object to JSEventListener::create(), which no longer needs it.
        Note that some of these functions still have an early return for null global object, which
        can probably be removed in a later patch.
        Pass ScriptExecutionContext to EventListener methods that now need it.

2009-09-25  Enrica Casucci  <enrica@apple.com>

        Reviewed by Darin Adler, Dan Bernstein, Adele Peterson, and others.

        Fix for https://bugs.webkit.org/show_bug.cgi?id=29740
        <rdar://problem/7168738> Gmail: After changing a foreground text color, pressing return doesn't apply background to new line

        Change the way style is preserved when inserting a new paragraph.
        The original code handled insertion at the beginning and at the end of a paragraph as special
        cases. The newly created paragraph contained a set of nodes generated starting from the
        computed style of the insertion node. This approach has two problems:
        1. if the insertion node has a non opaque background color and one of the parent element did have
        a solid background color the new paragraph did not have the element with the solid color in the tree.
        2. in some circumstances it generated more markup than the original paragraph had (a span with bold, italic,
        background color and some font attribute was being reproduced as span + bold + italic + font as separate tags.
        The new approach is to recreate in the new paragraph the same hierarchy of nodes found in the
        paragraph where the insertion point is.

        Test: editing/inserting/insert-bg-font.html

        * editing/InsertParagraphSeparatorCommand.cpp:
        (WebCore::InsertParagraphSeparatorCommand::getAncestorsInsideBlock): retrieves the list of all the ancestors
        between the insert node and the outer block.
        (WebCore::InsertParagraphSeparatorCommand::cloneHierarchyUnderNewBlock): uses the list of ancestors to recreate
        in the new paragraph the same element hierarchy present in the starting paragraph.
        (WebCore::InsertParagraphSeparatorCommand::doApply): changed the code to handle the general case of insertion
        in the middle of the paragraph to use the new methods. Changed the handling of the insertion at the beginning and
        at the end of the paragraph to use the new methods instead of applying the calculated style.
        * editing/InsertParagraphSeparatorCommand.h: added methods getAncestorsInsideBlock and cloneHierarchyUnderNewBlock.

2009-09-25  Patrick Mueller  <Patrick_Mueller@us.ibm.com>

        Reviewed by Timothy Hatcher.

        Content-type parameters not taken into account when building form-data
        https://bugs.webkit.org/show_bug.cgi?id=28970

        existing manual test case extended with new tests

        * English.lproj/localizedStrings.js:
        * inspector/front-end/ResourceView.js:
        (WebInspector.ResourceView.prototype._refreshFormData):
        (WebInspector.ResourceView.prototype._refreshParms):
        * manual-tests/inspector/display-form-data.html:

2009-09-25  Yuan Song  <song.yuan@ericsson.com>

        Reviewed by Darin Adler.

        https://bugs.webkit.org/show_bug.cgi?id=14566

        Raise SECURITY_ERR exception if an attempt is made to change document.domain to an invalid value.

        Test: fast/js/invalid-domain-change-throws-exception.html

        * dom/Document.cpp:
        (WebCore::Document::setDomain):
        * dom/Document.h:
        * dom/Document.idl:

2009-09-25  Adam Barth  <abarth@webkit.org>

        Reviewed by Dimitri Glazkov.

        [V8] Teach ScheduledAction::execute about isolated worlds
        https://bugs.webkit.org/show_bug.cgi?id=27703

        When setTimeout is called with a string argument in an isolated
        world, we now compile the string in the isolated world.

        Last time we tried this change, we got a lot of crashes.  This
        time we're using a fresh local handle as our context to avoid
        trouble if the peristent handle gets disposed before we leave
        the context.

        Test: fast/dom/timer-clear-interval-in-handler-and-generate-error.html

        * bindings/v8/ScheduledAction.cpp:
        (WebCore::ScheduledAction::execute):

2009-09-25  Paul Godavari  <paul@chromium.org>

        Reviewed by Darin Fisher.

        Fix a regression in Mac Chromium popup menus, where the user's
        selection was ignored and the popup became unresponsive.
        https://bugs.webkit.org/show_bug.cgi?id=29726

        The fix is to notify the popup's client that the popup was hidden,
        even if the popup has no parent.

        * platform/chromium/PopupMenuChromium.cpp:
        (WebCore::PopupListBox::hidePopup):

2009-09-25  Alexander Pavlov  <apavlov@chromium.org>

        Reviewed by Dan Bernstein.

        Enable Pasteboard::writePlainText for Chromium and fix code style nits.
        https://bugs.webkit.org/show_bug.cgi?id=29734

        * platform/chromium/PasteboardChromium.cpp:
        (WebCore::Pasteboard::writePlainText):
        * platform/gtk/PasteboardGtk.cpp:
        (WebCore::Pasteboard::writePlainText):
        (WebCore::Pasteboard::writeURL):
        * platform/mac/PasteboardMac.mm:
        (WebCore::Pasteboard::writeSelection):
        (WebCore::Pasteboard::writePlainText):
        (WebCore::Pasteboard::writeURL):
        * platform/qt/PasteboardQt.cpp:
        (WebCore::Pasteboard::writePlainText):

2009-09-25  Yongjun Zhang  <yongjun.zhang@nokia.com>

        Reviewed by Ariya Hidayat.

        https://bugs.webkit.org/show_bug.cgi?id=28876
        [Qt] reduce peak memory consumption of text decoding.

        Chop large input buffer into small buffers to reduce peak memory
        during decoding.

        * platform/text/qt/TextCodecQt.cpp:
        (WebCore::TextCodecQt::decode):

2009-09-24  Jon Honeycutt  <jhoneycutt@apple.com>

        Add a mechanism for automatically halting plug-ins.

        Reviewed by Oliver Hunt and Alice Liu.

        * GNUmakefile.am:

        * WebCore.base.exp:
        Update export of Page constructor.

        * WebCore.gypi:

        * WebCore.pro:

        * WebCore.vcproj/WebCore.vcproj:
        Add PluginHalter.{h,cpp}, PluginHalterClient.h, and
        HaltablePlugin.h.

        * WebCore.xcodeproj/project.pbxproj:
        Add files to Mac project.

        * loader/EmptyClients.h:
        Added an empty PluginHalterClient.
        (WebCore::EmptyPluginHalterClient::shouldHaltPlugin):
        Return false.

        * page/PluginHalter.cpp: Added.
        (WebCore::PluginHalter::PluginHalter):
        (WebCore::PluginHalter::didStartPlugin):
        Add the object to the plug-in set. If this is the only item in the set,
        set m_oldestStartTime to this object's time, and start the timer.
        (WebCore::PluginHalter::didStopPlugin):
        Remove the plug-in from the set.
        (WebCore::PluginHalter::timerFired):
        Find the cut-off time as the current time minus the allowed run time;
        plug-ins older than this may be halted. Iterate over the plug-ins. Find
        the object with the oldest start time that is too young to be halted;
        we'll use its start time to set the timer's next fire time. For all
        plug-ins that are candidates to be halted, call the
        PluginHalterClient's shouldHaltPlugin(). If this function returns true,
        call the plug-in's halt() function. Remove these objects from the set
        of tracked plug-ins. Call startTimerIfNecessary() to restart the timer.
        (WebCore::PluginHalter::startTimerIfNecessary):
        If the timer is set to fire, or the set of tracked plug-ins is empty,
        return early. Set the timer to fire after the oldest plug-in has run
        for the allowed run time.

        * page/PluginHalter.h: Added.
        (WebCore::PluginHalter::setPluginAllowedRunTime):

        * page/PluginHalterClient.h: Added.
        (WebCore::PluginHalterClient::~PluginHalterClient):

        * page/Page.cpp:
        (WebCore::Page::Page):
        Initialize m_pluginHalterClient. Call pluginHalterEnabledStateChanged()
        to create the PluginHalter if necessary.
        (WebCore::Page::pluginHalterEnabledStateChanged):
        If plug-in halting is enabled, create the PluginHalter. If it is
        disabled, clear it.
        (WebCore::Page::pluginAllowedRunTimeChanged):
        If there is a plug-in halter, call its setPluginAllowedRunTime().
        (WebCore::Page::didStartPlugin):
        If there is a plug-in halter, call its didStartPlugin().
        (WebCore::Page::didStopPlugin):
        If there is a plug-in halter, call its didStopPlugin().

        * page/Page.h:
        Add a parameter to the Page constructor for the PluginHalterClient.
        Added declarations for didStartPlugin() and didStopPlugin(), which are
        called when HaltablePlugins are added to or removed from the page. Adds
        pluginAllowedRunTimeChanged() and pluginHalterEnabledStateChanged() to
        notify the Page when these settings are changed. Added members to hold
        the PluginHalter and the PluginHalterClient.

        * page/Settings.cpp:
        (WebCore::Settings::Settings):
        (WebCore::Settings::setPluginHalterEnabled):
        If the enabled state has changed, call the Page's
        pluginHalterEnabledStateChanged().
        (WebCore::Settings::setPluginAllowedRunTime):
        Call the Page's pluginAllowedRunTimeChanged().

        * page/Settings.h:
        (WebCore::Settings::pluginHalterEnabled):
        (WebCore::Settings::pluginAllowedRunTime):

        * page/HaltablePlugin.h: Added. Defines an interface for plug-ins that
        can be automatically halted.
        (WebCore::HaltablePlugin::~HaltablePlugin):

        * svg/graphics/SVGImage.cpp:
        (WebCore::SVGImage::dataChanged):
        Pass a dummy PluginHalterClient.

2009-09-24  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Dan Bernstein.

        REGRESSION: webkit-transform scale no longer works properly in nightly build
        https://bugs.webkit.org/show_bug.cgi?id=29730
        
        When the initial or final state of a scale animation does not specify a transform,
        use a default scale of 1, rather than zero.

        Test: compositing/transitions/scale-transition-no-start.html

        * platform/graphics/mac/GraphicsLayerCA.mm:
        (WebCore::getTransformFunctionValue):

2009-09-24  John Gregg  <johnnyg@google.com>

        Reviewed by Eric Seidel.

        isEnabled switch for notifications (experimental) in Page Settings
        https://bugs.webkit.org/show_bug.cgi?id=28930

        Adds a run-time flag in Settings object that controls whether
        to expose desktop notifications.

        No new test, but test code also modified to set this preference.

        * page/DOMWindow.cpp:
        (WebCore::DOMWindow::webkitNotifications): check preference before returning notifications object
        * page/Settings.cpp:
        (WebCore::Settings::Settings):
        (WebCore::Settings::setExperimentalNotificationsEnabled):
        * page/Settings.h:
        (WebCore::Settings::experimentalNotificationsEnabled):

2009-09-24  Dan Bernstein  <mitz@apple.com>

        Reviewed by Sam Weinig.

        Fix <rdar://problem/7162000> Crash while trying to
        calculate the horizontal position of image

        Test: fast/inline-block/relative-positioned-rtl-crash.html

        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::calcAbsoluteHorizontalReplaced): Corrected an
        isInline() test to isRenderInline(). This is similar to r41259.

2009-09-24  Jessie Berlin  <jberlin@webkit.org>

        Reviewed by Timothy Hatcher.

        Fix expanding profile call stacks being broken after sorting.
        https://bugs.webkit.org/show_bug.cgi?id=26423

        * inspector/front-end/ProfileDataGridTree.js:
        (WebInspector.ProfileDataGridNode.prototype.sort):
        Set shouldRefreshChildren to true on collapsed nodes with children so that expanding it
        causes the children to be placed in the right positions.

2009-09-24  Geoffrey Garen  <ggaren@apple.com>

        Reviewed by Stephanie Lewis.

        Fixed sudden termination console spew due to too many calls to
        enableSuddenTermination.
        
        <rdar://problem/7063125> 10A410: Safari logging enableSuddenTermination errors

        * page/DOMWindow.cpp:
        (WebCore::removeUnloadEventListener):
        (WebCore::removeAllUnloadEventListeners):
        (WebCore::removeBeforeUnloadEventListener):
        (WebCore::removeAllBeforeUnloadEventListeners): Only
        enableSuddenTermination if the set of listeners is empty *and* this
        window was in the set. Otherwise, a no-op will cause us to enableSuddenTermination.

2009-09-24  Carol Szabo  <carol.szabo@nokia.com>

        Reviewed by Alexey Proskuryakov.

        WebKit returns "" instead of null when getting
        inexistent, forbidden or invalidly named headers.
        https://bugs.webkit.org/show_bug.cgi?id=29140

        * xml/XMLHttpRequest.cpp:
        (WebCore::XMLHttpRequest::getResponseHeader):
        Changed to return null as it should according to the spec.

2009-09-24  Jeremy Orlow  <jorlow@chromium.org>

        Reviewed by Dimitri Glazkov.

        Add GYP generated files to svn:ignore
        https://bugs.webkit.org/show_bug.cgi?id=29724

        Adding the following files to the svn:ignore list (all in the
        WebCore/WebCore.gyp directory)

        WebCore.xcodeproj
        WebCore.sln
        WebCore.vcproj
        WebCore_Debug.rules
        WebCore_Release.rules
        WebCore_Release - no tcmalloc.rules
        WebCore_Purify.rules
        WebCore.mk
        WebCore_Debug_rules.mk
        WebCore_Release_rules.mk
        WebCore_Release - no tcmalloc_rules.mk
        WebCore_Purify_rules.mk
        WebCore.scons
        WebCore_main.scons

        * WebCore.gyp: Changed property svn:ignore.

2009-09-24  Gustavo Noronha Silva  <gustavo.noronha@collabora.co.uk>

        Unreviewed. Mac build fix.

        * page/EventHandler.cpp:
        (WebCore::EventHandler::shouldTurnVerticalTicksIntoHorizontal):
        remove unused parameter from function signature;

2009-09-24  Gustavo Noronha Silva  <gustavo.noronha@collabora.co.uk>

        Reviewed by Oliver Hunt.

        Implement correct horizontal scrollbar behavior for GTK+ also on
        styled scrollbars.

        https://bugs.webkit.org/show_bug.cgi?id=29348
        [Gtk] Scrollwheel on horizontal scrollbars should slide horizontally

        Test: platform/gtk/scrollbars/overflow-scrollbar-horizontal-wheel-scroll.html

        * page/EventHandler.cpp:
        (WebCore::EventHandler::handleWheelEvent): on GTK+, when using the
        wheel with the pointer on the horizontal scrollbar, scroll
        horizontally;
        * platform/PlatformWheelEvent.h:
        * platform/gtk/WheelEventGtk.cpp:
        (WebCore::PlatformWheelEvent::swapOrientation): allow adding a
        vertical scroll to the horizontal one;

2009-09-24  Jeremy Orlow  <jorlow@chromium.org>

        Reviewed by Eric Seidel.

        StorageNamespace::storageArea() should take in a PassRefPtr<StorageOrigin>
        https://bugs.webkit.org/show_bug.cgi?id=29290

        Modified StorageNamespace::storageArea() to take in a PassRefPtr<StorageOrigin>
        per http://webkit.org/coding/RefPtr.html

        No behavior change, so no tests.

        * storage/StorageNamespace.h:
        * storage/StorageNamespaceImpl.cpp:
        (WebCore::StorageNamespaceImpl::storageArea):
        * storage/StorageNamespaceImpl.h:

2009-09-24  Geoffrey Garen  <ggaren@apple.com>

        Reviewed by Sam Weinig.

        Added back enable/disableSuddenTermination() functionality I accidentally
        removed in my last patch.

        * page/DOMWindow.cpp:
        (WebCore::addUnloadEventListener):
        (WebCore::removeUnloadEventListener):
        (WebCore::removeAllUnloadEventListeners):
        (WebCore::addBeforeUnloadEventListener):
        (WebCore::removeBeforeUnloadEventListener):
        (WebCore::removeAllBeforeUnloadEventListeners):
        (WebCore::DOMWindow::dispatchAllPendingUnloadEvents):
        (WebCore::DOMWindow::~DOMWindow):
        (WebCore::DOMWindow::addEventListener):
        (WebCore::DOMWindow::removeEventListener):
        (WebCore::DOMWindow::removeAllEventListeners):

2009-09-24  Sam Weinig  <sam@webkit.org>

        Reviewed by Steve Falkenburg and Mark Rowe.

        Don't pass -F to GCC on non-mac platforms since it is an darwin only.

        * DerivedSources.make:

2009-09-24  Sam Weinig  <sam@webkit.org>

        Fix windows build.

        * dom/Element.idl:

2009-09-23  Stephen White  <senorblanco@chromium.org>

        Reviewed by Eric Seidel.

        Revert the relevant parts of r47925, and implement an alternate
        fix (localize the coordinate check to GraphicsContext::clipPath()).
        This fixes http://crbug.com/21174.

        Covered by LayoutTests/svg/dynamic-updates/SVGClipPathElement-dom-clipPathUnits-attr.html.

        * platform/graphics/skia/GraphicsContextSkia.cpp:
        (WebCore::GraphicsContext::clipPath):
        * platform/graphics/skia/PlatformContextSkia.cpp:
        (PlatformContextSkia::currentPathInLocalCoordinates):

2009-09-24  Brady Eidson  <beidson@apple.com>

        Reviewed by Sam Weinig.

        Merge changes from Mozilla's FTP directory parser.
        <rdar://problem/7227620> and https://bugs.webkit.org/show_bug.cgi?id=29294

        FTP layout tests not possible at this time.
        https://bugs.webkit.org/show_bug.cgi?id=29719 tracks making them possible.

        * loader/FTPDirectoryParser.cpp:
        (WebCore::ParsingFailed):
        (WebCore::parseOneFTPLine):

2009-09-24  Philippe Normand  <pnormand@igalia.com>

        Reviewed by Gustavo Noronha.

        [GTK] re-enable some media tests
        https://bugs.webkit.org/show_bug.cgi?id=29716

        make canPlayType() return "probably" if mime-type is known
        and codecs string is not empty. If codecs is empty return
        "maybe".

        * platform/graphics/gtk/MediaPlayerPrivateGStreamer.cpp:
        (WebCore::MediaPlayerPrivate::supportsType):

2009-09-24  Sam Weinig  <sam@webkit.org>

        Reviewed by Dan Bernstein.

        Fix for https://bugs.webkit.org/show_bug.cgi?id=29703
        Add a function to element to check whether it matches a CSS selector

        Implement Element.webkitMatchesSelector.

        * css/CSSSelectorList.cpp:
        (WebCore::forEachTagSelector):
        (WebCore::forEachSelector):
        (WebCore::SelectorNeedsNamespaceResolutionFunctor::operator()):
        (WebCore::CSSSelectorList::selectorsNeedNamespaceResolution):
        * css/CSSSelectorList.h:
        Moved code to iterate the CSSSelectorList and determine if any
        selectors need namespace resolution from a static function in
        Node.cpp to CSSSelectorList so that it can be used by webkitMatchesSelector
        as well as querySelector/querySelectorAll.

        * dom/Element.cpp:
        (WebCore::Element::webkitMatchesSelector):
        * dom/Element.h: 
        * dom/Element.idl:
        Implement the new function. Handles exceptional cases identically to
        querySelector/querySelectorAll.

        * dom/Node.cpp:
        (WebCore::Node::querySelector):
        (WebCore::Node::querySelectorAll):
        Moved selectorsNeedNamespaceResolution to CSSSelectorList from here.

2009-09-24  Vitaly Repeshko  <vitalyr@chromium.org>

        Reviewed by Dimitri Glazkov.

        [V8] Fixed bindings build after http://trac.webkit.org/changeset/48701
        https://bugs.webkit.org/show_bug.cgi?id=29713

        Got rid of isWindowEvent in function signatures:
        * bindings/v8/V8AbstractEventListener.cpp:
        (WebCore::V8AbstractEventListener::invokeEventHandler):
        (WebCore::V8AbstractEventListener::handleEvent):
        (WebCore::V8AbstractEventListener::getReceiverObject):
        * bindings/v8/V8AbstractEventListener.h:
        * bindings/v8/V8LazyEventListener.cpp:
        (WebCore::V8LazyEventListener::callListenerFunction):
        * bindings/v8/V8LazyEventListener.h:
        * bindings/v8/V8WorkerContextEventListener.cpp:
        (WebCore::V8WorkerContextEventListener::handleEvent):
        (WebCore::V8WorkerContextEventListener::callListenerFunction):
        (WebCore::V8WorkerContextEventListener::getReceiverObject):
        * bindings/v8/V8WorkerContextEventListener.h:
        * bindings/v8/custom/V8CustomEventListener.cpp:
        (WebCore::V8EventListener::callListenerFunction):
        * bindings/v8/custom/V8CustomEventListener.h:

        Switched to EventTarget methods of adding/removing listeners:
        * bindings/v8/custom/V8DOMApplicationCacheCustom.cpp:
        (WebCore::toEventID):
        (WebCore::ACCESSOR_SETTER):

        * dom/EventTarget.h: Some functions were incorrectly marked
        as JSC-specific.

2009-09-24  Pavel Feldman  <pfeldman@chromium.org>

        Reviewed by Timothy Hatcher.

        Web Inspector: Color-code watch expression errors with red.

        https://bugs.webkit.org/show_bug.cgi?id=29707

        * inspector/front-end/WatchExpressionsSidebarPane.js:
        (WebInspector.WatchExpressionsSection.prototype.update):
        (WebInspector.WatchExpressionTreeElement.prototype.update):
        * inspector/front-end/inspector.css:

2009-09-24  Pavel Feldman  <pfeldman@chromium.org>

        Reviewed by Timothy Hatcher.

        Web Inspector: Fix formatting for messages derived from resource warnings,
        couple of drive-by formatting fixes.

        https://bugs.webkit.org/show_bug.cgi?id=29705

        * inspector/InspectorFrontend.cpp:
        (WebCore::InspectorFrontend::addMessageToConsole):
        * inspector/front-end/ConsoleView.js:
        * inspector/front-end/InjectedScript.js:
        (InjectedScript._evaluateAndWrap):
        * inspector/front-end/WatchExpressionsSidebarPane.js:
        (WebInspector.WatchExpressionsSection.prototype.update):

2009-09-22  Pavel Feldman  <pfeldman@chromium.org>

        Reviewed by Timothy Hatcher.

        WebInspector: Implement InspectorController::copyNode(id).

        https://bugs.webkit.org/show_bug.cgi?id=28357

        * inspector/InspectorBackend.cpp:
        (WebCore::InspectorBackend::copyNode):
        * inspector/InspectorBackend.h:
        * inspector/InspectorBackend.idl:
        * inspector/front-end/ElementsPanel.js:
        (WebInspector.ElementsPanel.prototype.handleCopyEvent):

2009-09-24  Oliver Hunt  <oliver@apple.com>

        Reviewed by NOBODY(rollout)

        Roll out r48712 as it is incorrect.

        Overriding getPropertyNames is incorrect.

        * bridge/runtime_array.cpp:
        * bridge/runtime_array.h:

2009-09-24  Xan Lopez  <xlopez@igalia.com>

        Revert r48697, since it broke key handling notification to GTK+.

        * platform/gtk/KeyEventGtk.cpp:
        (WebCore::keyIdentifierForGdkKeyCode):
        (WebCore::singleCharacterString):

2009-09-24  Philippe Normand  <pnormand@igalia.com>

        Reviewed by Xan Lopez.

        [GTK] GStreamer MediaPlayer is unable to correctly querry duration
        https://bugs.webkit.org/show_bug.cgi?id=24639

        check duration returned by gst_element_query_duration() only
        when using GStreamer < 0.10.23.

        * platform/graphics/gtk/MediaPlayerPrivateGStreamer.cpp:
        (WebCore::MediaPlayerPrivate::duration):

2009-09-24  Benjamin Poulain  <benjamin.poulain@nokia.com>

        Reviewed by Eric Seidel.

        The indices of RuntimeArray should be enumerated like for a regular array.
        https://bugs.webkit.org/show_bug.cgi?id=29005

        * bridge/runtime_array.cpp:
        (JSC::RuntimeArray::getPropertyNames):
        * bridge/runtime_array.h:

2009-09-23  Alexander Pavlov  <apavlov@chromium.org>

        Reviewed by Eric Seidel.

        Introduce Pasteboard::writePlaintext(const String&) so that copying
        of the inspected elements HTML will be possible in WebInspector.
        https://bugs.webkit.org/show_bug.cgi?id=29634

        * platform/Pasteboard.h:
        * platform/android/TemporaryLinkStubs.cpp:
        (Pasteboard::writePlainText):
        * platform/chromium/ChromiumBridge.h:
        * platform/chromium/PasteboardChromium.cpp:
        (WebCore::Pasteboard::writePlainText):
        * platform/gtk/PasteboardGtk.cpp:
        (WebCore::Pasteboard::writePlainText):
        * platform/haiku/PasteboardHaiku.cpp:
        (WebCore::Pasteboard::writePlainText):
        * platform/mac/PasteboardMac.mm:
        (WebCore::Pasteboard::writePlainText):
        * platform/qt/PasteboardQt.cpp:
        (WebCore::Pasteboard::writePlainText):
        * platform/win/PasteboardWin.cpp:
        (WebCore::Pasteboard::writeSelection):
        (WebCore::Pasteboard::writePlainText):
        * platform/wince/PasteboardWince.cpp:
        (WebCore::Pasteboard::writePlainText):
        * platform/wx/PasteboardWx.cpp:
        (WebCore::Pasteboard::writeSelection):
        (WebCore::Pasteboard::writePlainText):
        (WebCore::Pasteboard::writeURL):

2009-09-24  Oswald Buddenhagen  <oswald.buddenhagen@nokia.com>

        Reviewed by Simon Hausmann.

        Fix QApp::translate() calls to provide the correct class name without
        a trailing comma.

        * platform/qt/Localizations.cpp:
        (WebCore::localizedMediaTimeDescription):

2009-09-24  Geoffrey Garen  <ggaren@apple.com>

        More build fix: Removed JSSharedWorkerContextCustom.cpp from project
        files, since it no longer exists in the repository.

        * GNUmakefile.am:
        * WebCore.gypi:
        * WebCore.pro:
        * WebCore.vcproj/WebCore.vcproj:

2009-09-24  Geoffrey Garen  <ggaren@apple.com>

        Windows build fix: Declare set/unsetPendingActivity public, so
        SharedWorkerScriptLoader can call them.

        * dom/ActiveDOMObject.h:

2009-09-24  Geoffrey Garen  <ggaren@apple.com>

        Fixed a bit of the Windows build.

        * workers/SharedWorker.idl: Declare a custom mark function. (I accidentally
        removed this in my last patch.)
        * WebCore.xcodeproj/project.pbxproj: Added JSSharedWorkerCustom.cpp back
        to the build. (I accidentally removed this in my last patch.)

2009-09-23  Geoffrey Garen  <ggaren@apple.com>

        32-bit build fix: restore previous cast that I thought was unnecessary.

        * xml/XMLHttpRequest.cpp:
        (WebCore::XMLHttpRequest::didSendData):
        (WebCore::XMLHttpRequest::didReceiveData):

2009-09-23  Geoffrey Garen  <ggaren@apple.com>

        Reviewed by Sam Weinig.

        Bring a little sanity to this crazy EventTarget world of ours
        https://bugs.webkit.org/show_bug.cgi?id=29701

        Lots of EventTarget refactoring to achieve a single shared implementation
        that fixes some of the performance and correctness bugs of the many individual
        implementations, and makes reasoning about EventTargets and EventListeners
        much easier.
        
        The basic design is this:
            - EventTarget manages a set of EventListeners.
            - onXXX EventListener attributes forward to standard EventTarget APIs.
            - Since the onXXX code is repetitive, it is usually done with macros
              of the form DEFINE_ATTRIBUTE_EVENT_LISTENER(attributeName).
            - EventTarget provides a shared implementation of dispatchEvent,
              which subclasses with special event dispatch rules, like Node, override.
            - To support Node, which lazily instantiates its EventTarget data,
              EventTarget has no data members, and instead makes a virtual call
              to get its data from wherever its subclass chose to store it.
              
        Code that used to call dispatchEvent, passing an ExceptionCode paratmeter,
        even though no exception could be thrown, has been changed not to do so,
        to improve clarity and performance.
        
        Code that used to call a special dispatchXXXEvent function, which just
        turned around and called dispatchEvent, has been changed to call
        dispatchEvent, to improve clarity and performance.

        * WebCore.base.exp:
        * WebCore.xcodeproj/project.pbxproj: Another day in the life of a WebKit
        engineer.

        * bindings/js/JSDOMBinding.cpp:
        (WebCore::isObservableThroughDOM): Updated for Node API change. Added
        "is not in the document but is firing event listeners" as a condition
        that makes a Node observable in the DOM, so that event listeners firing
        on removed nodes are not destroyed midstream. (This was a long-standing
        bug that was somewhat hidden by the old implementation's habit of
        copying the RegisteredEventListener vector before firing events, which
        would keep almost all the relevant objects from being destroyed.)

        * bindings/js/JSEventListener.cpp:
        (WebCore::JSEventListener::handleEvent): Removed the isWindowEvent flag
        because it was one of the most elaborately planned no-ops in the history
        of software crime, and one of the reasons clients thought they needed more
        than one dispatchEvent function even though they didn't.
        * bindings/js/JSEventListener.h:

        * bindings/js/JSDOMWindowCustom.cpp:
        (WebCore::JSDOMWindow::markChildren):
        (WebCore::JSMessagePort::markChildren):
        * bindings/js/JSNodeCustom.cpp:
        (WebCore::JSNode::markChildren):
        * bindings/js/JSAbstractWorkerCustom.cpp:
        * bindings/js/JSDOMApplicationCacheCustom.cpp:
        * bindings/js/JSDedicatedWorkerContextCustom.cpp:
        * bindings/js/JSEventSourceCustom.cpp:
        * bindings/js/JSMessagePortCustom.cpp:
        * bindings/js/JSSharedWorkerContextCustom.cpp: Removed.
        * bindings/js/JSWebSocketCustom.cpp:
        * bindings/js/JSWorkerContextCustom.cpp:
        (WebCore::JSWorkerContext::markChildren):
        * bindings/js/JSWorkerCustom.cpp:
        * bindings/js/JSXMLHttpRequestCustom.cpp:
        (WebCore::JSXMLHttpRequest::markChildren):
        * bindings/js/JSXMLHttpRequestUploadCustom.cpp:
        (WebCore::JSXMLHttpRequestUpload::markChildren): EventListener marking is
        now autogenerated. Classes that still have custom mark functions for other
        reasons now call a shared EventTarget API to mark their EventListeners.

        * bindings/objc/ObjCEventListener.h:
        * bindings/objc/ObjCEventListener.mm:
        (WebCore::ObjCEventListener::handleEvent): Bye bye isWindowEvent.

        * bindings/scripts/CodeGeneratorJS.pm: Autogeneration support for
        marking and invalidating event listeners.

        * dom/CharacterData.cpp:
        (WebCore::CharacterData::dispatchModifiedEvent):
        * dom/ContainerNode.cpp:
        (WebCore::ContainerNode::insertBefore):
        (WebCore::ContainerNode::replaceChild):
        (WebCore::willRemoveChild):
        (WebCore::ContainerNode::appendChild):
        (WebCore::dispatchChildInsertionEvents):
        (WebCore::dispatchChildRemovalEvents):
        * dom/Document.cpp:
        (WebCore::Document::removeAllEventListeners):
        (WebCore::Document::implicitClose):
        (WebCore::Document::setFocusedNode):
        (WebCore::Document::dispatchWindowEvent):
        (WebCore::Document::dispatchWindowLoadEvent):
        (WebCore::Document::finishedParsing):
        * dom/Document.h: Use dispatchEvent directly.

        * dom/Element.h: Moved a few event listener attributes down from Node,
        since they don't apply to all Nodes, only Elements.

        * dom/EventListener.h: Removed isWindowEvent parameter.

        * dom/EventNames.h: Added the "display" event name, so it works correctly
        with attribute macros, and for performance.

        * dom/EventTarget.cpp:
        (WebCore::forbidEventDispatch):
        (WebCore::allowEventDispatch):
        (WebCore::eventDispatchForbidden): Made this code (embarrasingly) thread
        safe, since it's now called on multiple threads. (Currently, we only forbid
        event dispatch on the main thread. If we ever want to forbid event dispatch
        on secondary threads, we can improve it then.)

        (WebCore::EventTarget::addEventListener):
        (WebCore::EventTarget::removeEventListener):
        (WebCore::EventTarget::setAttributeEventListener):
        (WebCore::EventTarget::getAttributeEventListener):
        (WebCore::EventTarget::clearAttributeEventListener):
        (WebCore::EventTarget::dispatchEvent):
        (WebCore::EventTarget::fireEventListeners):
        (WebCore::EventTarget::getEventListeners):
        (WebCore::EventTarget::removeAllEventListeners):
        * dom/EventTarget.h:
        (WebCore::FiringEventEndIterator::FiringEventEndIterator):
        (WebCore::EventTarget::ref):
        (WebCore::EventTarget::deref):
        (WebCore::EventTarget::markEventListeners):
        (WebCore::EventTarget::invalidateEventListeners):
        (WebCore::EventTarget::isFiringEventListeners):
        (WebCore::EventTarget::hasEventListeners): The ONE TRUE IMPLEMENTATION of
        EventTarget APIs, crafted from an amalgam of all the different versions
        we used to have. The most significant change here is that we no longer
        make a copy of an EventListener vector before firing the events in the
        vector -- instead, we use a reference to the original vector, along with
        a notification mechanism for the unlikely case when an EventListener is
        removed from the vector. This substantially reduces malloc, copying, and
        refcount overhead, and complexity.

        * dom/InputElement.cpp:
        (WebCore::InputElement::setValueFromRenderer):
        * dom/MessageEvent.h:
        (WebCore::MessageEvent::create): Use dispatchEvent directly.

        * dom/MessagePort.cpp:
        (WebCore::MessagePort::dispatchMessages):
        (WebCore::MessagePort::eventTargetData):
        (WebCore::MessagePort::ensureEventTargetData):
        * dom/MessagePort.h:
        (WebCore::MessagePort::setOnmessage):
        (WebCore::MessagePort::onmessage):
        * dom/MessagePort.idl: Removed custom EventTarget implementation.

        * dom/MutationEvent.h:
        (WebCore::MutationEvent::create): Added some default values so callers
        can construct MutationEvents more easily, without calling a custom dispatch
        function.

        * dom/Node.cpp:
        (WebCore::Node::addEventListener):
        (WebCore::Node::removeEventListener):
        (WebCore::Node::eventTargetData):
        (WebCore::Node::ensureEventTargetData):
        (WebCore::Node::handleLocalEvents):
        (WebCore::Node::dispatchEvent):
        (WebCore::Node::dispatchGenericEvent):
        (WebCore::Node::dispatchSubtreeModifiedEvent):
        (WebCore::Node::dispatchUIEvent):
        (WebCore::Node::dispatchKeyEvent):
        (WebCore::Node::dispatchMouseEvent):
        (WebCore::Node::dispatchWheelEvent):
        (WebCore::Node::dispatchFocusEvent):
        (WebCore::Node::dispatchBlurEvent):
        * dom/Node.h:
        (WebCore::Node::preDispatchEventHandler):
        (WebCore::Node::postDispatchEventHandler):
        * dom/Node.idl:
        * dom/NodeRareData.h:
        (WebCore::NodeRareData::eventTargetData):
        (WebCore::NodeRareData::ensureEventTargetData): Use the shared EventTarget
        interface, and call dispatchEvent directly instead of custom dispatchXXXEvent
        functions that just forwarded to dispatchEvent.

        * dom/RegisteredEventListener.cpp:
        * dom/RegisteredEventListener.h:
        (WebCore::RegisteredEventListener::RegisteredEventListener):
        (WebCore::operator==): This is just a simple struct now, since we no longer
        do a complicated copy / refCount / isRemoved dance just to honor the rule
        that an EventListener can be removed during event dispatch.

        * history/CachedFrame.cpp:
        (WebCore::CachedFrameBase::restore): Removed another custom dispatchEvent.

        * html/HTMLBodyElement.cpp:
        * html/HTMLBodyElement.h: Use the shared EventTarget API.

        * html/HTMLFormControlElement.cpp:
        (WebCore::HTMLFormControlElement::dispatchFormControlChangeEvent):
        (WebCore::HTMLFormControlElement::checkValidity):
        * html/HTMLFormElement.cpp:
        (WebCore::HTMLFormElement::handleLocalEvents):
        (WebCore::HTMLFormElement::prepareSubmit):
        (WebCore::HTMLFormElement::reset):
        * html/HTMLFormElement.h: Use the standard dispatchEvent API.

        * html/HTMLFrameSetElement.cpp:
        * html/HTMLFrameSetElement.h: Use the shared EventTarget API.

        * html/HTMLImageLoader.cpp:
        (WebCore::HTMLImageLoader::dispatchLoadEvent):
        * html/HTMLInputElement.cpp:
        (WebCore::HTMLInputElement::onSearch):
        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::loadInternal):
        * html/HTMLScriptElement.cpp:
        (WebCore::HTMLScriptElement::dispatchLoadEvent):
        (WebCore::HTMLScriptElement::dispatchErrorEvent):
        * html/HTMLSourceElement.cpp:
        (WebCore::HTMLSourceElement::errorEventTimerFired):
        * html/HTMLTokenizer.cpp:
        (WebCore::HTMLTokenizer::notifyFinished): Use the standard dispatchEvent API.

        * inspector/InspectorDOMAgent.cpp:
        (WebCore::InspectorDOMAgent::handleEvent):
        * inspector/InspectorDOMAgent.h:
        * inspector/InspectorDOMStorageResource.cpp:
        (WebCore::InspectorDOMStorageResource::handleEvent):
        * inspector/InspectorDOMStorageResource.h:
        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::stopLoading):
        (WebCore::FrameLoader::canCachePageContainingThisFrame):
        (WebCore::FrameLoader::logCanCacheFrameDecision):
        (WebCore::HashChangeEventTask::performTask):
        (WebCore::FrameLoader::pageHidden): No more isWindowEvent.

        * loader/ImageDocument.cpp:
        (WebCore::ImageEventListener::handleEvent):
        * loader/appcache/ApplicationCacheGroup.cpp:
        (WebCore::CallCacheListenerTask::performTask):
        * loader/appcache/ApplicationCacheHost.cpp:
        (WebCore::ApplicationCacheHost::notifyDOMApplicationCache):
        * loader/appcache/ApplicationCacheHost.h:
        * loader/appcache/DOMApplicationCache.cpp:
        (WebCore::DOMApplicationCache::eventTargetData):
        (WebCore::DOMApplicationCache::ensureEventTargetData):
        * loader/appcache/DOMApplicationCache.h:
        * loader/appcache/DOMApplicationCache.idl: Switched to the standard
        EventTarget API. As a part of this, I switched this class from using a
        custom internal event name enumeration to using the standard EventNames.

        * notifications/Notification.cpp:
        (WebCore::Notification::eventTargetData):
        (WebCore::Notification::ensureEventTargetData):
        * notifications/Notification.h:
        (WebCore::Notification::scriptExecutionContext):
        * notifications/Notification.idl: Switched to the standard EventTarget API.

        * page/DOMWindow.cpp:
        (WebCore::PostMessageTimer::event):
        (WebCore::windowsWithUnloadEventListeners):
        (WebCore::windowsWithBeforeUnloadEventListeners):
        (WebCore::allowsBeforeUnloadListeners):
        (WebCore::DOMWindow::dispatchAllPendingBeforeUnloadEvents):
        (WebCore::DOMWindow::pendingUnloadEventListeners):
        (WebCore::DOMWindow::dispatchAllPendingUnloadEvents): Changed the "pending"
        unload / beforeunload listener tracker just to track which windows had
        such listeners, instead of actually keeping a copy of the listeners. Now,
        this code can use the standard EventTarget API.

        (WebCore::DOMWindow::~DOMWindow):
        (WebCore::DOMWindow::postMessageTimerFired):
        (WebCore::DOMWindow::addEventListener):
        (WebCore::DOMWindow::removeEventListener):
        (WebCore::DOMWindow::dispatchLoadEvent):
        (WebCore::DOMWindow::dispatchEvent):
        (WebCore::DOMWindow::removeAllEventListeners):
        (WebCore::DOMWindow::captureEvents):
        (WebCore::DOMWindow::releaseEvents):
        (WebCore::DOMWindow::eventTargetData):
        (WebCore::DOMWindow::ensureEventTargetData):
        * page/DOMWindow.h:
        * page/DOMWindow.idl: Use the standard EventTarget APIs.

        * page/EventHandler.cpp:
        (WebCore::EventHandler::canMouseDownStartSelect):
        (WebCore::EventHandler::canMouseDragExtendSelect):
        (WebCore::EventHandler::sendResizeEvent):
        (WebCore::EventHandler::sendScrollEvent): Use dispatchEvent directly.

        * page/EventSource.cpp:
        (WebCore::EventSource::endRequest):
        (WebCore::EventSource::didReceiveResponse):
        (WebCore::EventSource::parseEventStreamLine):
        (WebCore::EventSource::stop):
        (WebCore::EventSource::createMessageEvent):
        (WebCore::EventSource::eventTargetData):
        (WebCore::EventSource::ensureEventTargetData):
        * page/EventSource.h:
        * page/EventSource.idl: Use the standard EventTarget APIs.

        * page/FocusController.cpp:
        (WebCore::dispatchEventsOnWindowAndFocusedNode):
        (WebCore::FocusController::setFocusedFrame):
        * page/Frame.cpp:
        (WebCore::Frame::shouldClose):
        * page/Frame.h:
        * page/Page.cpp:
        (WebCore::networkStateChanged):
        * page/animation/AnimationController.cpp:
        (WebCore::AnimationControllerPrivate::updateStyleIfNeededDispatcherFired):
        * rendering/RenderListBox.cpp:
        (WebCore::RenderListBox::valueChanged):
        * rendering/RenderTextControl.cpp:
        (WebCore::RenderTextControl::selectionChanged):
        * rendering/RenderTextControlMultiLine.cpp:
        (WebCore::RenderTextControlMultiLine::subtreeHasChanged): Use dispatchEvent.

        * svg/SVGElement.cpp:
        (WebCore::hasLoadListener): Rewritten for new EventTarget API.

        * svg/SVGElementInstance.cpp:
        (WebCore::dummyEventTargetData):
        (WebCore::SVGElementInstance::addEventListener):
        (WebCore::SVGElementInstance::removeEventListener):
        (WebCore::SVGElementInstance::removeAllEventListeners):
        (WebCore::SVGElementInstance::dispatchEvent):
        (WebCore::SVGElementInstance::eventTargetData):
        (WebCore::SVGElementInstance::ensureEventTargetData): Use the EventTarget API.

        * svg/SVGElementInstance.h:
        * svg/SVGImageLoader.cpp:
        (WebCore::SVGImageLoader::dispatchLoadEvent):
        * svg/SVGScriptElement.cpp:
        (WebCore::SVGScriptElement::dispatchErrorEvent): Use dispatchEvent directly.

        * svg/SVGUseElement.cpp:
        (WebCore::SVGUseElement::transferEventListenersToShadowTree): Updated for
        new EventTarget API.

        * svg/animation/SVGSMILElement.cpp:
        (WebCore::ConditionEventListener::handleEvent): No more isWindowEvent.

        * websockets/WebSocket.cpp:
        (WebCore::ProcessWebSocketEventTask::create):
        (WebCore::ProcessWebSocketEventTask::performTask):
        (WebCore::ProcessWebSocketEventTask::ProcessWebSocketEventTask):
        (WebCore::WebSocket::didConnect):
        (WebCore::WebSocket::didReceiveMessage):
        (WebCore::WebSocket::didClose):
        (WebCore::WebSocket::eventTargetData):
        (WebCore::WebSocket::ensureEventTargetData):
        * websockets/WebSocket.h:
        * websockets/WebSocket.idl:
        * workers/AbstractWorker.cpp:
        (WebCore::AbstractWorker::eventTargetData):
        (WebCore::AbstractWorker::ensureEventTargetData):
        * workers/AbstractWorker.h:
        * workers/AbstractWorker.idl:
        * workers/DedicatedWorkerContext.cpp:
        * workers/DedicatedWorkerContext.h:
        * workers/DedicatedWorkerContext.idl:
        * workers/DefaultSharedWorkerRepository.cpp:
        (WebCore::SharedWorkerConnectTask::performTask):
        (WebCore::SharedWorkerScriptLoader::load):
        (WebCore::SharedWorkerScriptLoader::notifyFinished):
        * workers/SharedWorker.idl:
        * workers/SharedWorkerContext.cpp:
        (WebCore::createConnectEvent):
        * workers/SharedWorkerContext.h:
        * workers/SharedWorkerContext.idl:
        * workers/Worker.cpp:
        (WebCore::Worker::notifyFinished):
        * workers/Worker.h:
        * workers/Worker.idl:
        * workers/WorkerContext.cpp:
        (WebCore::WorkerContext::eventTargetData):
        (WebCore::WorkerContext::ensureEventTargetData):
        * workers/WorkerContext.h:
        * workers/WorkerContext.idl:
        * workers/WorkerMessagingProxy.cpp:
        (WebCore::MessageWorkerContextTask::performTask):
        (WebCore::MessageWorkerTask::performTask):
        (WebCore::WorkerExceptionTask::performTask):
        * xml/XMLHttpRequest.cpp:
        (WebCore::XMLHttpRequest::callReadyStateChangeListener):
        (WebCore::XMLHttpRequest::createRequest):
        (WebCore::XMLHttpRequest::abort):
        (WebCore::XMLHttpRequest::networkError):
        (WebCore::XMLHttpRequest::abortError):
        (WebCore::XMLHttpRequest::didSendData):
        (WebCore::XMLHttpRequest::didReceiveData):
        (WebCore::XMLHttpRequest::eventTargetData):
        (WebCore::XMLHttpRequest::ensureEventTargetData):
        * xml/XMLHttpRequest.h:
        * xml/XMLHttpRequest.idl:
        * xml/XMLHttpRequestProgressEvent.h:
        (WebCore::XMLHttpRequestProgressEvent::create):
        * xml/XMLHttpRequestUpload.cpp:
        (WebCore::XMLHttpRequestUpload::eventTargetData):
        (WebCore::XMLHttpRequestUpload::ensureEventTargetData):
        * xml/XMLHttpRequestUpload.h:
        * xml/XMLHttpRequestUpload.idl: Use new EventTarget API.

2009-09-23  Kent Tamura  <tkent@chromium.org>

        Reviewed by Darin Adler.

        - Support for maxLength of <textarea>
        - Move numGraphemeClusters() and numCharactersInGraphemeClusters() from InputElement to String.
        https://bugs.webkit.org/show_bug.cgi?id=29292

        Test: fast/forms/textarea-maxlength.html

        * dom/InputElement.cpp:
        (WebCore::InputElement::sanitizeUserInputValue):
        (WebCore::InputElement::handleBeforeTextInsertedEvent):
        * html/HTMLTextAreaElement.cpp:
        (WebCore::HTMLTextAreaElement::defaultEventHandler):
        (WebCore::HTMLTextAreaElement::handleBeforeTextInsertedEvent):
        (WebCore::HTMLTextAreaElement::sanitizeUserInputValue):
        (WebCore::HTMLTextAreaElement::maxLength):
        (WebCore::HTMLTextAreaElement::setMaxLength):
        * html/HTMLTextAreaElement.h:
        * html/HTMLTextAreaElement.idl:
        * platform/text/PlatformString.h:
        * platform/text/String.cpp:
        (WebCore::String::numGraphemeClusters):
        (WebCore::String::numCharactersInGraphemeClusters):

2009-09-23  Martin Robinson  <martin.james.robinson@gmail.com>

        Reviewed by Xan Lopez.

        [GTK] REGRESSION: BitmapImage::getGdkPixbuf fails for non-square images
        https://bugs.webkit.org/show_bug.cgi?id=29654

        Give GDK_Backspace key events the proper text properties.

        Instead of adding new tests, this change removes existing tests
        from Gtk's skipped list.

        * platform/gtk/KeyEventGtk.cpp:
        (WebCore::keyIdentifierForGdkKeyCode):
        (WebCore::singleCharacterString):

2009-09-23  Sam Weinig  <sam@webkit.org>

        Reviewed by Adam Barth.

        Fix for https://bugs.webkit.org/show_bug.cgi?id=26989
        Should allow navigation of top-level openers
        <rdar://problem/7034025>

        Allow navigation of cross-origin window.opener if it is top-level frame.

        Test: http/tests/security/frameNavigation/cross-origin-opener.html

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::shouldAllowNavigation):

2009-09-23  Marshall Culpepper  <mculpepper@appcelerator.com>

        Reviewed by Eric Seidel.

        Added $(WebKitLibrariesDir)/include/cairo so cairo.h is found by
        default when the necessary dependencies are extracted into the
        WebKitLibrariesDir.
        https://bugs.webkit.org/show_bug.cgi?id=29661

        * WebCore.vcproj/WebCoreCairo.vsprops:

2009-09-23  Darin Adler  <darin@apple.com>

        Reviewed by Sam Weinig.

        Crash when website does a history.back() followed by an alert()
        https://bugs.webkit.org/show_bug.cgi?id=29686
        rdar://problem/6984996

        When loading is deferred, we need to defer timer-based loads
        too, not just networking-driven loads. Otherwise we can get
        syncronouse navigation while running a script, which leads to
        crashes and other badness.

        This patch includes a manual test; an automated test may be
        possible some time in the future.

        * dom/Document.cpp:
        (WebCore::Document::processHttpEquiv): Use scheduleLocationChange
        instead of scheduleHTTPRedirection to implement the navigation
        needed for x-frame-options.

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::FrameLoader): Updated for data members with
        new names and new data members.
        (WebCore::FrameLoader::setDefersLoading): When turning deferral
        off, call startRedirectionTimer and startCheckCompleteTimer, since
        either of them might have been fired and ignored while defersLoading
        was true.
        (WebCore::FrameLoader::clear): Updated for replacement of the
        m_checkCompletedTimer and m_checkLoadCompleteTimer timers.
        (WebCore::FrameLoader::allAncestorsAreComplete): Added.
        (WebCore::FrameLoader::checkCompleted): Added code to set
        m_shouldCallCheckCompleted to false. Changed code that calls
        startRedirectionTimer to call it unconditionally, since that
        function now knows when to do work and doesn't expect callers
        to handle that any more.
        (WebCore::FrameLoader::checkTimerFired): Added. Replaces the old
        timer fired callbacks. Calls checkCompleted and checkLoadComplete
        as appropriate, but not when defersLoading is true.
        (WebCore::FrameLoader::startCheckCompleteTimer): Added. Replaces
        the two different calls to start timers before. Only starts the
        timers if they are needed.
        (WebCore::FrameLoader::scheduleCheckCompleted): Changed to call
        startCheckCompleteTimer after setting boolean.
        (WebCore::FrameLoader::scheduleCheckLoadComplete): Ditto.
        (WebCore::FrameLoader::scheduleHistoryNavigation): Removed
        canGoBackOrForward check. The logic works more naturally when
        we don't do anything until the timer fires.
        (WebCore::FrameLoader::redirectionTimerFired): Do nothing if
        defersLoading is true. Also moved canGoBackOrForward check here.
        (WebCore::FrameLoader::scheduleRedirection): Changed code that
        calls startRedirectionTimer to do so unconditionally. That
        function now handles the rules about when to start the timer
        rather than expecting the caller to do so.
        (WebCore::FrameLoader::startRedirectionTimer): Added code to
        handle the case where there is no redirection scheduled,
        where the timer is already active, or where this is a classic
        redirection and there is an ancestor that has not yet completed
        loading.
        (WebCore::FrameLoader::completed): Call startRedirectionTimer
        here directly instead of calling a cover named parentCompleted.
        Hooray! One less function in the giant FrameLoader class!
        (WebCore::FrameLoader::checkLoadComplete): Added code to set
        m_shouldCallCheckLoadComplete to false.

        * loader/FrameLoader.h: Replaced the two functions
        checkCompletedTimerFired and checkLoadCompleteTimerFired with
        one function, checkTimerFired. Removed the parentCompleted
        function. Added the startCheckCompleteTimer and
        allAncestorsAreComplete functions. Replaced the
        m_checkCompletedTimer and m_checkLoadCompleteTimer data
        members with m_checkTimer, m_shouldCallCheckCompleted, and
        m_shouldCallCheckLoadComplete.

        * manual-tests/go-back-after-alert.html: Added.
        * manual-tests/resources/alert-and-go-back.html: Added.

2009-09-23  David Kilzer  <ddkilzer@apple.com>

        <http://webkit.org/b/29660> Move "Generate 64-bit Export File" build phase script into DerivedSources.make

        Reviewed by Mark Rowe.

        The "Generate 64-bit Export File" build phase script generated
        the WebCore.LP64.exp export file used to link 64-bit WebCore.
        Instead of having a separate build phase script, move its
        generation into DerivedSources.make where WebCore.exp is
        generated.

        * DerivedSources.make: Added a rule to make WebCore.LP64.exp.
        Added code to append WebCore.PluginHostProcess.exp to
        $(WEBCORE_EXPORT_DEPENDENCIES) when WTF_USE_PLUGIN_HOST_PROCESS
        is set to 1.
        * WebCore.PluginHostProcess.exp: Renamed from WebCore/WebCore.LP64.exp.
        * WebCore.xcodeproj/project.pbxproj: Removed the "Generate
        64-bit Export File" build phase script. Renamed WebCore.LP64.exp
        to WebCore.PluginHostProcess.exp.

2009-09-23  Peter Kasting  <pkasting@google.com>

        Reviewed by Dimitri Glazkov.

        https://bugs.webkit.org/show_bug.cgi?id=29694
        [Chromium] Eliminate dependency on gfx::Rect from ImageSkia.

        * platform/graphics/skia/ImageSkia.cpp:
        (WebCore::drawResampledBitmap):

2009-09-22  Timothy Hatcher  <timothy@apple.com>

        Prevent scrolling multiple elements during latched wheel events.

        Reviewed by Anders Carlsson.

        * page/EventHandler.cpp:
        (WebCore::scrollAndAcceptEvent):
        (WebCore::EventHandler::clear):
        (WebCore::EventHandler::handleWheelEvent):
        * page/EventHandler.h:
        * rendering/RenderBox.cpp:
        (WebCore::RenderBox::scroll):
        * rendering/RenderBox.h:

2009-09-23  Daniel Bates  <dbates@webkit.org>

        Reviewed by Adam Barth.

        https://bugs.webkit.org/show_bug.cgi?id=29523
        
        Fixes an issue where a JavaScript URL that was URL-encoded twice can bypass the
        XSSAuditor.
        
        The method FrameLoader::executeIfJavaScriptURL decodes the URL escape 
        sequences in a JavaScript URL before it is eventually passed to the XSSAuditor.
        Because the XSSAuditor also decodes the URL escape sequences as part of its
        canonicalization, the double decoding of a JavaScript URL would
        not match the canonicalization of the input parameters.

        Tests: http/tests/security/xssAuditor/iframe-javascript-url-url-encoded.html
               http/tests/security/xssAuditor/javascript-link-url-encoded.html

        * bindings/js/ScriptController.cpp:
        (WebCore::ScriptController::evaluate): Moved call to 
        XSSAuditor::canEvaluateJavaScriptURL into FrameLoader::executeIfJavaScriptURL.
        * bindings/v8/ScriptController.cpp:
        (WebCore::ScriptController::evaluate): Ditto.
        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::executeIfJavaScriptURL): Modified to call 
        XSSAuditor::canEvaluateJavaScriptURL on the JavaScript URL before it is
        decoded.

2009-09-22  Dave Hyatt  <hyatt@apple.com>

        Reviewed by John Sullivan.

        https://bugs.webkit.org/show_bug.cgi?id=29657
        Columns don't break properly in positioned elements with a fixed height.  Make sure that
        a block is still considered to have columns even when the column count is 1 if the column
        width is non-auto.
    
        Added fast/multicol/positioned-with-constrained-height.html

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::setDesiredColumnCountAndWidth):

2009-09-23  Holger Hans Peter Freyther  <zecke@selfish.org>

        Rubber-stamped by Simon Hausmann.

        Add a null check for the Document*. In the mirror benchmarking
        application a crash from a call from JavaScript was observed.

        I was not able to come up with a test case for this issue.

        * platform/qt/CookieJarQt.cpp:
        (WebCore::cookieJar):

2009-09-23  Simon Hausmann  <simon.hausmann@nokia.com>

        Reviewed by Tor Arne Vestbø.

        Fix the Qt/Windows build, after the introduction of
        the page client.

        * plugins/win/PluginViewWin.cpp:
        (windowHandleForPageClient):
        (WebCore::PluginView::getValue):
        (WebCore::PluginView::forceRedraw):
        (WebCore::PluginView::platformStart):

2009-09-23  Gustavo Noronha Silva  <gns@gnome.org>

        Reviewed by Xan Lopez.

        [GTK] media tests failing after their rework
        https://bugs.webkit.org/show_bug.cgi?id=29532

        Correctly advertise the mime types used by the common formats used
        in the tests.

        Tests that regressed, and will pass again:

           media/video-canvas-source.html
           media/video-controls.html
           media/video-currentTime-set2.html
           media/video-dom-autoplay.html
           media/video-dom-src.html
           media/video-error-abort.html
           media/video-load-networkState.html
           media/video-load-readyState.html
           media/video-muted.html
           media/video-no-autoplay.html
           media/video-pause-empty-events.html
           media/video-play-empty-events.html
           media/video-seekable.html
           media/video-seeking.html
           media/video-size.html
           media/video-source-type-params.html
           media/video-source-type.html
           media/video-source.html
           media/video-src-change.html
           media/video-src-invalid-remove.html
           media/video-src-remove.html
           media/video-src-set.html
           media/video-src-source.html
           media/video-src.html
           media/video-timeupdate-during-playback.html
           media/video-volume.html

        * platform/graphics/gtk/MediaPlayerPrivateGStreamer.cpp:
        (WebCore::mimeTypeCache):

2009-09-22  Charles Wei  <charles.wei@torchmobile.com.cn>

        Reviewed by Eric Seidel.

        Fix the crash problem with absolte positioned children in foreignobject
        htts://bugs.webkit.org/show_bug.cgi?id=26342

        Test: svg/custom/foreignobject-crash-with-absolute-positioned-children.svg

        * rendering/RenderForeignObject.h:
        (WebCore::RenderForeignObject::isSVGForeignObject):
        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::containingBlock):
        * rendering/RenderObject.h:
        (WebCore::RenderObject::isSVGForeignObject):

2009-09-22  Drew Wilson  <atwilson@google.com>

        Reviewed by David Levin.

        SharedWorkers "name" attribute is now optional.
        https://bugs.webkit.org/show_bug.cgi?id=28897

        Test: fast/workers/shared-worker-name.html

        * bindings/js/JSSharedWorkerConstructor.cpp:
        (WebCore::constructSharedWorker):
        Default 'name' attribute to empty string if it is not provided.
        * bindings/v8/custom/V8SharedWorkerCustom.cpp:
        (WebCore::CALLBACK_FUNC_DECL):
        Default 'name' attribute to empty string if it is not provided.
        * workers/DefaultSharedWorkerRepository.cpp:
        (WebCore::SharedWorkerProxy::matches):
        Now matches URLs if names are empty strings.
        (WebCore::DefaultSharedWorkerRepository::getProxy):
        Pass URL in to SharedWorkerProxy::matches().

2009-09-22  Dimitri Glazkov  <dglazkov@chromium.org>

        Unreviewed, another build fix.

        [Chromium] Add another missing include.
        https://bugs.webkit.org/show_bug.cgi?id=29536

        * inspector/InspectorController.cpp: Added DOMWindow.h include.

2009-09-22  Dimitri Glazkov  <dglazkov@chromium.org>

        Unreviewed, build fix.

        [Chromium] Add missing include.
        https://bugs.webkit.org/show_bug.cgi?id=29536

        * inspector/InspectorDOMStorageResource.cpp: Added DOMWindow.h include.

2009-09-22  Darin Adler  <darin@apple.com>

        Reviewed by Sam Weinig.

        Tighten up the ScheduledRedirection machinery to prepare for a bug fix
        https://bugs.webkit.org/show_bug.cgi?id=29663

        * loader/FrameLoader.cpp:
        (WebCore::ScheduledRedirection::ScheduledRedirection): Added a boolean,
        initialized to false, to keep track if the redirection has been
        communicated to the client.
        (WebCore::FrameLoader::stopLoading): Tweaked a comment.
        (WebCore::FrameLoader::cancelRedirection): Removed code to clear
        m_scheduledRedirection.clear since stopRedirectionTimer does that now.
        (WebCore::FrameLoader::allChildrenAreComplete): Added.
        (WebCore::FrameLoader::checkCompleted): Use allChildrenAreComplete
        function for clarity.
        (WebCore::FrameLoader::checkCallImplicitClose): Ditto.
        (WebCore::FrameLoader::scheduleRedirection): Changed to take a PassOwnPtr.
        (WebCore::FrameLoader::startRedirectionTimer): Added code to set the
        toldClient flag and not call clientRedirected a second time if it is set.
        (WebCore::FrameLoader::stopRedirectionTimer): Changed so this can be safely
        called multiple times and it will call clientRedirectCancelledOrFinished
        only once.

        * loader/FrameLoader.h: Changed scheduleRedirection to be a PassOwnPtr.
        Added allChildrenAreComplete function.

2009-09-22  Yury Semikhatsky  <yurys@chromium.org>

        Reviewed by Timothy Hatcher.

        WebInspector: Migrate Databases tab to InjectedScript /
        serialized interaction.

        DOMStorage interaction is now serialized into JSON messages
        and doesn't require quarantined objects.
        
        https://bugs.webkit.org/show_bug.cgi?id=28873

        * dom/EventListener.h:
        (WebCore::EventListener::):
        * inspector/InspectorBackend.cpp:
        (WebCore::InspectorBackend::selectDOMStorage):
        (WebCore::InspectorBackend::getDOMStorageEntries):
        (WebCore::InspectorBackend::setDOMStorageItem):
        (WebCore::InspectorBackend::removeDOMStorageItem):
        * inspector/InspectorBackend.h:
        * inspector/InspectorBackend.idl:
        * inspector/InspectorController.cpp:
        (WebCore::InspectorController::didCommitLoad):
        (WebCore::InspectorController::selectDOMStorage):
        (WebCore::InspectorController::getDOMStorageEntries):
        (WebCore::InspectorController::setDOMStorageItem):
        (WebCore::InspectorController::removeDOMStorageItem):
        (WebCore::InspectorController::getDOMStorageResourceForId):
        * inspector/InspectorController.h:
        * inspector/InspectorDOMStorageResource.cpp:
        (WebCore::InspectorDOMStorageResource::InspectorDOMStorageResource):
        (WebCore::InspectorDOMStorageResource::bind):
        (WebCore::InspectorDOMStorageResource::unbind):
        (WebCore::InspectorDOMStorageResource::startReportingChangesToFrontend):
        (WebCore::InspectorDOMStorageResource::handleEvent):
        (WebCore::InspectorDOMStorageResource::operator==):
        * inspector/InspectorDOMStorageResource.h:
        (WebCore::InspectorDOMStorageResource::cast):
        (WebCore::InspectorDOMStorageResource::id):
        (WebCore::InspectorDOMStorageResource::domStorage):
        * inspector/InspectorFrontend.cpp:
        (WebCore::InspectorFrontend::selectDOMStorage):
        (WebCore::InspectorFrontend::didGetDOMStorageEntries):
        (WebCore::InspectorFrontend::didSetDOMStorageItem):
        (WebCore::InspectorFrontend::didRemoveDOMStorageItem):
        (WebCore::InspectorFrontend::updateDOMStorage):
        * inspector/InspectorFrontend.h:
        * inspector/front-end/DOMStorage.js:
        (WebInspector.DOMStorage):
        (WebInspector.DOMStorage.prototype.get id):
        (WebInspector.DOMStorage.prototype.get domStorage):
        (WebInspector.DOMStorage.prototype.get isLocalStorage):
        (WebInspector.DOMStorage.prototype.getEntriesAsync):
        (WebInspector.DOMStorage.prototype.setItemAsync):
        (WebInspector.DOMStorage.prototype.removeItemAsync):
        * inspector/front-end/DOMStorageDataGrid.js:
        (WebInspector.DOMStorageDataGrid):
        (WebInspector.DOMStorageDataGrid.prototype._startEditingColumnOfDataGridNode):
        (WebInspector.DOMStorageDataGrid.prototype._startEditing):
        (WebInspector.DOMStorageDataGrid.prototype._editingCommitted):
        (WebInspector.DOMStorageDataGrid.prototype._editingCancelled):
        (WebInspector.DOMStorageDataGrid.prototype.deleteSelectedRow):
        * inspector/front-end/DOMStorageItemsView.js:
        (WebInspector.DOMStorageItemsView.prototype.update):
        (WebInspector.DOMStorageItemsView.prototype._showDOMStorageEntries):
        (WebInspector.DOMStorageItemsView.prototype._dataGridForDOMStorageEntries):
        * inspector/front-end/StoragePanel.js:
        (WebInspector.StoragePanel.prototype.show):
        (WebInspector.StoragePanel.prototype.reset):
        (WebInspector.StoragePanel.prototype.selectDOMStorage):
        (WebInspector.StoragePanel.prototype.updateDOMStorage):
        (WebInspector.StoragePanel.prototype._domStorageForId):
        * inspector/front-end/inspector.js:
        (WebInspector.addDOMStorage):
        (WebInspector.updateDOMStorage):

2009-09-22  Sam Weinig  <sam@webkit.org>

        Reviewed by Alexey Proskuryakov.

        Fix for XMLHttpRequest.abort() should destroy the response text.
        https://bugs.webkit.org/show_bug.cgi?id=29658
        <rdar://problem/5301430>

        Clearing the response text after calling XMLHttpRequest.abort() is necessary
        per spec and matches Firefox. It is also a potential memory win.

        Test: http/tests/xmlhttprequest/abort-should-destroy-responseText.html

        * xml/XMLHttpRequest.cpp:
        (WebCore::XMLHttpRequest::abort): Clear the response text making sure to
        keep the actual ResourceReponse around so that the response status and response
        status text are kept around.

2009-09-22  Dimitri Glazkov  <dglazkov@chromium.org>

        No review, rolling out r48639.
        http://trac.webkit.org/changeset/48639

        * bindings/v8/V8GCController.cpp:
        (WebCore::ObjectGrouperVisitor::visitDOMWrapper):

2009-09-22  Dumitru Daniliuc  <dumi@chromium.org>

        Reviewed by Dimitri Glazkov.

        Changing the transaction coordinator to (re-)allow multiple read
        transactions on the same database to run concurrently (without
        risking a deadlock this time).

        https://bugs.webkit.org/show_bug.cgi?id=29115

        Tests: storage/read-and-write-transactions-dont-run-together.html
               storage/read-transactions-running-concurrently.html

        * storage/SQLTransaction.h:
        (WebCore::SQLTransaction::isReadOnly): Returns the type of the
        transaction.
        * storage/SQLTransactionCoordinator.cpp:
        (WebCore::SQLTransactionCoordinator::acquireLock): Changed to
        allow multiple read transactions on the same DB to run
        concurrently.
        (WebCore::SQLTransactionCoordinator::releaseLock): Changed to
        allow multiple read transactions on the same DB to run
        concurrently.
        (WebCore::SQLTransactionCoordinator::shutdown): Renamed the map.
        * storage/SQLTransactionCoordinator.h:

2009-09-22  Peter Kasting  <pkasting@google.com>

        Reviewed by David Levin.

        https://bugs.webkit.org/show_bug.cgi?id=29652
        Support true system colors for CSS system colors in Chromium/Win.

        * rendering/RenderThemeChromiumWin.cpp:
        (WebCore::cssValueIdToSysColorIndex):
        (WebCore::RenderThemeChromiumWin::systemColor):
        * rendering/RenderThemeChromiumWin.h:

2009-09-22  Beth Dakin  <bdakin@apple.com>

        Reviewed by Dave Hyatt.

        Fix for <rdar://problem/6925121> SAP: Wrong width calculation in 
        table with fixed layout
        -and corresponding-
        https://bugs.webkit.org/show_bug.cgi?id=29501

        New Tests:
        * fast/table/fixed-table-with-percent-inside-percent-table.html: Added.
        * fast/table/fixed-table-with-percent-width-inside-auto-table.html: Added.
        * fast/table/fixed-table-with-percent-width-inside-div.html: Added.
        * fast/table/fixed-table-with-percent-width-inside-extra-large-div.html: Added.
        * fast/table/fixed-table-with-percent-width-inside-fixed-width-table.html: Added.
        * fast/table/fixed-table-with-small-percent-width.html: Added.

        This new quirk is very similar to an existing one that was 
        implemented in revision 4316.
        * rendering/FixedTableLayout.cpp:
        (WebCore::FixedTableLayout::calcPrefWidths):

2009-09-22  Brian Weinstein  <bweinstein@apple.com>

        Reviewed by Timothy Hatcher.

        List HTTP status code with response headers in resources tab of Web Inspector.
        http://webkit.org/b/19945

        This patch adds a new top level list in the resources tab, HTTP Information, that 
        for now, contains the Request Method (GET, POST, etc.) and the Status Code (200, 404, etc.).
        Additionally, it adds a colored dot next to the requested URL to show the status 
        (green for success, orange for redirect, red for error).

        * English.lproj/localizedStrings.js:
        * inspector/front-end/ImageView.js:
        (WebInspector.ImageView):
        * inspector/front-end/Images/errorRedDot.png: Added.
        * inspector/front-end/Images/successGreenDot.png: Added.
        * inspector/front-end/Images/warningOrangeDot.png: Added.
        * inspector/front-end/Resource.js:
        (WebInspector.Resource.StatusTextForCode):
        * inspector/front-end/ResourceView.js:
        (WebInspector.ResourceView):
        (WebInspector.ResourceView.prototype._refreshURL):
        (WebInspector.ResourceView.prototype._refreshHTTPInformation):
        * inspector/front-end/inspector.css:

2009-09-22  Brady Eidson  <beidson@apple.com>

        Reviewed by Darin Adler.

        Back list isn't properly updated for fragment changes after a redirect.
        <rdar://problem/6142803> and https://bugs.webkit.org/show_bug.cgi?id=20355

        Test: fast/loader/fragment-after-redirect-gets-back-entry.html

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::loadURL): Properly reset the policy FrameLoadType before
          consulting the policy delegate for fragment scrolling.

2009-09-22  Darin Fisher  <darin@chromium.org>

        Reviewed by Dimitri Glazkov.

        Drop down selects get stuck in the non-visible state and cannot be opened.
        https://bugs.webkit.org/show_bug.cgi?id=29645

        All paths that lead to hiding the popup menu must call popupDidHide on
        the PopupMenuClient.  This change makes it so by moving all of the
        hiding logic to PopupListBox::hidePopup.

        * platform/chromium/PopupMenuChromium.cpp:
        (WebCore::PopupContainer::hidePopup):
        (WebCore::PopupListBox::hidePopup):
        * platform/chromium/PopupMenuChromium.h:

2009-09-22  Patrick Mueller  <Patrick_Mueller@us.ibm.com>

        Reviewed by Timothy Hatcher.

        WebInspector.log() function not protected if console not yet created
        https://bugs.webkit.org/show_bug.cgi?id=29336
        
        No new tests.  Only affects Web Inspector developers adding logging
        to their code during development.

        * inspector/front-end/inspector.js:
        (WebInspector.log.isLogAvailable):
        (WebInspector.log.flushQueue):
        (WebInspector.log.flushQueueIfAvailable):
        (WebInspector.log.logMessage):
        (WebInspector.log):

2009-09-22  Yaar Schnitman  <yaar@chromium.org>

        Reviewed by David Levin.

        Ported chromium.org's webcore.gyp for the webkit chromium port.

        https://bugs.webkit.org/show_bug.cgi?id=29617

        * WebCore.gyp/WebCore.gyp: Added.

2009-09-22  Christian Plesner Hansen  <christian.plesner.hansen@gmail.com>

        Reviewed by Adam Barth.

        [v8] Don't keep clean wrappers artificially alive        
        We currently keep all DOM node wrappers alive, even when there are
        no more references to them from JS, in case they have properties
        that we need to keep around if new JS references are created.
        This changes the policy to only keep wrappers artificially alive
        if they have changed since they were created. Empty wrappers are
        discarded and recreated as needed.
        https://bugs.webkit.org/show_bug.cgi?id=29330

        * bindings/v8/V8GCController.cpp:
        (WebCore::ObjectGrouperVisitor::visitDOMWrapper):

2009-09-22  Pavel Feldman  <pfeldman@chromium.org>

        Reviewed by Timothy Hatcher.

        Web Inspector: console.count and console.timeEnd
        crash when inspector is opened.

        https://bugs.webkit.org/show_bug.cgi?id=29632

        * inspector/InspectorFrontend.cpp:
        (WebCore::InspectorFrontend::addMessageToConsole):

2009-09-22  Adam Barth  <abarth@webkit.org>

        Unreviewed.

        Fix bogus build fix I did last night.

        * bindings/v8/custom/V8DOMWindowCustom.cpp:
        (WebCore::V8Custom::WindowSetTimeoutImpl):

2009-09-22  Tor Arne Vestbø  <tor.arne.vestbo@nokia.com>

        Reviewed by Simon Hausmann.

        NPAPI/Mac: Don't paint plugins if we don't have a CGContextRef

        * plugins/mac/PluginViewMac.cpp:

2009-09-22  Tor Arne Vestbø  <tor.arne.vestbo@nokia.com>

        Reivewed by Simon Hausmann.

        Fix the Qt/Mac build after r48604 (Implement new QWebPageClient class)

        There's no QWidget::x11Info() on Mac, and setPlatformPluginWidget()
        takes a QWidget*, not a QWebPageClient*

        * plugins/mac/PluginViewMac.cpp:
        (WebCore::PluginView::platformStart):

2009-09-21  Adam Barth  <abarth@webkit.org>

        Attempted fix for the V8 build.

        * bindings/v8/custom/V8DOMWindowCustom.cpp:
        (WebCore::V8Custom::WindowSetTimeoutImpl):

2009-09-21  Adam Barth  <abarth@webkit.org>

        Reviewed by Sam Weinig.

        Don't re-enter JavaScript after performing access checks
        https://bugs.webkit.org/show_bug.cgi?id=29531

        Moved the access check slightly later in this functions to avoid
        re-entering the JavaScript interpreter (typically via toString)
        after performing the access check.

        I can't really think of a meaningful test for this change.  It's more
        security hygiene.

        * bindings/js/JSDOMWindowCustom.cpp:
        (WebCore::JSDOMWindow::setLocation):
        (WebCore::JSDOMWindow::open):
        (WebCore::JSDOMWindow::showModalDialog):
        * bindings/js/JSLocationCustom.cpp:
        (WebCore::JSLocation::setHref):
        (WebCore::JSLocation::replace):
        (WebCore::JSLocation::assign):
        * bindings/v8/custom/V8DOMWindowCustom.cpp:
        (WebCore::V8Custom::WindowSetTimeoutImpl):
        (WebCore::if):
        (CALLBACK_FUNC_DECL):
        (V8Custom::WindowSetLocation):
        (V8Custom::ClearTimeoutImpl):
        * bindings/v8/custom/V8LocationCustom.cpp:
        (WebCore::ACCESSOR_SETTER):
        (WebCore::CALLBACK_FUNC_DECL):

2009-09-21  Dumitru Daniliuc  <dumi@chromium.org>

        Reviewed by Eric Seidel.

        Make all write transaction start with a BEGIN IMMEDIATE command
        instead of BEGIN.

        We cannot test this change in a layout test, because in order to
        test it we need to spawn two database threads and execute
        transaction steps on these two threads in a very specific order,
        which seems impossible to do when they share the same main thread
        (as they would in a layout test). The SQLite docs and the case
        described in the bug though should be enough proof that we do have
        a problem here and that this patch will fix it.

        Relevant SQLite documentation:
        http://www.sqlite.org/lang_transaction.html
        http://www.sqlite.org/lockingv3.html#locking

        https://bugs.webkit.org/show_bug.cgi?id=29218

        * platform/sql/SQLiteTransaction.cpp:
        (WebCore::SQLiteTransaction::SQLiteTransaction): Added a readOnly
        parameter.
        (WebCore::SQLiteTransaction::begin): Changed to BEGIN IMMEDIATE
        for write transactions.
        * platform/sql/SQLiteTransaction.h:
        * storage/SQLTransaction.cpp:
        (WebCore::SQLTransaction::openTransactionAndPreflight): Passing
        the read-only flag to the SQLiteTransaction instance.

2009-09-21  Brady Eidson  <beidson@apple.com>

        Rubberstamped by Mark Rowe.

        * DerivedSources.make: Fix the Xcode build on SnowLeopard.

2009-09-15  John Abd-El-Malek  <jam@chromium.org>

        Reviewed by Darin Fisher.

        Prevent sleeps in unload handlers.
        https://bugs.webkit.org/show_bug.cgi?id=29193

        Test: fast/dom/Window/slow_unload_handler.html

        * WebCore.gypi:
        * bindings/v8/DateExtension.cpp: Added.
        (WebCore::DateExtension::DateExtension):
        (WebCore::DateExtension::get):
        (WebCore::DateExtension::setAllowSleep):
        (WebCore::DateExtension::GetNativeFunction):
        (WebCore::DateExtension::weakCallback):
        (WebCore::DateExtension::GiveEnableSleepDetectionFunction):
        (WebCore::DateExtension::OnSleepDetected):
        * bindings/v8/DateExtension.h: Added.
        * bindings/v8/V8AbstractEventListener.cpp:
        (WebCore::V8AbstractEventListener::invokeEventHandler):
        * bindings/v8/V8Proxy.cpp:
        (WebCore::V8Proxy::createNewContext):
        (WebCore::V8Proxy::registerExtensionWithV8):
        (WebCore::V8Proxy::registeredExtensionWithV8):
        * bindings/v8/V8Proxy.h:

2009-09-21  Jian Li  <jianli@chromium.org>

        Reviewed by David Levin.

        [V8] Run-time exception in onmessage handler is not forwarded to the
        worker object.
        https://bugs.webkit.org/show_bug.cgi?id=28980

        The previous fix was partially reverted due to a reliability build break
        in chromium. The break happens when an exception is thrown without
        setting a message. We need to check for this scenario and handle it.

        Tested by worker-close.html.

        * bindings/v8/V8AbstractEventListener.cpp:
        (WebCore::V8AbstractEventListener::invokeEventHandler):
        * bindings/v8/V8Utilities.cpp:
        (WebCore::reportException):

2009-09-21  Greg Bolsinga  <bolsinga@apple.com>

        Reviewed by Simon Fraser & Sam Weinig.

        Add ENABLE(ORIENTATION_EVENTS)
        https://bugs.webkit.org/show_bug.cgi?id=29508
        
        See documentation here:
        http://developer.apple.com/safari/library/documentation/AppleApplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html#//apple_ref/doc/uid/TP40006511-SW16

        * DerivedSources.make: Use new WebCore.OrientationEvents.exp file if ENABLE_ORIENTATION_EVENTS.
        Add ENABLE_ORIENTATION_EVENTS to the new ADDITIONAL_IDL_DEFINES variable that is passed to the IDL
        code generator. This is because ENABLE_ORIENTATION_EVENTS is not in FEATURE_DEFINES.
        * WebCore.OrientationEvents.exp: Added.
        * WebCore.xcodeproj/project.pbxproj: Add WebCore.OrientationEvents.exp.
        * dom/EventNames.h: Add onorientationchange.
        * html/HTMLAttributeNames.in: Ditto.
        * html/HTMLBodyElement.cpp: Handle onorientationchange properly.
        (WebCore::HTMLBodyElement::parseMappedAttribute):
        (WebCore::HTMLBodyElement::onorientationchange):
        (WebCore::HTMLBodyElement::setOnorientationchange):
        * html/HTMLBodyElement.h: Ditto.
        * html/HTMLBodyElement.idl: Ditto.
        * html/HTMLFrameSetElement.cpp: Ditto.
        (WebCore::HTMLFrameSetElement::parseMappedAttribute):
        (WebCore::HTMLFrameSetElement::onorientationchange):
        (WebCore::HTMLFrameSetElement::setOnorientationchange):
        * html/HTMLFrameSetElement.h: Ditto.
        * html/HTMLFrameSetElement.idl: Ditto.
        * page/DOMWindow.cpp: Ditto.
        (WebCore::DOMWindow::orientation): Calls up the to the Frame for the orientation value.
        (WebCore::DOMWindow::onorientationchange):
        (WebCore::DOMWindow::setOnorientationchange):
        * page/DOMWindow.h: Handle onorientationchange properly.
        * page/DOMWindow.idl: Ditto.
        * page/Frame.cpp: Ditto.
        (WebCore::Frame::Frame):
        (WebCore::Frame::sendOrientationChangeEvent):
        * page/Frame.h: Ditto.
        (WebCore::Frame::orientation):

2009-09-18  Anders Carlsson  <andersca@apple.com>

        Try fixing the build again.
        
        * platform/win/PopupMenuWin.cpp:
        (WebCore::PopupMenu::wndProc):

2009-09-21  Pavel Feldman  <pfeldman@chromium.org>

        Reviewed by Timothy Hatcher.

        Web Inspector: completions are always evaluated against
        window (discarding call frames).

        https://bugs.webkit.org/show_bug.cgi?id=29616

        * inspector/front-end/ConsoleView.js:
        (WebInspector.ConsoleView.prototype.completions):
        * inspector/front-end/InjectedScript.js:
        (InjectedScript.getCompletions):
        * inspector/front-end/ScriptsPanel.js:
        (WebInspector.ScriptsPanel.prototype.selectedCallFrameId):

2009-09-21  Brent Fulgham  <bfulgham@webkit.org>

        Unreviewed build fix for Windows (Cairo) target.

        Add stubs for SocketStream classes added in @r47788, which
        broke the WinCairo build.

        No new tests. (Build failure).

        * WebCore.vcproj/WebCore.vcproj:  Add references to new files
          to Cairo build, exclude from standard Apple build.
        * platform/network/curl/SocketStreamError.h: Added.
        * platform/network/curl/SocketStreamHandle.h: Added.
        * platform/network/curl/SocketStreamHandleCurl.cpp: Added.

2009-09-21  Pavel Feldman  <pfeldman@chromium.org>

        Reviewed by Timothy Hatcher.

        Web Inspector: Expose InspectorResource fields.

        https://bugs.webkit.org/show_bug.cgi?id=29537

        * inspector/InspectorResource.cpp:
        (WebCore::InspectorResource::sourceString):
        (WebCore::InspectorResource::resourceData):
        * inspector/InspectorResource.h:
        (WebCore::InspectorResource::requestHeaderFields):
        (WebCore::InspectorResource::responseHeaderFields):
        (WebCore::InspectorResource::responseStatusCode):
        (WebCore::InspectorResource::requestMethod):
        (WebCore::InspectorResource::requestFormData):

2009-09-21  Pavel Feldman  <pfeldman@chromium.org>

        Reviewed by Timothy Hatcher.

        Web Inspector: JS error drilling down childless node.
        No need to dispatch double click twice - it is already handled
        in TreeElement.treeElementDoubleClicked.

        https://bugs.webkit.org/show_bug.cgi?id=22144

        * inspector/front-end/ElementsTreeOutline.js:
        (WebInspector.ElementsTreeOutline):

2009-09-21  Kenneth Rohde Christiansen  <kenneth@webkit.org>

        Reviewed by Simon Hausmann.

        Implement new QWebPageClient class and let our classes
        QWebViewPrivate and QWebGraphicsItemPrivate inherit from it.

        For Qt, platformPageClient() will now return a class derived from
        the QWebPageClient, so the patch adapts our Qt hooks to go though
        this class and not depend on the QWebView.

        * WebCore.pro:
        * platform/Widget.h:
        * platform/qt/PlatformScreenQt.cpp:
        (WebCore::screenDepth):
        (WebCore::screenDepthPerComponent):
        (WebCore::screenIsMonochrome):
        (WebCore::screenRect):
        (WebCore::screenAvailableRect):
        * platform/qt/PopupMenuQt.cpp:
        (WebCore::PopupMenu::show):
        * platform/qt/QWebPageClient.h: Added.
        * platform/qt/WidgetQt.cpp:
        (WebCore::Widget::setCursor):
        * plugins/qt/PluginViewQt.cpp:
        (WebCore::PluginView::handleKeyboardEvent):
        (WebCore::PluginView::getValue):
        (WebCore::PluginView::platformStart):

2009-09-21  Pavel Feldman  <pfeldman@chromium.org>

        Reviewed by Timothy Hatcher.

        Web Inspector: Evaluating on call frame always returns "undefined".

        https://bugs.webkit.org/show_bug.cgi?id=29613

        * inspector/front-end/InjectedScript.js:
        (InjectedScript.evaluate):
        (InjectedScript._evaluateAndWrap):
        (InjectedScript._evaluateOn):
        (InjectedScript.evaluateInCallFrame):

2009-09-21  Pavel Feldman  <pfeldman@chromium.org>

        Reviewed by Timothy Hatcher.

        Web Inspector: Exception formatting is broken in console.

        https://bugs.webkit.org/show_bug.cgi?id=29608

        * inspector/front-end/ConsoleView.js:
        (WebInspector.ConsoleCommandResult):
        * inspector/front-end/InjectedScript.js:
        (InjectedScript.evaluate):
        (InjectedScript.createProxyObject):

2009-09-21  Pavel Feldman  <pfeldman@chromium.org>

        Reviewed by Timothy Hatcher.

        Web Inspector: Console object formatting is broken.

        https://bugs.webkit.org/show_bug.cgi?id=29607

        * inspector/front-end/ConsoleView.js:
        (WebInspector.ConsoleMessage.prototype._format):
        * inspector/front-end/ObjectProxy.js:
        (WebInspector.ObjectProxy.wrapPrimitiveValue):

2009-09-21  Pavel Feldman  <pfeldman@chromium.org>

        Reviewed by Timothy Hatcher.

        Web Inspector: Crash When Logging an Element Before Opening Inspector

        https://bugs.webkit.org/show_bug.cgi?id=29514

        * inspector/InspectorController.cpp:
        (WebCore::InspectorController::populateScriptObjects):

2009-09-21  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Dan Bernstein.

        Incorrect clipping with accelerated compositing content, and position:fixed
        https://bugs.webkit.org/show_bug.cgi?id=29347
        
        Fix the compositing clipping logic to behave correctly when position:fixed
        elements clip, by using the new backgroundClipRect() method to determine
        when we need to clip, and to compute the clipping layer position.

        Test: compositing/overflow/fixed-position-ancestor-clip.html

        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::updateGraphicsLayerGeometry):
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::clippedByAncestor):

2009-09-21  Nate Chapin  <japhet@chromium.org>

        Reviewed by Adam Barth.

        Add back in a special case for window.top in the V8 bindings.

        https://bugs.webkit.org/show_bug.cgi?id=29605

        Fixes LayoutTests/fast/dom/Window/window-property-shadowing.html in the Chromium port.

        * bindings/scripts/CodeGeneratorV8.pm: Ensure window.top is not marked as read only, as this breaks the shadowing disabling.

2009-09-21  Eric Carlson  <eric.carlson@apple.com>

        Reviewed by Brady Eidson.

        HTMLMediaElement: media file should not reload when page comes out of page cache
        https://bugs.webkit.org/show_bug.cgi?id=29604

        Test: media/restore-from-page-cache.html

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::userCancelledLoad): Do nothing unless the element
        is still loading. Only fire an 'emptied' event if the readyState is HAVE_NOTHING,
        otherwise set the network state to NETWORK_IDLE.

2009-09-21  Sam Weinig  <sam@webkit.org>

        Reviewed by Geoffrey "Sean/Shawn/Shaun" Garen.

        Clarify two FIXMEs.

        * bindings/js/JSHTMLCollectionCustom.cpp:
        (WebCore::getNamedItems):
        * bindings/js/JSHTMLFormElementCustom.cpp:
        (WebCore::JSHTMLFormElement::nameGetter):

2009-09-21  Darin Fisher  <darin@chromium.org>

        Reviewed by Dimitri Glazkov.

        Drop down selects fail to close when a value is selected
        https://bugs.webkit.org/show_bug.cgi?id=29582

        Implement PopupListBox::hidePopup, which was previously
        declared but unimplemented.  Removes the declaration of
        showPopup since that method is not implemented.

        PopupListBox::hidePopup takes care of hiding the popup,
        by invoking hidePopup on its parent PopupContainer, and
        then informs the PopupMenuClient that popupDidHide.
        This mimics the old behavior prior to r48370.

        * platform/chromium/PopupMenuChromium.cpp:
        (WebCore::PopupListBox::handleKeyEvent):
        (WebCore::PopupListBox::abandon):
        (WebCore::PopupListBox::acceptIndex):
        (WebCore::PopupListBox::hidePopup):

2009-09-21  Csaba Osztrogonac  <oszi@inf.u-szeged.hu>

        Rubber-stamped by Simon Hausmann.

        [Qt] Windows build fix.
        https://bugs.webkit.org/show_bug.cgi?id=29535

        * platform/network/qt/DnsPrefetchHelper.cpp: Missing #include "config.h"  added.

2009-09-21  Gustavo Noronha Silva  <gustavo.noronha@collabora.co.uk>

        Unreviewed make dist build fix. Missing files.

        * GNUmakefile.am:

2009-09-20  Adam Barth  <abarth@webkit.org>

        Reviewed by Maciej Stachowiak.

        Crash when clicking link in unload handler
        https://bugs.webkit.org/show_bug.cgi?id=29525

        Test that the first navigation always wins when the page tries to start
        a new navigation in an unload handler.

        Tests: fast/loader/unload-form-about-blank.html
               fast/loader/unload-form-post-about-blank.html
               fast/loader/unload-form-post.html
               fast/loader/unload-form.html
               fast/loader/unload-hyperlink.html
               fast/loader/unload-javascript-url.html
               fast/loader/unload-reload.html
               fast/loader/unload-window-location.html

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::loadURL):
        (WebCore::FrameLoader::loadWithDocumentLoader):

2009-09-18  Gustavo Noronha Silva  <gustavo.noronha@collabora.co.uk>

        Reviewed by Xan Lopez.

        [GTK] Sometimes crashes when a page is destroyed/loads another URL while playing video
        https://bugs.webkit.org/show_bug.cgi?id=29496

        Protect the video sink object, and destroy it in an idle callback
        to hopefully avoid a race condition that leads to a crash.

        This is already tested by media/video-seekable.html

        * platform/graphics/gtk/MediaPlayerPrivateGStreamer.cpp:
        (WebCore::idleUnref):
        (WebCore::MediaPlayerPrivate::~MediaPlayerPrivate):
        (WebCore::MediaPlayerPrivate::createGSTPlayBin):

2009-09-19  Gustavo Noronha Silva  <gustavo.noronha@collabora.co.uk>

        Unreviewed build fix for GTK+ and a blind one for Qt after r48566.

        * GNUmakefile.am:
        * WebCore.pro:

2009-09-19  Sam Weinig  <sam@webkit.org>

        Reviewed by Oliver Hunt.

        Fix for https://bugs.webkit.org/show_bug.cgi?id=29519
        Remove JSNameNodeCollection and just use StaticNodeList

        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * WebCoreSources.bkl:
        * bindings/js/JSHTMLCollectionCustom.cpp:
        (WebCore::getNamedItems):
        * bindings/js/JSHTMLFormElementCustom.cpp:
        (WebCore::JSHTMLFormElement::nameGetter):
        * bindings/js/JSNamedNodesCollection.cpp: Removed.
        * bindings/js/JSNamedNodesCollection.h: Removed.

2009-09-19  Daniel Bates  <dbates@webkit.org>

        Reviewed by Adam Barth.

        https://bugs.webkit.org/show_bug.cgi?id=29511
        
        Fixes an issue where script code that contains non-ASCII characters may bypass the 
        XSSAuditor.
        
        Before performing a comparison between the script source code and input parameters, we
        remove all non-ASCII characters, including non-printable ASCII characters from the
        script source code and input parameters.

        Tests: http/tests/security/xssAuditor/img-onerror-non-ASCII-char.html
               http/tests/security/xssAuditor/img-onerror-non-ASCII-char-default-encoding.html
               http/tests/security/xssAuditor/img-onerror-non-ASCII-char2-default-encoding.html
               http/tests/security/xssAuditor/img-onerror-non-ASCII-char2.html

        * page/XSSAuditor.cpp:
        (WebCore::isNonCanonicalCharacter): Modified to remove all non-ASCII characters,
        including non-printable ASCII characters.

2009-09-19  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Dan Bernstein.

        Incorrect animation with scale(0) transform (singular matrix)
        https://bugs.webkit.org/show_bug.cgi?id=29465
        
        Make accelerated scale() and translate() animations go through the component animation
        path (rather than just matrix animation) to avoid problems with singular scale matrices,
        and be slightly more efficient.

        Test: compositing/transitions/singular-scale-transition.html

        * platform/graphics/mac/GraphicsLayerCA.mm:
        (WebCore::getTransformFunctionValue):
        (WebCore::getValueFunctionNameForTransformOperation):

2009-09-19  Alex Milowski  <alex@milowski.com>

        Reviewed by Maciej Stachowiak.

        Adds CSS styling and basic DOM element support for MathML

        * DerivedSources.make:
          Added user stylesheet and tag factory generation

        * WebCore.xcodeproj/project.pbxproj:
          Added new DOM element code

        * css/CSSParser.cpp:
        (WebCore::CSSParser::parseAttr):
          Added check for document since stylesheet can be added before there is a document

        * css/CSSStyleSelector.cpp:
        (WebCore::CSSStyleSelector::styleForElement):
          Added check to add MathML user agent stylesheet

        * css/mathml.css: Added.
          MathML user agent stylesheet

        * dom/Document.cpp:
        (WebCore::Document::createElement):
          Added support for creation of MathML DOM objects

        * dom/Node.h:
        (WebCore::Node::isMathMLElement):
          Added check method for whether the node is a MathML node

        * mathml: Added.
        * mathml/MathMLElement.cpp: Added.
        (WebCore::MathMLElement::MathMLElement):
        (WebCore::MathMLElement::create):
        (WebCore::MathMLElement::createRenderer):
        * mathml/MathMLElement.h: Added.
        (WebCore::MathMLElement::isMathMLElement):
          MathML DOM base class


        * mathml/MathMLInlineContainerElement.cpp: Added.
        (WebCore::MathMLInlineContainerElement::MathMLInlineContainerElement):
        (WebCore::MathMLInlineContainerElement::create):
        (WebCore::MathMLInlineContainerElement::createRenderer):
        * mathml/MathMLInlineContainerElement.h: Added.
          Base class for non-text containers

        * mathml/MathMLMathElement.cpp: Added.
        (WebCore::MathMLMathElement::MathMLMathElement):
        (WebCore::MathMLMathElement::create):
        * mathml/MathMLMathElement.h: Added.
          Root Math element

        * mathml/mathtags.in: Added.
          Element list mappings

        * page/Frame.cpp:
        (WebCore::Frame::Frame):
          Added MathML name initialization
2009-09-19  Adam Barth  <abarth@webkit.org>

        Reviewed by Oliver Hunt.

        Canvas drawn with data URL image raises SECURITY_ERR when toDataUrl() called.
        https://bugs.webkit.org/show_bug.cgi?id=29305

        We need to special-case data URLs when tainting a canvas because we
        treat data URLs has having no security origin, unlike other
        browsers.  The reason we do this is to help sites avoid XSS via data
        URLs, but that consideration doesn't apply to canvas taint.

        Also, we were previously incorrectly taking document.domain state
        into account when tainting canvas.

        Tests: http/tests/security/canvas-remote-read-data-url-image.html
               http/tests/security/canvas-remote-read-data-url-svg-image.html
               http/tests/security/canvas-remote-read-remote-image-document-domain.html

        * html/canvas/CanvasRenderingContext2D.cpp:
        (WebCore::CanvasRenderingContext2D::checkOrigin):
        (WebCore::CanvasRenderingContext2D::createPattern):
        * page/SecurityOrigin.cpp:
        (WebCore::SecurityOrigin::taintsCanvas):
        * page/SecurityOrigin.h:

2009-09-18  Simon Fraser  <simon.fraser@apple.com>

        Fix stylistic issue raised in code review for previous commit.

        * rendering/RenderLayerBacking.cpp:
        (WebCore::hasNonZeroTransformOrigin):

2009-09-18  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Dan Bernstein.

        Element is misplaced during opacity transition with certain configuration of transform-origin and clipping
        https://bugs.webkit.org/show_bug.cgi?id=29495
        
        If an element has zero size, but has a transform origin with absolute values,
        then the transform origin would not be applied because it is implemented via
        anchorPoint, which is expressed as a fraction of the layer size.
        
        Work around this by artificially inflating the size of the backing store when we need to.

        Test: compositing/geometry/transfrom-origin-on-zero-size-layer.html

        * rendering/RenderLayerBacking.h:
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::RenderLayerBacking):
        Init m_artificiallyInflatedBounds to false.
        
        (WebCore::hasNonZeroTransformOrigin):
        Utility function that describes whether the transform-origin contains non-percentage
        x or y offsets.
        
        (WebCore::RenderLayerBacking::updateCompositedBounds):
        New wrapper method around setCompositedBounds() that applies the size inflation
        when necessary, setting the m_artificiallyInflatedBounds as appropriate.
        
        (WebCore::RenderLayerBacking::updateAfterLayout): Call updateCompositedBounds().
        (WebCore::RenderLayerBacking::updateGraphicsLayerGeometry): Ditto
        
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::rebuildCompositingLayerTree): Ditto
        (WebCore::RenderLayerCompositor::updateCompositingDescendantGeometry): Ditto

2009-09-18  Antti Koivisto  <antti@apple.com>

        Reviewed by Maciej Stachowiak.

        https://bugs.webkit.org/show_bug.cgi?id=29512
        Don't recalculate style when restoring from the page cache

        FrameLoaderClient::forceLayout() also forces style recalc. Instead call FrameView::forceLayout() 
        directly to update the scrollbars while keeping the existing style.
        
        Makes back/forward really fast on complex pages (in cases where page cache works).

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::commitProvisionalLoad):

2009-09-18  Oliver Hunt  <oliver@apple.com>

        Reviewed by Geoff Garen.

        Implement ES5 Object.defineProperty function
        https://bugs.webkit.org/show_bug.cgi?id=29503

        Override defineOwnProperty on JSDOMWindowShell to forward appropriately,
        and then override defineOwnProperty on JSDOMWindow to disallow cross origin
        defineOwnProperty usage.  We also override defineOwnProperty on QuarantinedObjectWrapper
        to ensure correct wrapping semantics of quarantined objects.

        One major caveat in this patch is that it currently disallows the use
        of Object.defineProperty on DOMObjects other than the window due to
        the significant work involved in correctly propagating attributes and
        ensuring correct semantics on dom objects.

        Tests: fast/js/Object-defineProperty.html
               http/tests/security/xss-DENIED-defineProperty.html

        * bindings/js/JSDOMBinding.cpp:
        (WebCore::DOMObject::defineOwnProperty):
        * bindings/js/JSDOMBinding.h:
        * bindings/js/JSDOMWindowCustom.cpp:
        (WebCore::JSDOMWindow::defineGetter):
        (WebCore::JSDOMWindow::defineSetter):
        (WebCore::JSDOMWindow::defineOwnProperty):
        * bindings/js/JSDOMWindowShell.cpp:
        (WebCore::JSDOMWindowShell::defineOwnProperty):
        (WebCore::JSDOMWindowShell::defineGetter):
        (WebCore::JSDOMWindowShell::defineSetter):
        * bindings/js/JSDOMWindowShell.h:
        * bindings/js/JSLocationCustom.cpp:
        (WebCore::JSLocation::defineGetter):
        (WebCore::JSLocationPrototype::defineGetter):
        * bindings/js/JSQuarantinedObjectWrapper.cpp:
        (WebCore::JSQuarantinedObjectWrapper::getOwnPropertyDescriptor):
        (WebCore::JSQuarantinedObjectWrapper::defineOwnProperty):
        * bindings/js/JSQuarantinedObjectWrapper.h:
        * bindings/scripts/CodeGeneratorJS.pm:

2009-09-18  Alexey Proskuryakov  <ap@apple.com>

        Reviewed by Darin Adler.

        https://bugs.webkit.org/show_bug.cgi?id=29510
        Active DOM objects should be suspended while a modal dialog is displayed

        * manual-tests/js-timers-beneath-modal-dialog.html: Added a test for JS timers.

        * page/PageGroupLoadDeferrer.cpp:
        (WebCore::PageGroupLoadDeferrer::PageGroupLoadDeferrer):
        (WebCore::PageGroupLoadDeferrer::~PageGroupLoadDeferrer):
        Match other platforms, and make Mac also suspend active DOM objects. Since a page that
        currently displays a modal dialog cannot go into page cache, there is no danger of suspending
        an object twice.        

2009-09-18  Csaba Osztrogonac  <oszi@inf.u-szeged.hu>

        Reviewed by Eric Seidel.

        [Qt] Buildfix caused by http://trac.webkit.org/changeset/48513
        https://bugs.webkit.org/show_bug.cgi?id=29351

        * bridge/qt/qt_instance.h: createRuntimeObject method renamed to newRuntimeObject.
        * bridge/runtime.h: Visibility of newRuntimeObject method modified to protected.

2009-09-18  Yury Semikhatsky  <yurys@chromium.org>

        Reviewed by Timothy Hatcher.

        Fix parameter substitutions in console.log().

        https://bugs.webkit.org/show_bug.cgi?id=29366

        * inspector/front-end/ConsoleView.js:
        (WebInspector.ConsoleMessage.prototype._format):
        * inspector/front-end/InjectedScript.js:
        (InjectedScript.getPrototypes):
        (InjectedScript.CallFrameProxy.prototype._wrapScopeChain):
        * inspector/front-end/utilities.js:
        ():

2009-09-18  Sam Weinig  <sam@webkit.org>

        Reviewed by Geoffrey Garen and Brady Eidson.

        Temporarily remove an assertion that was getting hit when going
        back to a page in the page cache while a banner in Safari was visible.
        We should re-enable this once that is fixed. See <rdar://problem/7218118>

        * page/FrameView.cpp:
        (WebCore::FrameView::scheduleRelayout):

2009-09-18  Anders Carlsson  <andersca@apple.com>

        Try fixing the build again.
        
        * platform/win/PopupMenuWin.cpp:
        (WebCore::PopupMenu::wndProc):

2009-09-18  Anders Carlsson  <andersca@apple.com>

        Fix windows build.
        
        * platform/win/PopupMenuWin.cpp:

2009-09-18  Sam Weinig  <sam@webkit.org>

        Reviewed by Gavin 'BearClaw' Barraclough.

        Convert another callback type object to store the global object
        instead of the frame.

        * bindings/js/JSCustomXPathNSResolver.cpp:
        (WebCore::JSCustomXPathNSResolver::create):
        (WebCore::JSCustomXPathNSResolver::JSCustomXPathNSResolver):
        (WebCore::JSCustomXPathNSResolver::lookupNamespaceURI):
        * bindings/js/JSCustomXPathNSResolver.h:

2009-09-18  Anders Carlsson  <andersca@apple.com>

        Reviewed by Sam Weinig.

        https://bugs.webkit.org/show_bug.cgi?id=29332
        <rdar://problem/7231652> 
        REGRESSION (r48446): While a <select> popup menu is open, the
        rest of the WebView doesn't respond to mouse move events.

        * platform/win/PopupMenuWin.cpp:
        (WebCore::translatePoint):
        New helper function that translates a point between HWND coordinates.
        
        (WebCore::PopupMenu::show):
        Protect the PopupMenu if someone removes the <select> in response to a mouse
        event. Handle WM_HOST_WINDOW_MOUSEMOVE events.
        
        (WebCore::PopupMenu::wndProc):
        in the WM_MOUSEMOVE handler, if the mouse is not over the popup, post a 
        WM_HOST_WINDOW_MOUSEMOVE event so that the host window (the WebView) gets the
        mouse move event.

2009-09-18  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Dave Hyatt.

        Compositing layers are incorrectly positioned after scrolling with position:fixed
        https://bugs.webkit.org/show_bug.cgi?id=29262
        
        When scrolling a page with compositing layers inside a position:fixed element,
        we need to update the compositing layer positions when the scroll position changes.

        Test: compositing/geometry/fixed-position.html

        * WebCore.base.exp:
        Export FrameView::scrollPositionChanged()
        
        * page/FrameView.h:
        * page/FrameView.cpp:
        (WebCore::FrameView::scrollPositionChanged):
        New method that sends the scroll event, and updates compositing layers positions if necessary.

2009-09-18  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Dave Hyatt.

        Transformed elements inside position:fixed container are clipped incorrectly
        https://bugs.webkit.org/show_bug.cgi?id=29346
        
        Fix clipping and hit testing on transformed elements inside a position:fixed element.
        Previously, the code used the overflowClipRect of the parent clip rects, but
        this is not correct for fixed postion elements. Instead, share code that is
        already present in calculateRects() to get the correct rect.

        Test: fast/overflow/position-fixed-transform-clipping.html

        * rendering/RenderLayer.h:
        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::paintLayer):
        (WebCore::RenderLayer::hitTestLayer):
        Call the new backgroundClipRect() to get the correct clipRect.
        
        (WebCore::RenderLayer::backgroundClipRect):
        New method, factored out of calculateRects(), that computes the clip rect,
        doing the right thing for fixed position elements.
        
        (WebCore::RenderLayer::calculateRects):
        Call the new backgroundClipRect() method.
        
2009-09-18  Dan Bernstein  <mitz@apple.com>

        Reviewed by Darin Adler.

        Fix <rdar://problem/7050773> REGRESSION (r40098) Crash at
        WebCore::RenderBlock::layoutBlock()
        https://bugs.webkit.org/show_bug.cgi?id=29498

        Test: accessibility/nested-layout-crash.html

        * accessibility/AccessibilityRenderObject.cpp:
        (WebCore::AccessibilityRenderObject::updateBackingStore): Changed to
            call Document::updateLayoutIgnorePendingStylesheets() instead of
            calling RenderObject::layoutIfNeeded(). The latter requires that
            there be no pending style recalc, which allows methods that call
            Document::updateLayout() to be called during layout without risking
            re-entry into layout.
        * accessibility/mac/AccessibilityObjectWrapper.mm:
        (-[AccessibilityObjectWrapper accessibilityActionNames]): Null-check
            m_object after calling updateBackingStore(), since style recalc may
            destroy the renderer, which destroys the accessibility object and
            detaches it from the wrapper.
        (-[AccessibilityObjectWrapper accessibilityAttributeNames]): Ditto.
        (-[AccessibilityObjectWrapper accessibilityAttributeValue:]): Ditto.
        (-[AccessibilityObjectWrapper accessibilityFocusedUIElement]): Ditto.
        (-[AccessibilityObjectWrapper accessibilityHitTest:]): Ditto.
        (-[AccessibilityObjectWrapper accessibilityIsAttributeSettable:]):
            Ditto.
        (-[AccessibilityObjectWrapper accessibilityIsIgnored]): Ditto.
        (-[AccessibilityObjectWrapper accessibilityParameterizedAttributeNames]):
             Ditto.
        (-[AccessibilityObjectWrapper accessibilityPerformPressAction]): Ditto.
        (-[AccessibilityObjectWrapper accessibilityPerformIncrementAction]):
            Ditto.
        (-[AccessibilityObjectWrapper accessibilityPerformDecrementAction]):
            Ditto.
        (-[AccessibilityObjectWrapper accessibilityPerformAction:]): Ditto.
        (-[AccessibilityObjectWrapper accessibilitySetValue:forAttribute:]):
            Ditto.
        (-[AccessibilityObjectWrapper accessibilityAttributeValue:forParameter:]):
            Ditto.
        (-[AccessibilityObjectWrapper accessibilityIndexOfChild:]): Ditto.
        (-[AccessibilityObjectWrapper accessibilityArrayAttributeCount:]):
            Ditto.
        (-[AccessibilityObjectWrapper accessibilityArrayAttributeValues:index:maxCount:]):
            Ditto.

2009-09-18  Fumitoshi Ukai  <ukai@chromium.org>

        Reviewed by Simon Hausmann.

        Update Qt build system for Web Socket.
        https://bugs.webkit.org/show_bug.cgi?id=29270

        * WebCore.pro:
        * platform/network/qt/SocketStreamError.h: Added.
        * platform/network/qt/SocketStreamHandle.h: Added.
        * platform/network/qt/SocketStreamHandleSoup.cpp: Added.

2009-09-18  Eric Carlson  <eric.carlson@apple.com>

        Reviewed by Darin Adler.

        NULL check HTMLMediaElement::m_playedTimeRanges.
        Fix for https://bugs.webkit.org/show_bug.cgi?id=29494

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::addPlayedRange): New. Create m_playedTimeRanges if
        necessary, add range specified.
        (WebCore::HTMLMediaElement::seek): Use addPlayedRange. 
        (WebCore::HTMLMediaElement::played): Use addPlayedRange. Change time comparison 
        to be more readable.
        (WebCore::HTMLMediaElement::updatePlayState): Ditto.
        * html/HTMLMediaElement.h:

2009-09-18  Sam Weinig  <sam@webkit.org>

        Reviewed by Adele Peterson.

        Follow up fix for https://bugs.webkit.org/show_bug.cgi?id=29276
        REGRESSION(r48334): WebKit crashes on file select by drag

        Don't use Document.elementFromPoint since it returns null if the point
        is outside the viewport.  Instead, just hit test ourselves.

        Test: fast/events/drag-file-crash.html

        * page/DragController.cpp:
        (WebCore::elementUnderMouse):
        (WebCore::DragController::tryDocumentDrag):
        (WebCore::DragController::concludeEditDrag):

2009-09-18  Darin Adler  <darin@apple.com>

        Reviewed by Sam Weinig.

        Each wrapped Objective-C object should use a single RuntimeObjectImp
        https://bugs.webkit.org/show_bug.cgi?id=29351
        rdar://problem/7142294

        * WebCore.base.exp: Added a newly-needed exported symbol.

        * bindings/objc/DOMInternal.h: Eliminated unused
        createWrapperCacheWithIntegerKeys; it has not been needed since the
        RGBColor wrappers were reworked.
        * bindings/objc/DOMInternal.mm: Ditto.

        * bridge/objc/objc_instance.h: Made the create function non-inline.
        * bridge/objc/objc_instance.mm:
        (createInstanceWrapperCache): Added. Creates an appropriate map table.
        (ObjcInstance::create): Moved here from header. Uses NSMapGet and
        NSMapInsert to cache the instance in a map table.
        (ObjcInstance::~ObjcInstance): Added a call to NSMapRemove to remove
        the instance from the map table.

        * bridge/qt/qt_instance.cpp:
        (JSC::Bindings::QtInstance::~QtInstance): Remove unneeded code to remove
        the instance from cachedObjects, which no longer exists.
        (JSC::Bindings::QtInstance::newRuntimeObject): Renamed to overload new
        bottleneck. Caching is now handled by the base class.

        * bridge/runtime.cpp:
        (JSC::Bindings::Instance::Instance): Initialize m_runtimeObject to 0.
        (JSC::Bindings::Instance::~Instance): Assert m_runtimeObject is 0.
        (JSC::Bindings::Instance::createRuntimeObject): Use m_runtimeObject
        if it's already set. Set m_runtimeObject and call addRuntimeObject
        if it's not.
        (JSC::Bindings::Instance::newRuntimeObject): Added. Virtual function,
        used only by createRuntimeObject.
        (JSC::Bindings::Instance::willDestroyRuntimeObject): Added.
        Calls removeRuntimeObject and then clears m_runtimeObject.
        (JSC::Bindings::Instance::willInvalidateRuntimeObject): Added.
        Clears m_runtimeObject.

        * bridge/runtime.h: Made createRuntimeObject non-virtual. Added
        willDestroyRuntimeObject, willInvalidateRuntimeObject,
        newRuntimeObject, and m_runtimeObject.

        * bridge/runtime_object.cpp:
        (JSC::RuntimeObjectImp::RuntimeObjectImp): Removed addRuntimeObject
        call, now handled by caller.
        (JSC::RuntimeObjectImp::~RuntimeObjectImp): Replaced removeRuntimeObject
        call with willDestroyRuntimeObject call; the latter nows calls
        removeRuntimeObject.
        (JSC::RuntimeObjectImp::invalidate): Added willInvalidateRuntimeObject
        call.

        * bridge/runtime_object.h: Made invalidate non-virtual.

2009-09-18  Kenneth Rohde Christiansen  <kenneth@webkit.org>

        Reviewed by Simon Hausmann.

        Make PlatformWindow return something else than PlatformWidget
        https://bugs.webkit.org/show_bug.cgi?id=29085

        Make platformWindow return a PlatformPageClient
        (for now typedef'ed to PlatformWidget)

        Also, change the name of platformWindow to platformPageClient()

        * accessibility/gtk/AccessibilityObjectWrapperAtk.cpp:
        (getPangoLayoutForAtk):
        * accessibility/win/AXObjectCacheWin.cpp:
        (WebCore::AXObjectCache::postPlatformNotification):
        (WebCore::AXObjectCache::handleFocusedUIElementChanged):
        * loader/EmptyClients.h:
        (WebCore::EmptyChromeClient::platformPageClient):
        * page/Chrome.cpp:
        (WebCore::Chrome::platformPageClient):
        * page/Chrome.h:
        * page/ChromeClient.h:
        * page/mac/EventHandlerMac.mm:
        (WebCore::EventHandler::wheelEvent):
        (WebCore::EventHandler::currentPlatformMouseEvent):
        (WebCore::EventHandler::sendContextMenuEvent):
        (WebCore::EventHandler::eventMayStartDrag):
        * platform/HostWindow.h:
        * platform/Widget.h:
        * platform/gtk/PlatformScreenGtk.cpp:
        (WebCore::getVisual):
        (WebCore::screenRect):
        (WebCore::screenAvailableRect):
        * platform/gtk/PopupMenuGtk.cpp:
        (WebCore::PopupMenu::show):
        * platform/gtk/ScrollViewGtk.cpp:
        (WebCore::ScrollView::platformAddChild):
        (WebCore::ScrollView::platformRemoveChild):
        (WebCore::ScrollView::visibleContentRect):
        * platform/gtk/WidgetGtk.cpp:
        (WebCore::Widget::setFocus):
        (WebCore::Widget::setCursor):
        * platform/qt/PlatformScreenQt.cpp:
        (WebCore::screenDepth):
        (WebCore::screenDepthPerComponent):
        (WebCore::screenIsMonochrome):
        (WebCore::screenRect):
        (WebCore::screenAvailableRect):
        * platform/qt/PopupMenuQt.cpp:
        (WebCore::PopupMenu::show):
        * platform/qt/WidgetQt.cpp:
        (WebCore::Widget::setCursor):
        * platform/win/PlatformScreenWin.cpp:
        (WebCore::monitorInfoForWidget):
        * platform/win/PopupMenuWin.cpp:
        (WebCore::PopupMenu::show):
        (WebCore::PopupMenu::calculatePositionAndSize):
        (WebCore::PopupMenu::wndProc):
        * platform/wx/RenderThemeWx.cpp:
        (WebCore::nativeWindowForRenderObject):
        * platform/wx/ScrollbarThemeWx.cpp:
        (WebCore::ScrollbarThemeWx::paint):
        * plugins/gtk/PluginViewGtk.cpp:
        (WebCore::PluginView::getValue):
        (WebCore::PluginView::forceRedraw):
        (WebCore::PluginView::platformStart):
        * plugins/mac/PluginViewMac.cpp:
        (WebCore::PluginView::platformStart):
        * plugins/qt/PluginViewQt.cpp:
        (WebCore::PluginView::handleKeyboardEvent):
        (WebCore::PluginView::getValue):
        (WebCore::PluginView::platformStart):
        * plugins/win/PluginViewWin.cpp:
        (WebCore::PluginView::getValue):
        (WebCore::PluginView::forceRedraw):
        (WebCore::PluginView::platformStart):

2009-09-18  Jocelyn Turcotte  <jocelyn.turcotte@nokia.com>

        Reviewed by Simon Hausmann.

        [Qt] Web inspector UI adjustments specific to the Qt platform:
        - Hide the close button
        - Hide the dock button
        - Disable the draggable toolbar

        https://bugs.webkit.org/show_bug.cgi?id=29384

        * inspector/front-end/inspector.css:
        * inspector/front-end/inspector.js:
        (WebInspector.toolbarDragStart):

2009-09-18  Joerg Bornemann  <joerg.bornemann@nokia.com>

        Reviewed by Simon Hausmann.

        QtWebKit Windows CE compile fixes

        Exclude certain pure-WINCE specific code paths from the Qt build.

        * platform/graphics/BitmapImage.h:
        * platform/graphics/FontCache.h:
        * platform/graphics/MediaPlayer.cpp:
        * platform/text/TextEncodingRegistry.cpp:
        (WebCore::buildBaseTextCodecMaps):
        (WebCore::extendTextCodecMaps):
        * plugins/PluginView.cpp:
        (WebCore::PluginView::stop): Guard this code block with NETSCAPE_PLUGIN_API as
        the corresponding PluginViewWndProc has the same guard in the header file.

2009-09-18  Steve Block  <steveblock@google.com>

        Reviewed by Dimitri Glazkov.

        Geolocation does not correctly handle Infinity for PositionOptions properties.
        https://bugs.webkit.org/show_bug.cgi?id=29099

        * bindings/js/JSGeolocationCustom.cpp: Modified.
        (WebCore::createPositionOptions): Modified. If timeout or maximumAge is positive infinity, applies these values as a special case.
        * page/PositionOptions.h: Modified.
        (WebCore::PositionOptions::hasMaximumAge): Added. Determines whether the object has a maximum age.
        (WebCore::PositionOptions::maximumAge): Modified. Asserts that the object has a maximum age.
        (WebCore::PositionOptions::clearMaximumAge): Added. Clears the maximum age.
        (WebCore::PositionOptions::setMaximumAge): Modified. Registers that the maximum age has been set.
        (WebCore::PositionOptions::PositionOptions): Modified. Registers that the maximum age has been set.

2009-09-17  Sam Weinig  <sam@webkit.org>

        Reviewed by Adele Peterson.

        Fix for https://bugs.webkit.org/show_bug.cgi?id=29276
        REGRESSION(r48334): WebKit crashes on file select by drag

        Document.elementFromPoint now takes point in client space, not page space.

        * page/DragController.cpp:
        (WebCore::DragController::tryDocumentDrag):
        (WebCore::DragController::concludeEditDrag):

2009-09-17  Albert J. Wong  <ajwong@chromium.org>

        Reviewed by David Levin.

        Reimplement default media UI for Mac Chromium to match the style
        of the Windows and Linux versions.  Also breaks the dependency
        on the internal wk* functions that were previously used to
        render the media controller widgets.
        https://bugs.webkit.org/show_bug.cgi?id=29161

        No media layout tests are currently enabled in Mac Chromium, so
        nothing needs rebaselineing, etc.

        This is a recommit of r48438 with a compile fix and merges of
        recent changes to the file.

        * css/mediaControlsChromium.css:
        * rendering/RenderThemeChromiumMac.h:
        * rendering/RenderThemeChromiumMac.mm:
        (WebCore::mediaElementParent):
        (WebCore::RenderThemeChromiumMac::extraMediaControlsStyleSheet):
        (WebCore::mediaSliderThumbImage):
        (WebCore::mediaVolumeSliderThumbImage):
        (WebCore::RenderThemeChromiumMac::paintSliderTrack):
        (WebCore::RenderThemeChromiumMac::adjustSliderThumbSize):
        (WebCore::RenderThemeChromiumMac::paintMediaButtonInternal):
        (WebCore::RenderThemeChromiumMac::paintMediaPlayButton):
        (WebCore::RenderThemeChromiumMac::paintMediaMuteButton):
        (WebCore::RenderThemeChromiumMac::paintMediaSliderTrack):
        (WebCore::RenderThemeChromiumMac::paintMediaVolumeSliderTrack):
        (WebCore::RenderThemeChromiumMac::paintMediaSliderThumb):
        (WebCore::RenderThemeChromiumMac::paintMediaVolumeSliderThumb):
        (WebCore::RenderThemeChromiumMac::paintMediaControlsBackground):
        * rendering/RenderThemeChromiumSkia.cpp:
        (WebCore::RenderThemeChromiumSkia::adjustSliderThumbSize):

2009-09-17  Brian Weinstein  <bweinstein@apple.com>

        Reviewed by Timothy Hatcher.

        The Console scope bar should have a divider between All and the other possible
        values (Errors, Warnings, Logs). It will look something like:
        
        All | Errors Warnings Logs.

        * inspector/front-end/ConsoleView.js:
        (WebInspector.ConsoleView.createDividerElement):
        (WebInspector.ConsoleView):
        * inspector/front-end/inspector.css:

2009-09-17  Sam Weinig  <sam@webkit.org>

        Reviewed by Mark Rowe.

        Remove additional references to JSVoidCallback which no longer exists.

        * DerivedSources.cpp:
        * WebCore.vcproj/WebCore.vcproj:

2009-09-17  Sam Weinig  <sam@webkit.org>

        Reviewed by Brady Eidson.

        Remove commented out onhashchange attribute now that it is implemented.

        * page/DOMWindow.idl:

2009-09-17  Anders Carlsson  <andersca@apple.com>

        Reviewed by Oliver Hunt.

        <rdar://problem/7007541> 
        CrashTracer: 4800+ crashes in Safari at com.apple.WebKit • WTF::HashTableIterator...
        
        Make RuntimeObjectImp more robust against m_instance being a null (which can happen if an OOP plug-in
        crashes while we're calling into it).
        
        * bridge/runtime_object.cpp:
        (JSC::RuntimeObjectImp::RuntimeObjectImp):
        (JSC::RuntimeObjectImp::~RuntimeObjectImp):
        (JSC::RuntimeObjectImp::invalidate):
        (JSC::RuntimeObjectImp::fallbackObjectGetter):
        (JSC::RuntimeObjectImp::fieldGetter):
        (JSC::RuntimeObjectImp::methodGetter):
        (JSC::RuntimeObjectImp::getOwnPropertySlot):
        (JSC::RuntimeObjectImp::getOwnPropertyDescriptor):
        (JSC::RuntimeObjectImp::put):
        (JSC::RuntimeObjectImp::defaultValue):
        (JSC::RuntimeObjectImp::getCallData):
        (JSC::RuntimeObjectImp::getConstructData):
        (JSC::RuntimeObjectImp::getPropertyNames):
        * bridge/runtime_object.h:
        (JSC::RuntimeObjectImp::getInternalInstance):

2009-09-17  Yury Semikhatsky  <yurys@chromium.org>

        Reviewed by Timothy Hatcher.

        Wrap primitive values (as objects) in InspectorController::wrap.

        https://bugs.webkit.org/show_bug.cgi?id=28983

        * inspector/InspectorController.cpp:
        (WebCore::InspectorController::wrapObject): objects of any type will be wrapped into proxies,
         only object proxies will have objectId.
        * inspector/front-end/ConsoleView.js:
        (WebInspector.ConsoleView.prototype.completions): there is InjectedScript.getCompletionsi
         that accepts an expression and returns possible completions. This way we don't need to wrap
         and unwrap the completions result into a proxy object.
        * inspector/front-end/InjectedScript.js:
        (InjectedScript.getCompletions):
        (InjectedScript.evaluate):
        (InjectedScript._evaluateOn):
        (InjectedScript.createProxyObject):
        * inspector/front-end/InjectedScriptAccess.js:

2009-09-17  Nate Chapin  <japhet@chromium.org>

        Reviewed by Dimitri Glazkov.

        Wrap PageTransitionEvents properly for V8's use.

        https://bugs.webkit.org/show_bug.cgi?id=29340

        Fixes Chromium's failures for LayoutTests/fast/events/pageshow-pagehide.html.

        * bindings/v8/V8DOMWrapper.cpp:
        (WebCore::V8DOMWrapper::convertEventToV8Object): Wrap PageTransitionEvents properly.

2009-09-17  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Dave Hyatt.

        Hardware-accelerated opacity transition on inline asserts
        https://bugs.webkit.org/show_bug.cgi?id=29342
        
        Remove an erroneous toRenderBox() that could be called on a RenderInline; we can just
        pass an empty size, because the box size is only required for transform animations.

        Test: compositing/transitions/opacity-on-inline.html

        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::startTransition):

2009-09-17  Adam Barth  <abarth@webkit.org>

        Reviewed by Eric Seidel.

        [V8] OwnHandle might get a weak callback after destruction
        https://bugs.webkit.org/show_bug.cgi?id=29172

        Be sure to clear out weak reference so we don't get a weak callback
        after we've destructed ourselves.  Also, removed some tricky methods
        that had no clients.

        * bindings/v8/OwnHandle.h:
        (WebCore::OwnHandle::clear):

2009-09-17  Dimitri Glazkov  <dglazkov@chromium.org>

        Unreviewed, build fix.

        [V8] Partial roll out of http://trac.webkit.org/changeset/48455 to
        fix crashes that started happening in V8Proxy::getEnteredContext().

        * bindings/v8/ScheduledAction.cpp:
        (WebCore::ScheduledAction::execute):

2009-09-17  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by Beth Dakin.

        AX: labels of checkboxes should, when hit-tested, return the checkbox
        https://bugs.webkit.org/show_bug.cgi?id=29335

        When an accessibility hit test is done and it hits the label of a control element,
        the control element should be returned instead of nothing, since the label
        itself is usually ignored.

        Test: accessibility/label-for-control-hittest.html

        * accessibility/AccessibilityObject.h:
        (WebCore::AccessibilityObject::correspondingControlForLabelElement):
        * accessibility/AccessibilityRenderObject.cpp:
        (WebCore::AccessibilityRenderObject::accessibilityIsIgnored):
        (WebCore::AccessibilityRenderObject::doAccessibilityHitTest):
        (WebCore::AccessibilityRenderObject::correspondingControlForLabelElement):
        * accessibility/AccessibilityRenderObject.h:

2009-09-17  Avi Drissman  <avi@chromium.org>

        Reviewed by Dimitri Glazkov, build fix.

        Change to make RenderThemeChromiumMac compile inside of non PLATFORM(MAC).
        https://bugs.webkit.org/show_bug.cgi?id=29243

        Covered by existing tests.

        * rendering/RenderThemeChromiumMac.mm:
        (WebCore::RenderThemeChromiumMac::paintMediaSliderTrack):

2009-09-17  Dimitri Glazkov  <dglazkov@chromium.org>

        Reviewed by Eric Seidel.

        [V8] Accessing properties/methods of an object, created with document.implementation.createDocumentType
        creates nodes that have no document (ScriptExecutionContext), which in turn produces NULL-ref crashes.
        https://bugs.webkit.org/show_bug.cgi?id=26402

        Test: fast/dom/DOMImplementation/detached-doctype.html
              fast/dom/doctype-event-listener-crash.html

        * bindings/v8/V8DOMWrapper.cpp:
        (WebCore::V8DOMWrapper::getEventListener): Added an extra NULL-check.

2009-09-17  Dan Bernstein  <mitz@apple.com>

        Reviewed by Simon Fraser.

        FontDescription.h includes RenderStyleConstants.h, which violates layering
        https://bugs.webkit.org/show_bug.cgi?id=29327

        * GNUmakefile.am: Added FontSmoothingMode.h.
        * WebCore.gypi: Added FontSmoothingMode.h.
        * WebCore.vcproj/WebCore.vcproj: Added FontSmoothingMode.h.
        * WebCore.xcodeproj/project.pbxproj: Added FontSmoothingMode.h and made
            it a private header.
        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::CSSComputedStyleDeclaration::getPropertyCSSValue): Get the
            font smoothing mode via the font description.
        * css/CSSPrimitiveValueMappings.h: Include FontSmoothingMode.h
        (WebCore::CSSPrimitiveValue::CSSPrimitiveValue): Updated for the rename
            of FontSmoothing to FontSmoothingMode.
        (WebCore::CSSPrimitiveValue::operator FontSmoothingMode): Ditto.
        * css/CSSStyleSelector.cpp:
        (WebCore::CSSStyleSelector::applyProperty): Get the font smoothing mode
            via the font description.
        * platform/graphics/FontDescription.h: Do not include
            RenderStyleConstants.h.
        (WebCore::FontDescription::fontSmoothing): Updated for the rename of
            FontSmoothing to FontSmoothingMode.
        (WebCore::FontDescription::setFontSmoothing): Ditto.
        * platform/graphics/FontSmoothingMode.h: Added.
        (WebCore::FontSmoothingMode): Moved the FontSmoothing enum from
            RenderStyleConstants here and renamed it to this.
        * rendering/style/RenderStyle.h:
        (WebCore::InheritedFlags::fontSmoothing): Removed this getter, since
            this can be accessed via the font description.
        * rendering/style/RenderStyleConstants.h: Moved the FontSmoothing enum
            from here to FontSmoothingMode.h.

2009-09-17  Kevin Ollivier  <kevino@theolliviers.com>

        wx 2.9 build fix.

        * platform/wx/wxcode/gtk/scrollbar_render.cpp:
        (wxGetGdkWindowForDC):

2009-09-16  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Dan Bernstein.

        Elements appear behind <video> when they should be in front sometimes
        https://bugs.webkit.org/show_bug.cgi?id=29314
        
        r45598 added logic that tests for overlap with <video> to determine when to throw
        a layer into compositing mode. That logic was incorrect in some cases, and this patch
        fixes it. When testing overlap, the layer needs to be composited iff some previous layer
        is composited (which adds a rect to the overlay map), and there is overlap.

        Test: compositing/geometry/video-opacity-overlay.html

        * rendering/RenderLayerCompositor.cpp:
        (WebCore::CompositingState::CompositingState):
        (WebCore::RenderLayerCompositor::computeCompositingRequirements):

2009-09-17  Avi Drissman  <avi@google.com>

        Reviewed by Darin Fisher.

        Update the Chromium Mac theming files (RenderTheme and Theme) to be
        up-to-date.
        
        https://bugs.webkit.org/show_bug.cgi?id=29243
        http://crbug.com/19604

        Covered by existing tests.

        * WebCore.gypi:
        * platform/chromium/ThemeChromiumMac.h: Added.
        (WebCore::ThemeChromiumMac::ThemeChromiumMac):
        (WebCore::ThemeChromiumMac::~ThemeChromiumMac):
        (WebCore::ThemeChromiumMac::controlRequiresPreWhiteSpace):
        * platform/chromium/ThemeChromiumMac.mm: Added.
        (WebCore::):
        (WebCore::platformTheme):
        (WebCore::controlSizeForFont):
        (WebCore::sizeFromFont):
        (WebCore::setControlSize):
        (WebCore::updateStates):
        (WebCore::inflateRect):
        (WebCore::checkboxSizes):
        (WebCore::checkboxMargins):
        (WebCore::checkboxSize):
        (WebCore::checkbox):
        (WebCore::paintCheckbox):
        (WebCore::radioSizes):
        (WebCore::radioMargins):
        (WebCore::radioSize):
        (WebCore::radio):
        (WebCore::paintRadio):
        (WebCore::buttonSizes):
        (WebCore::buttonMargins):
        (WebCore::button):
        (WebCore::paintButton):
        (WebCore::ThemeChromiumMac::baselinePositionAdjustment):
        (WebCore::ThemeChromiumMac::controlFont):
        (WebCore::ThemeChromiumMac::controlSize):
        (WebCore::ThemeChromiumMac::minimumControlSize):
        (WebCore::ThemeChromiumMac::controlBorder):
        (WebCore::ThemeChromiumMac::controlPadding):
        (WebCore::ThemeChromiumMac::inflateControlPaintRect):
        (WebCore::ThemeChromiumMac::paint):
        * platform/graphics/FloatPoint.h:
        * platform/graphics/FloatRect.h:
        * platform/graphics/FloatSize.h:
        * platform/graphics/IntRect.h:
        * rendering/RenderThemeChromiumMac.h:
        (WebCore::RenderThemeChromiumMac::supportsControlTints):
        (WebCore::RenderThemeChromiumMac::scrollbarControlSizeForPart):
        (WebCore::RenderThemeChromiumMac::supportsSelectionForegroundColors):
        * rendering/RenderThemeChromiumMac.mm:
        (-[WebCoreRenderThemeNotificationObserver systemColorsDidChange:]):
        (-[RTCMFlippedView isFlipped]):
        (-[RTCMFlippedView currentEditor]):
        (WebCore::):
        (WebCore::FlippedView):
        (WebCore::RenderTheme::themeForPage):
        (WebCore::RenderThemeChromiumMac::platformActiveListBoxSelectionForegroundColor):
        (WebCore::RenderThemeChromiumMac::platformInactiveListBoxSelectionForegroundColor):
        (WebCore::RenderThemeChromiumMac::platformInactiveListBoxSelectionBackgroundColor):
        (WebCore::RenderThemeChromiumMac::systemFont):
        (WebCore::convertNSColorToColor):
        (WebCore::menuBackgroundColor):
        (WebCore::RenderThemeChromiumMac::systemColor):
        (WebCore::RenderThemeChromiumMac::isControlStyled):
        (WebCore::RenderThemeChromiumMac::adjustRepaintRect):
        (WebCore::RenderThemeChromiumMac::inflateRect):
        (WebCore::RenderThemeChromiumMac::convertToPaintingRect):
        (WebCore::RenderThemeChromiumMac::setFontFromControlSize):
        (WebCore::RenderThemeChromiumMac::paintTextField):
        (WebCore::RenderThemeChromiumMac::paintCapsLockIndicator):
        (WebCore::RenderThemeChromiumMac::paintTextArea):
        (WebCore::RenderThemeChromiumMac::paintMenuList):
        (WebCore::TopGradientInterpolate):
        (WebCore::BottomGradientInterpolate):
        (WebCore::MainGradientInterpolate):
        (WebCore::TrackGradientInterpolate):
        (WebCore::RenderThemeChromiumMac::paintMenuListButtonGradients):
        (WebCore::RenderThemeChromiumMac::paintMenuListButton):
        (WebCore::RenderThemeChromiumMac::popupInternalPaddingLeft):
        (WebCore::RenderThemeChromiumMac::popupInternalPaddingRight):
        (WebCore::RenderThemeChromiumMac::popupInternalPaddingTop):
        (WebCore::RenderThemeChromiumMac::popupInternalPaddingBottom):
        (WebCore::RenderThemeChromiumMac::adjustMenuListButtonStyle):
        (WebCore::RenderThemeChromiumMac::adjustSliderTrackStyle):
        (WebCore::RenderThemeChromiumMac::adjustSliderThumbStyle):
        (WebCore::RenderThemeChromiumMac::paintSliderThumb):
        (WebCore::RenderThemeChromiumMac::paintSearchField):
        (WebCore::RenderThemeChromiumMac::setSearchCellState):
        (WebCore::RenderThemeChromiumMac::adjustSearchFieldStyle):
        (WebCore::RenderThemeChromiumMac::paintSearchFieldCancelButton):
        (WebCore::RenderThemeChromiumMac::adjustSearchFieldCancelButtonStyle):
        (WebCore::RenderThemeChromiumMac::adjustSearchFieldDecorationStyle):
        (WebCore::RenderThemeChromiumMac::paintSearchFieldDecoration):
        (WebCore::RenderThemeChromiumMac::adjustSearchFieldResultsDecorationStyle):
        (WebCore::RenderThemeChromiumMac::paintSearchFieldResultsDecoration):
        (WebCore::RenderThemeChromiumMac::adjustSearchFieldResultsButtonStyle):
        (WebCore::RenderThemeChromiumMac::paintSearchFieldResultsButton):
        (WebCore::mediaControllerTheme):
        (WebCore::RenderThemeChromiumMac::adjustSliderThumbSize):
        (WebCore::getMediaUIPartStateFlags):
        (WebCore::getUnzoomedRectAndAdjustCurrentContext):
        (WebCore::RenderThemeChromiumMac::paintMediaFullscreenButton):
        (WebCore::RenderThemeChromiumMac::paintMediaMuteButton):
        (WebCore::RenderThemeChromiumMac::paintMediaPlayButton):
        (WebCore::RenderThemeChromiumMac::paintMediaSeekBackButton):
        (WebCore::RenderThemeChromiumMac::paintMediaSeekForwardButton):
        (WebCore::RenderThemeChromiumMac::paintMediaSliderTrack):
        (WebCore::RenderThemeChromiumMac::paintMediaSliderThumb):
        (WebCore::RenderThemeChromiumMac::paintMediaRewindButton):
        (WebCore::RenderThemeChromiumMac::paintMediaReturnToRealtimeButton):
        (WebCore::RenderThemeChromiumMac::paintMediaControlsBackground):
        (WebCore::RenderThemeChromiumMac::paintMediaCurrentTime):
        (WebCore::RenderThemeChromiumMac::paintMediaTimeRemaining):
        (WebCore::RenderThemeChromiumMac::extraMediaControlsStyleSheet):

2009-09-16  Daniel Bates  <dbates@webkit.org>

        Reviewed by Darin Adler.

        https://bugs.webkit.org/show_bug.cgi?id=29306
        
        Fixes an issue where an attack that contains accented characters can
        bypass the XSSAuditor.
        
        XSSAuditor::decodeURL used the wrong length for the input string. 
        When the input string was decoded, the decoded result was truncated.
        Hence, XSSAuditor was comparing the source code of the script to the 
        truncated input parameters.

        Test: http/tests/security/xssAuditor/img-onerror-accented-char.html

        * page/XSSAuditor.cpp:
        (WebCore::XSSAuditor::decodeURL):

2009-09-16  Brady Eidson  <beidson@apple.com>

        Reviewed by Sam Weinig.

        Explore allowing pages with unload handlers into the Page Cache
        https://bugs.webkit.org/show_bug.cgi?id=29021

        No new tests. (All previous tests continue to pass)

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::stopLoading): If the document is in the page cache, don't fire the unload event.

2009-09-16  Adam Barth  <abarth@webkit.org>

        Reviewed by Dimitri Glazkov.

        [V8] Teach ScheduledAction::execute about isolated worlds
        https://bugs.webkit.org/show_bug.cgi?id=27703

        We now save a handle to the original context.  We use that handle to
        call the timeout in the right context / world.

        Tests: http/tests/security/isolatedWorld/window-setTimeout-function.html
               http/tests/security/isolatedWorld/window-setTimeout-string.html

        * bindings/v8/ScheduledAction.cpp:
        (WebCore::ScheduledAction::ScheduledAction):
        (WebCore::ScheduledAction::execute):
        * bindings/v8/ScheduledAction.h:
        (WebCore::ScheduledAction::ScheduledAction):
        * bindings/v8/custom/V8DOMWindowCustom.cpp:
        (WebCore::V8Custom::WindowSetTimeoutImpl):
        * bindings/v8/custom/V8WorkerContextCustom.cpp:
        (WebCore::SetTimeoutOrInterval):

2009-09-16  Adam Barth  <abarth@webkit.org>

        Reviewed by Dimitri Glazkov.

        [V8] Teach ScheduledAction::execute about isolated worlds
        https://bugs.webkit.org/show_bug.cgi?id=27703

        We now save a handle to the original context.  We use that handle to
        call the timeout in the right context / world.

        Tests: http/tests/security/isolatedWorld/window-setTimeout-function.html
               http/tests/security/isolatedWorld/window-setTimeout-string.html

        * bindings/v8/ScheduledAction.cpp:
        (WebCore::ScheduledAction::ScheduledAction):
        (WebCore::ScheduledAction::execute):
        * bindings/v8/ScheduledAction.h:
        (WebCore::ScheduledAction::ScheduledAction):
        * bindings/v8/custom/V8DOMWindowCustom.cpp:
        (WebCore::V8Custom::WindowSetTimeoutImpl):
        * bindings/v8/custom/V8WorkerContextCustom.cpp:
        (WebCore::SetTimeoutOrInterval):

2009-09-16  Sam Weinig  <sam@webkit.org>

        Reviewed by Anders Carlsson.

        Add some groups to the xcode project to make the bindings/js/ group
        a little nicer.

        * WebCore.xcodeproj/project.pbxproj:

2009-09-16  Sam Weinig  <sam@webkit.org>

        Reviewed by Anders Carlsson.

        Fix for https://bugs.webkit.org/show_bug.cgi?id=29320
        JS callback objects should store the global object

        This just changes the callback objects to store the global object instead
        of the frame. A follow up patch will change them to store the 'current' 
        global object instead of the lexical or dynamic.

        * DerivedSources.make: Remove unused VoidCallback.
        * WebCore.xcodeproj/project.pbxproj: Ditto.
        * bindings/js/JSCustomPositionCallback.cpp:
        (WebCore::JSCustomPositionCallback::JSCustomPositionCallback):
        (WebCore::JSCustomPositionCallback::handleEvent):
        * bindings/js/JSCustomPositionCallback.h:
        (WebCore::JSCustomPositionCallback::create):
        * bindings/js/JSCustomPositionErrorCallback.cpp:
        (WebCore::JSCustomPositionErrorCallback::JSCustomPositionErrorCallback):
        (WebCore::JSCustomPositionErrorCallback::handleEvent):
        * bindings/js/JSCustomPositionErrorCallback.h:
        (WebCore::JSCustomPositionErrorCallback::create):
        * bindings/js/JSCustomSQLStatementCallback.cpp:
        (WebCore::JSCustomSQLStatementCallback::JSCustomSQLStatementCallback):
        (WebCore::JSCustomSQLStatementCallback::handleEvent):
        * bindings/js/JSCustomSQLStatementCallback.h:
        (WebCore::JSCustomSQLStatementCallback::create):
        * bindings/js/JSCustomSQLStatementErrorCallback.cpp:
        (WebCore::JSCustomSQLStatementErrorCallback::JSCustomSQLStatementErrorCallback):
        (WebCore::JSCustomSQLStatementErrorCallback::handleEvent):
        * bindings/js/JSCustomSQLStatementErrorCallback.h:
        (WebCore::JSCustomSQLStatementErrorCallback::create):
        * bindings/js/JSCustomSQLTransactionCallback.cpp:
        (WebCore::JSCustomSQLTransactionCallback::Data::Data):
        (WebCore::JSCustomSQLTransactionCallback::Data::globalObject):
        (WebCore::JSCustomSQLTransactionCallback::JSCustomSQLTransactionCallback):
        (WebCore::JSCustomSQLTransactionCallback::handleEvent):
        * bindings/js/JSCustomSQLTransactionCallback.h:
        (WebCore::JSCustomSQLTransactionCallback::create):
        * bindings/js/JSCustomSQLTransactionErrorCallback.cpp:
        (WebCore::JSCustomSQLTransactionErrorCallback::JSCustomSQLTransactionErrorCallback):
        (WebCore::JSCustomSQLTransactionErrorCallback::handleEvent):
        * bindings/js/JSCustomSQLTransactionErrorCallback.h:
        (WebCore::JSCustomSQLTransactionErrorCallback::create):
        * bindings/js/JSCustomVoidCallback.cpp:
        (WebCore::JSCustomVoidCallback::JSCustomVoidCallback):
        (WebCore::JSCustomVoidCallback::handleEvent):
        * bindings/js/JSCustomVoidCallback.h:
        (WebCore::JSCustomVoidCallback::create):
        * bindings/js/JSDatabaseCustom.cpp:
        (WebCore::JSDatabase::changeVersion):
        (WebCore::createTransaction):
        (WebCore::JSDatabase::transaction):
        (WebCore::JSDatabase::readTransaction):
        * bindings/js/JSGeolocationCustom.cpp:
        (WebCore::createPositionCallback):
        (WebCore::createPositionErrorCallback):
        (WebCore::JSGeolocation::getCurrentPosition):
        (WebCore::JSGeolocation::watchPosition):
        * bindings/js/JSSQLTransactionCustom.cpp:
        (WebCore::JSSQLTransaction::executeSql):

2009-09-15  Kent Tamura  <tkent@chromium.org>

        Reviewed by Eric Seidel.

        <input maxlength=> should restrict only values specified by users.
        https://bugs.webkit.org/show_bug.cgi?id=21271

        * dom/InputElement.cpp:
        (WebCore::InputElement::setValueFromRenderer):
        (WebCore::InputElement::sanitizeValue):
        (WebCore::InputElement::sanitizeUserInputValue): Rename from constrainValue().
        (WebCore::InputElement::handleBeforeTextInsertedEvent):
        (WebCore::InputElement::updateValueIfNeeded):
        * dom/InputElement.h:
        * html/HTMLInputElement.cpp:
        (WebCore::HTMLInputElement::setInputType):
        (WebCore::HTMLInputElement::value):
        (WebCore::HTMLInputElement::setValue):
        (WebCore::HTMLInputElement::sanitizeValue):
        * html/HTMLInputElement.h:
        * rendering/RenderTextControlSingleLine.cpp:
        (WebCore::RenderTextControlSingleLine::subtreeHasChanged):
        * wml/WMLInputElement.cpp:
        (WebCore::WMLInputElement::constrainValue):
        * wml/WMLInputElement.h:
        (WebCore::WMLInputElement::sanitizeValue):

2009-09-16  Enrica Casucci  <enrica@apple.com>

        Reviewed by Eric Seidel.

        Reorganizing helper functions in htmlediting.h to group them by type of object they return/operate upon.
        https://bugs.webkit.org/show_bug.cgi?id=29319

        * editing/IndentOutdentCommand.cpp:
        Removed implementation of isAtUnsplittableElement.

        * editing/IndentOutdentCommand.h:
        Removed member function isAtUnsplittableElement, because it was not class specific and belonged logically among the helper functions.

        * editing/htmlediting.cpp:
        (WebCore::isAtUnsplittableElement): added. The code was taken from IndentOutdentCommand.

        * editing/htmlediting.h:
        Reordered functions to group them by type of object returned or operate upon.
        Added comments.
        Added isAtUnsplittableElement declaration.

2009-09-16  Geoffrey Garen  <ggaren@apple.com>

        Reviewed by Sam Weinig and Anders Carlsson.

        Removed some vestigial and potentially crashy code that makes consolidating
        event listeners hard.

        * dom/Node.cpp:
        (WebCore::Node::addEventListener): No need to limit when event listeners
        can be added. Other EventTargets don't do this.
        
        Also, check for null when accessing document(). Technically, the JS bindings
        do this check for us, but let's not rely on that.

2009-09-16  Anders Carlsson  <andersca@apple.com>

        Reviewed by Adam Roben.

        <rdar://problem/7155710>
        HTML selects on windows cause containing window to become inactive when opened
        
        Redo the way we handle events when a popup menu is shown, based on
        http://blogs.msdn.com/oldnewthing/archive/2004/08/20/217684.aspx
        
        Since a non-active window can't capture the mouse, we use the owning window 
        (the WebView) as the capture window. We then run a recursive message pump that 
        forwards all mouse and keyboard events to the popup menu.
        
        * platform/PopupMenu.h:
        * platform/win/PopupMenuWin.cpp:
        (WebCore::PopupMenu::PopupMenu):
        (WebCore::PopupMenu::show):
        (WebCore::PopupMenu::hide):
        (WebCore::PopupMenu::wndProc):

2009-09-16  Dan Bernstein  <mitz@apple.com>

        Reviewed by Ada Chan.

        Speculative fix for
        <rdar://problem/6937089> Crashes at RenderWidget::destroy()

        * rendering/RenderWidget.cpp:
        (WebCore::RenderWidget::destroy): Avoid calling renderArena() if node()
        is null. Add two assertions that can help determine how this crash
        happens (in particular, whether node() becomes null during destroy() or
        it is null before destroy() is called).

2009-09-16  Beth Dakin  <bdakin@apple.com>

        Speculative build fix.

        * css/CSSStyleSelector.cpp:
        (WebCore::CSSStyleSelector::applyProperty):

2009-09-16  Beth Dakin  <bdakin@apple.com>

        Reviewed by Darin Adler.

        Fix for <rdar://problem/7083741> Implement a CSS extension to 
        adjust sub-pixel anti-aliasing for text
        -and corresponding-
        https://bugs.webkit.org/show_bug.cgi?id=29291

        Added tests:
        * fast/css/font-smoothing.html: Added.
        * fast/css/parsing-webkit-font-smoothing.html: Added.

        This patch adds a new CSS property called -webkit-font-smoothing 
        that accepts the following as valid input: auto | none | 
        antialiased | subpixel-antialiased

        Return appropriate computed style for -webkit-font-smoothing
        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::):
        (WebCore::CSSComputedStyleDeclaration::getPropertyCSSValue):

        Add a case for CSSPropertyWebkitFontSmoothing, and accept valid 
        input.
        * css/CSSParser.cpp:
        (WebCore::CSSParser::parseValue):

        Add mappings for FontSmoothing to the right CSS values.
        * css/CSSPrimitiveValueMappings.h:
        (WebCore::CSSPrimitiveValue::CSSPrimitiveValue):
        (WebCore::CSSPrimitiveValue::operator FontSmoothing):

        Add -webkit-font-smoothing
        * css/CSSPropertyNames.in:

        Set fontSmoothing on the FontDescription.
        * css/CSSStyleSelector.cpp:
        (WebCore::CSSStyleSelector::applyProperty):

        Add antialiased and subpixel-antialiased as possible new CSS 
        values.
        * css/CSSValueKeywords.in:
        Store the font smoothing CSS value in the FontDescription.
        * platform/graphics/FontDescription.h:
        (WebCore::FontDescription::FontDescription):
        (WebCore::FontDescription::fontSmoothing):
        (WebCore::FontDescription::setFontSmoothing):
        (WebCore::FontDescription::operator==):

        Call setShouldAntialias() and setShouldUseSmoothing() appropriately 
        based on the CSS fontSmoothing() value.
        * platform/graphics/mac/FontMac.mm:
        (WebCore::Font::drawGlyphs):
        * platform/graphics/win/FontCGWin.cpp:
        (WebCore::Font::drawGlyphs):

        New function fontSmoothing()
        * rendering/style/RenderStyle.h:
        (WebCore::InheritedFlags::fontSmoothing):

        New enum FontSmoothing.
        * rendering/style/RenderStyleConstants.h:
        (WebCore::):

2009-09-16  Yury Semikhatsky  <yurys@chromium.org>

        Reviewed by Timothy Hatcher.

        Remove style property if empty string is entered.

        https://bugs.webkit.org/show_bug.cgi?id=29163

        * inspector/front-end/ElementsTreeOutline.js:
        (WebInspector.ElementsTreeOutline.prototype._onmouseout): fixed null pointer exception
        * inspector/front-end/InjectedScript.js:
        (InjectedScript.applyStyleText): if styletext to apply is empty it will return an array to confirm the property removal
        * inspector/front-end/StylesSidebarPane.js:
        (WebInspector.StylePropertyTreeElement.prototype.):
        (WebInspector.StylePropertyTreeElement.prototype):

2009-09-16  Yury Semikhatsky  <yurys@chromium.org>

        Reviewed by Timothy Hatcher.

        Always reset m_implicitShorthand to false after parsing
        background-repeat style property otherwise properties
        following after it may be erroneously marked as implicit.

        https://bugs.webkit.org/show_bug.cgi?id=28972
        https://bugs.webkit.org/show_bug.cgi?id=28973

        Test: fast/backgrounds/repeat/margin-shorthand.html

        * css/CSSParser.cpp:
        (WebCore::CSSParser::parseValue):

2009-09-16  Carol Szabo  <carol.szabo@nokia.com>

        Reviewed by Alexey Proskuryakov.

        Incorrect behavior of XMLHttpRequest::getAllResponseHeaders and
        XMLHttpRequest::getResponseHeader in the
        HEADERS_RECEIVED readyState.
        https://bugs.webkit.org/show_bug.cgi?id=29121

        Tests: http/tests/xmlhttprequest/getAllResponseHeaders.html
               http/tests/xmlhttprequest/getResponseHeader.html

        * xml/XMLHttpRequest.cpp:
        (WebCore::XMLHttpRequest::getAllResponseHeaders):
        (WebCore::XMLHttpRequest::getResponseHeader):
        Changed the minimum valid state from LOADING to HEADERS_RECEIVED.

2009-09-16  Vitaly Repeshko  <vitalyr@chromium.org>

        Reviewed by Dimitri Glazkov.

        [V8] Fix style violation in V8AbstractEventListener.
        https://bugs.webkit.org/show_bug.cgi?id=29303

        * bindings/v8/V8AbstractEventListener.h:
        (WebCore::V8AbstractEventListener::operator==):

2009-09-16  Patrick Mueller  <Patrick_Mueller@us.ibm.com>

        Reviewed by Timothy Hatcher.

        Add Watch Expression support to inspector
        https://bugs.webkit.org/show_bug.cgi?id=27514

        Manual test added.

        * English.lproj/localizedStrings.js:
        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * inspector/front-end/ConsoleView.js:
        (WebInspector.ConsoleView.prototype.completions):
        (WebInspector.ConsoleView.prototype.evalInInspectedWindow):
        (WebInspector.ConsoleView.prototype._enterKeyPressed):
        * inspector/front-end/ObjectPropertiesSection.js:
        (WebInspector.ObjectPropertiesSection.prototype.update.callback):
        (WebInspector.ObjectPropertiesSection.prototype.update):
        (WebInspector.ObjectPropertiesSection.prototype.updateProperties):
        (WebInspector.ObjectPropertiesSection.CompareProperties):
        (WebInspector.ObjectPropertyTreeElement.prototype.onpopulate.callback):
        (WebInspector.ObjectPropertyTreeElement.prototype.onpopulate):
        (WebInspector.ObjectPropertyTreeElement.prototype.update):
        * inspector/front-end/ScriptsPanel.js:
        (WebInspector.ScriptsPanel):
        (WebInspector.ScriptsPanel.prototype.reset):
        (WebInspector.ScriptsPanel.prototype._callFrameSelected):
        * inspector/front-end/WatchExpressionsSidebarPane.js: Added.
        (WebInspector.WatchExpressionsSidebarPane):
        (WebInspector.WatchExpressionsSidebarPane.prototype.refreshExpressions):
        (WebInspector.WatchExpressionsSection):
        (WebInspector.WatchExpressionsSection.prototype.update):
        (WebInspector.WatchExpressionsSection.prototype.addExpression):
        (WebInspector.WatchExpressionsSection.prototype.updateExpression):
        (WebInspector.WatchExpressionsSection.prototype.findAddedTreeElement):
        (WebInspector.WatchExpressionsSection.prototype.loadSavedExpressions):
        (WebInspector.WatchExpressionsSection.prototype.saveExpressions):
        (WebInspector.WatchExpressionsSection.CompareProperties):
        (WebInspector.WatchExpressionTreeElement):
        (WebInspector.WatchExpressionTreeElement.prototype.update):
        (WebInspector.WatchExpressionTreeElement.prototype._deleteButtonClicked):
        (WebInspector.WatchExpressionTreeElement.prototype.startEditing):
        (WebInspector.WatchExpressionTreeElement.prototype.editingCancelled):
        (WebInspector.WatchExpressionTreeElement.prototype.applyExpression):
        * inspector/front-end/WebKit.qrc:
        * inspector/front-end/inspector.css:
        * inspector/front-end/inspector.html:
        * manual-tests/inspector/debugger-watch-expressions.html: Added.

2009-09-16  Greg Bolsinga  <bolsinga@apple.com>

        Add ENABLE(INSPECTOR)
        https://bugs.webkit.org/show_bug.cgi?id=29260

        Reviewed by David Kilzer.

        No new tests. (No change in default behavior.)

        * DerivedSources.make: Use new WebCore.Inspector.exp file if ENABLE_DRAG_SUPPORT.
        * WebCore.base.exp: Move Inspector only exports to WebCore.Inspector.exp.
        * WebCore.xcodeproj/project.pbxproj: Add WebCore.Inspector.exp.
        * bindings/js/JSDOMWindowBase.cpp: Use ENABLE(INSPECTOR) where applicable.
        (WebCore::JSDOMWindowBase::supportsProfiling):
        * bindings/js/JSInspectedObjectWrapper.cpp: Wrap entire file in ENABLE(INSPECTOR).
        * bindings/js/JSInspectorBackendCustom.cpp: Ditto.
        * bindings/js/JSInspectorCallbackWrapper.cpp: Ditto.
        * bindings/js/ScriptObject.cpp: Use ENABLE(INSPECTOR) where applicable.
        * bindings/js/ScriptObject.h: Ditto.
        * bindings/js/ScriptObjectQuarantine.cpp: Wrap entire file in ENABLE(INSPECTOR).
        * dom/Document.cpp: Use ENABLE(INSPECTOR) where applicable.
        (WebCore::Document::recalcStyle):
        (WebCore::Document::addMessage):
        (WebCore::Document::resourceRetrievedByXMLHttpRequest):
        (WebCore::Document::scriptImported):
        * dom/Document.h: Ditto.
        * dom/Node.cpp: Ditto.
        (WebCore::Node::dispatchGenericEvent):
        * dom/ScriptExecutionContext.h: Ditto.
        (WebCore::):
        * html/HTMLDocument.cpp: Ditto.
        (WebCore::HTMLDocument::createTokenizer):
        * html/HTMLTokenizer.cpp: Ditto.
        (WebCore::HTMLTokenizer::write):
        * inspector/ConsoleMessage.cpp: Ditto.
        (WebCore::ConsoleMessage::ConsoleMessage):
        (WebCore::ConsoleMessage::isEqual):
        * inspector/ConsoleMessage.h: Ditto.
        * inspector/DOMDispatchTimelineItem.cpp: Wrap entire file in ENABLE(INSPECTOR).
        * inspector/InspectorBackend.cpp: Ditto.
        * inspector/InspectorController.cpp: Ditto.
        * inspector/InspectorDOMAgent.cpp: Ditto.
        * inspector/InspectorDOMStorageResource.cpp: Ditto.
        * inspector/InspectorDatabaseResource.cpp: Ditto.
        * inspector/InspectorFrontend.cpp: Ditto.
        * inspector/InspectorResource.cpp: Ditto.
        * inspector/InspectorTimelineAgent.cpp: Ditto.
        * inspector/TimelineItem.cpp: Ditto.
        * loader/FrameLoader.cpp: Use ENABLE(INSPECTOR) where applicable.
        (WebCore::FrameLoader::detachFromParent):
        (WebCore::FrameLoader::continueLoadAfterNavigationPolicy):
        (WebCore::FrameLoader::loadedResourceFromMemoryCache):
        (WebCore::FrameLoader::dispatchWindowObjectAvailable):
        (WebCore::FrameLoader::dispatchDidCommitLoad):
        (WebCore::FrameLoader::dispatchAssignIdentifierToInitialRequest):
        (WebCore::FrameLoader::dispatchWillSendRequest):
        (WebCore::FrameLoader::dispatchDidReceiveResponse):
        (WebCore::FrameLoader::dispatchDidReceiveContentLength):
        (WebCore::FrameLoader::dispatchDidFinishLoading):
        * page/Chrome.cpp: Ditto.
        (WebCore::Chrome::mouseDidMoveOverElement):
        * page/Console.cpp: Ditto.
        (WebCore::Console::addMessage):
        (WebCore::Console::count):
        (WebCore::Console::profile):
        (WebCore::Console::profileEnd):
        (WebCore::Console::time):
        (WebCore::Console::timeEnd):
        (WebCore::Console::group):
        (WebCore::Console::groupEnd):
        * page/ContextMenuController.cpp: Ditto.
        (WebCore::ContextMenuController::handleContextMenuEvent):
        (WebCore::ContextMenuController::contextMenuItemSelected):
        * page/DOMWindow.cpp: Ditto.
        (WebCore::DOMWindow::sessionStorage):
        (WebCore::DOMWindow::localStorage):
        * page/EventHandler.cpp: Ditto.
        (WebCore::EventHandler::handleMousePressEvent):
        * page/FrameView.cpp: Ditto.
        (WebCore::FrameView::layout):
        (WebCore::FrameView::paintContents):
        * page/FrameView.h: Ditto.
        * page/Page.cpp: Ditto.
        (WebCore::Page::Page):
        (WebCore::Page::~Page):
        * page/Page.h: Ditto.
        * platform/ContextMenu.cpp: Ditto.
        (WebCore::ContextMenu::checkOrEnableIfNeeded):
        * platform/ContextMenuItem.h: Ditto.
        (WebCore::):
        * storage/Database.cpp: Ditto.
        (WebCore::Database::openDatabase):
        * workers/WorkerContext.cpp: Ditto.
        (WebCore::WorkerContext::importScripts):
        * xml/XMLHttpRequest.cpp: Ditto.
        (WebCore::XMLHttpRequest::didFinishLoading):

2009-09-16  Greg Bolsinga  <bolsinga@apple.com>

        Add ENABLE(CONTEXT_MENUS)
        https://bugs.webkit.org/show_bug.cgi?id=29225

        Reviewed by David Kilzer.

        No new tests. (No change in default behavior.)

        * DerivedSources.make: Use new WebCore.ContextMenus.exp file if ENABLE_CONTEXT_MENUS.
        * WebCore.base.exp: Move ContextMenu only exports to WebCore.ContextMenus.exp.
        * WebCore.xcodeproj/project.pbxproj: Add WebCore.ContextMenus.exp.
        * dom/Node.cpp: Use ENABLE(CONTEXT_MENUS) where applicable.
        (WebCore::Node::defaultEventHandler):
        * loader/EmptyClients.h: Ditto.
        * page/ContextMenuController.cpp: Wrap entire file in ENABLE(CONTEXT_MENUS).
        * page/EventHandler.cpp: Use ENABLE(CONTEXT_MENUS) where applicable.
        * page/EventHandler.h: Ditto.
        * page/Page.cpp: Ditto.
        (WebCore::Page::Page):
        * page/Page.h: Ditto.
        * page/mac/EventHandlerMac.mm: Ditto.
        * page/mac/WebCoreViewFactory.h: Ditto.
        * platform/ContextMenu.cpp: Wrap entire file in ENABLE(CONTEXT_MENUS).
        * platform/LocalizedStrings.h: Use ENABLE(CONTEXT_MENUS) where applicable.
        * platform/mac/ContextMenuItemMac.mm: Wrap entire file in ENABLE(CONTEXT_MENUS).
        * platform/mac/ContextMenuMac.mm: Ditto.
        * platform/mac/LocalizedStringsMac.mm: Use ENABLE(CONTEXT_MENUS) where applicable.
        * svg/graphics/SVGImage.cpp: Ditto.
        (WebCore::SVGImage::dataChanged):

2009-09-16  Dave Hyatt  <hyatt@apple.com>

        Reviewed by Adam Roben.

        Clean up invalidation for repainting.  Hoist the dirty rect intersection test in ScrollViewMac up
        into ScrollView so that all platforms do it.
        
        Patch deferred repaints in FrameView::repaintContentRectangle to only add the visible portion of
        the rectangle for repainting.

        * page/FrameView.cpp:
        (WebCore::FrameView::repaintContentRectangle):
        * platform/ScrollView.cpp:
        (WebCore::ScrollView::repaintContentRectangle):
        * platform/mac/ScrollViewMac.mm:
        (WebCore::ScrollView::platformRepaintContentRectangle):

2009-09-16  Greg Bolsinga  <bolsinga@apple.com>

        Add ENABLE(DRAG_SUPPORT)
        https://bugs.webkit.org/show_bug.cgi?id=29233

        Reviewed by David Kilzer.

        No new tests. (No change in default behavior.)

        * DerivedSources.make: Use new WebCore.DragSupport.exp file if ENABLE_DRAG_SUPPORT.
        * WebCore.base.exp: Move Drag Support only exports to WebCore.DragSupport.exp.
        * WebCore.xcodeproj/project.pbxproj: Add WebCore.DragSupport.exp.
        * dom/Clipboard.h: Use ENABLE(DRAG_SUPPORT) where applicable.
        * loader/EmptyClients.h: Ditto.
        * page/DragController.cpp: Wrap entire file in ENABLE(DRAG_SUPPORT).
        * page/EventHandler.cpp: Use ENABLE(DRAG_SUPPORT) where applicable.
        (WebCore::EventHandler::EventHandler):
        (WebCore::EventHandler::clear):
        (WebCore::EventHandler::handleMousePressEvent):
        (WebCore::EventHandler::handleMouseReleaseEvent):
        (WebCore::EventHandler::handleMouseMoveEvent):
        * page/EventHandler.h: Ditto.
        * page/Page.cpp: Ditto.
        (WebCore::Page::Page):
        * page/Page.h: Ditto.
        * page/mac/DragControllerMac.mm: Wrap entire file in ENABLE(DRAG_SUPPORT).
        * page/mac/EventHandlerMac.mm: Use ENABLE(DRAG_SUPPORT) where applicable.
        (WebCore::EventHandler::passSubframeEventToSubframe):
        * platform/DragData.cpp: Wrap entire file in ENABLE(DRAG_SUPPORT).
        * platform/DragImage.cpp: Wrap entire file in ENABLE(DRAG_SUPPORT).
        * platform/mac/ClipboardMac.h: Use ENABLE(DRAG_SUPPORT) where applicable.
        * platform/mac/ClipboardMac.mm: Ditto.
        * platform/mac/DragDataMac.mm: Wrap entire file in ENABLE(DRAG_SUPPORT).
        * platform/mac/DragImageMac.mm: Wrap entire file in ENABLE(DRAG_SUPPORT).
        * rendering/RenderLayer.cpp: Use ENABLE(DRAG_SUPPORT) where applicable.
        (WebCore::RenderLayer::autoscroll):
        * rendering/RenderObject.cpp: Ditto.
        * rendering/RenderObject.h: Ditto.
        * svg/graphics/SVGImage.cpp: Ditto.
        (WebCore::SVGImage::dataChanged):

2009-09-16  Kevin Ollivier  <kevino@theolliviers.com>

        wxMSW build fix after adding support for high resolution times in Win.

        * page/Settings.cpp:
        * page/Settings.h:

2009-09-16  Vitaly Repeshko  <vitalyr@chromium.org>

        Reviewed by Dimitri Glazkov.

        [V8] Added operator==() to event listeners. This fixes V8 bindings
        build broken in http://trac.webkit.org/changeset/48402.
        https://bugs.webkit.org/show_bug.cgi?id=29298

        * bindings/v8/V8AbstractEventListener.cpp:
        (WebCore::V8AbstractEventListener::V8AbstractEventListener): Now
        uses JSEventListenerType.
        * bindings/v8/V8AbstractEventListener.h:
        (WebCore::V8AbstractEventListener::operator==): Only compares
        pointers since we create at most one wrapper for a JS object.

2009-09-16  Gustavo Noronha Silva  <gustavo.noronha@collabora.co.uk>

        Reviewed by Xan Lopez.

        [GTK] Crash when visiting http://flipper.googlelabs.com/
        https://bugs.webkit.org/show_bug.cgi?id=29293

        Check type for being null or empty before looking it up in the
        hash of supported types.

        Tested by http/tests/loading/redirect-with-no-location-crash.html

        * platform/graphics/gtk/MediaPlayerPrivateGStreamer.cpp:
        (WebCore::MediaPlayerPrivate::supportsType):

2009-09-15  Geoffrey Garen  <ggaren@apple.com>

        Reviewed by Sam Weinig.
        
        Removed the notion of "disconnected nodes with event listeners" because
        it was vestigial. The reference cycle it tried to solve was solved another
        way in https://bugs.webkit.org/show_bug.cgi?id=21260.

        * dom/Document.cpp:
        (WebCore::Document::removeAllEventListeners):
        * dom/Document.h:
        * dom/Node.cpp:
        (WebCore::Node::~Node):
        (WebCore::Node::insertedIntoDocument):
        (WebCore::Node::removedFromDocument):
        (WebCore::Node::willMoveToNewOwnerDocument):
        (WebCore::Node::didMoveToNewOwnerDocument):
        (WebCore::Node::addEventListener):
        (WebCore::Node::removeEventListener):
        (WebCore::Node::clearAttributeEventListener):

2009-09-15  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by Beth Dakin.

        WAI-ARIA: add support for ranges, including the progressbar, slider, and spinbutton roles
        https://bugs.webkit.org/show_bug.cgi?id=28841

        Allow certain ARIA roles to change value with AXIncrement and AXDecrement. 
        Consolidate increment/decrement/changeValue methods. 

        Test: accessibility/aria-slider-value-change.html

        * accessibility/AccessibilityObject.cpp:
        * accessibility/AccessibilityRenderObject.cpp:
        (WebCore::AccessibilityRenderObject::increment):
        (WebCore::AccessibilityRenderObject::decrement):
        (WebCore::AccessibilityRenderObject::changeValueByPercent):
        (WebCore::AccessibilityRenderObject::setValue):
        (WebCore::AccessibilityRenderObject::canSetFocusAttribute):
        * accessibility/AccessibilityRenderObject.h:
        * accessibility/AccessibilitySlider.cpp:
        * accessibility/AccessibilitySlider.h:
        * dom/Element.cpp:
        (WebCore::Element::updateAfterAttributeChanged):

2009-09-15  Geoffrey Garen  <ggaren@apple.com>

        Reviewed by Sam Weinig.

        Removed the jsEventListeners set from JSDOMGlobalObject, to simplify
        creation and destruction of JSDOMGlobalObject and event listeners.
        
        Added an abstract operator==() to EventListener, to replace the
        jsEventListeners set's role in determining if two event listeners are
        equal from the DOM's perspective.
        
        Added a type field to EventListener, and casting operations, to support
        operator==() and other abstract operations.

        * WebCore.xcodeproj/project.pbxproj:
        * bindings/js/JSAbstractWorkerCustom.cpp:
        (WebCore::JSAbstractWorker::addEventListener):
        (WebCore::JSAbstractWorker::removeEventListener):
        * bindings/js/JSDOMApplicationCacheCustom.cpp:
        (WebCore::JSDOMApplicationCache::addEventListener):
        (WebCore::JSDOMApplicationCache::removeEventListener):
        * bindings/js/JSDOMGlobalObject.cpp:
        * bindings/js/JSDOMGlobalObject.h:
        * bindings/js/JSDOMWindowCustom.cpp:
        (WebCore::JSDOMWindow::addEventListener):
        (WebCore::JSDOMWindow::removeEventListener):
        * bindings/js/JSDesktopNotificationsCustom.cpp:
        (WebCore::JSNotification::addEventListener):
        (WebCore::):
        * bindings/js/JSEventListener.cpp:
        (WebCore::JSEventListener::JSEventListener):
        (WebCore::JSEventListener::~JSEventListener):
        (WebCore::JSEventListener::markJSFunction):
        (WebCore::JSEventListener::handleEvent):
        (WebCore::JSEventListener::reportError):
        (WebCore::JSEventListener::operator==):
        * bindings/js/JSEventListener.h:
        (WebCore::JSEventListener::cast):
        * bindings/js/JSEventSourceCustom.cpp:
        (WebCore::JSEventSource::addEventListener):
        (WebCore::JSEventSource::removeEventListener):
        * bindings/js/JSMessagePortCustom.cpp:
        (WebCore::JSMessagePort::addEventListener):
        (WebCore::JSMessagePort::removeEventListener):
        * bindings/js/JSNodeCustom.cpp:
        (WebCore::JSNode::addEventListener):
        (WebCore::JSNode::removeEventListener):
        * bindings/js/JSSVGElementInstanceCustom.cpp:
        (WebCore::JSSVGElementInstance::addEventListener):
        (WebCore::JSSVGElementInstance::removeEventListener):
        * bindings/js/JSWorkerContextCustom.cpp:
        (WebCore::JSWorkerContext::addEventListener):
        (WebCore::JSWorkerContext::removeEventListener):
        * bindings/js/JSXMLHttpRequestCustom.cpp:
        (WebCore::JSXMLHttpRequest::addEventListener):
        (WebCore::JSXMLHttpRequest::removeEventListener):
        * bindings/js/JSXMLHttpRequestUploadCustom.cpp:
        (WebCore::JSXMLHttpRequestUpload::addEventListener):
        (WebCore::JSXMLHttpRequestUpload::removeEventListener):
        * bindings/objc/ObjCEventListener.h:
        (WebCore::ObjCEventListener::cast):
        * bindings/objc/ObjCEventListener.mm:
        (WebCore::ObjCEventListener::ObjCEventListener):
        (WebCore::ObjCEventListener::operator==):
        * dom/EventListener.h:
        (WebCore::EventListener::):
        (WebCore::EventListener::type):
        (WebCore::EventListener::EventListener):
        * dom/MessagePort.cpp:
        (WebCore::MessagePort::addEventListener):
        (WebCore::MessagePort::removeEventListener):
        * dom/Node.cpp:
        (WebCore::Node::removeEventListener):
        * inspector/InspectorDOMAgent.cpp:
        (WebCore::InspectorDOMAgent::InspectorDOMAgent):
        (WebCore::InspectorDOMAgent::mainFrameDocument):
        (WebCore::InspectorDOMAgent::operator==):
        * inspector/InspectorDOMAgent.h:
        (WebCore::InspectorDOMAgent::cast):
        * loader/ImageDocument.cpp:
        (WebCore::ImageEventListener::cast):
        (WebCore::ImageEventListener::ImageEventListener):
        (WebCore::ImageEventListener::operator==):
        * loader/appcache/DOMApplicationCache.cpp:
        (WebCore::DOMApplicationCache::addEventListener):
        (WebCore::DOMApplicationCache::removeEventListener):
        * notifications/Notification.cpp:
        (WebCore::Notification::removeEventListener):
        * page/DOMWindow.cpp:
        (WebCore::DOMWindow::removeEventListener):
        * page/EventSource.cpp:
        (WebCore::EventSource::addEventListener):
        (WebCore::EventSource::removeEventListener):
        * svg/animation/SVGSMILElement.cpp:
        (WebCore::ConditionEventListener::cast):
        (WebCore::ConditionEventListener::ConditionEventListener):
        (WebCore::ConditionEventListener::operator==):
        (WebCore::ConditionEventListener::handleEvent):
        * workers/AbstractWorker.cpp:
        (WebCore::AbstractWorker::addEventListener):
        (WebCore::AbstractWorker::removeEventListener):
        * workers/WorkerContext.cpp:
        (WebCore::WorkerContext::addEventListener):
        (WebCore::WorkerContext::removeEventListener):
        * xml/XMLHttpRequest.cpp:
        (WebCore::XMLHttpRequest::addEventListener):
        (WebCore::XMLHttpRequest::removeEventListener):
        * xml/XMLHttpRequestUpload.cpp:
        (WebCore::XMLHttpRequestUpload::addEventListener):
        (WebCore::XMLHttpRequestUpload::removeEventListener):

2009-09-15  Alex Milowski  <alex@milowski.com>

        Reviewed by Tor Arne Vestbø.

        Added ENABLE_MATHML to feature defines

        * Configurations/FeatureDefines.xcconfig:

2009-09-14  Andrew Richards  <randrew@gmail.com>

        Reviewed by Sam Weinig.

        Document.elementFromPoint() and Document.caretRangeFromPoint() erroneously returning null at points visible only after scrolling.
        https://bugs.webkit.org/show_bug.cgi?id=29245

        Use visibleContentRect() instead of boundsRect() when checking hit point bounds on viewport.

        * dom/Document.cpp:
        (WebCore::Document::elementFromPoint):
        (WebCore::Document::caretRangeFromPoint):

2009-09-15  Jungshik Shin  <jshin@chromium.org>

        Reviewed by Eric Seidel

        http://bugs.webkit.org/show_bug.cgi?id=26660

        Chromium Windows: When rotated, the baseline for a span of complex
        script is completely misaligned with that of the adjacent 
        simple script text. It's fixed by not applying the baseline offset for
        the Skia code path.

        Test: transforms/2d/hindi-rotated.html

        * platform/graphics/chromium/UniscribeHelper.cpp:
        (WebCore::UniscribeHelper::draw):

2009-09-15  Anders Carlsson  <andersca@apple.com>

        Reviewed by Adam Roben.

        Pass the PopupMenu pointer to CreateWindowEx and then get it from the LPCREATESTRUCT in
        the WM_CREATE handler. This way we don't have to first create an zero size window and then size it.
        
        * platform/win/PopupMenuWin.cpp:
        (WebCore::PopupMenu::show):
        (WebCore::PopupMenu::PopupMenuWndProc):

2009-09-15  Drew Wilson  <atwilson@google.com>

        Reviewed by Darin Adler.

        MessageEvent should not be cancelable by default
        https://bugs.webkit.org/show_bug.cgi?id=27846

        * dom/MessageEvent.cpp:
        (WebCore::MessageEvent::MessageEvent):
        Changed constructor to set cancelable=false by default, per the HTML5 spec.

2009-09-15  Charles Wei  <charles.wei@torchmobile.com.cn>

        Reviewed by George Staikos.

        Fix SVG path parsing error if a command starts with dot '.'
        https://bugs.webkit.org/show_bug.cgi?id=29123

        * svg/SVGParserUtilities.cpp:
        (WebCore::SVGPathParser::parseSVG):

2009-09-15  Alexander Pavlov  <apavlov@chromium.org>

        Reviewed by Timothy Hatcher.

        Implement conditional breakpoints in the Web Inspector frontend.
        https://bugs.webkit.org/show_bug.cgi?id=28908

        * English.lproj/localizedStrings.js:
        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * inspector/front-end/Breakpoint.js:
        (WebInspector.Breakpoint.prototype.set condition):
        * inspector/front-end/Popup.js: Added.
        (WebInspector.Popup):
        (WebInspector.Popup.prototype.show):
        (WebInspector.Popup.prototype.hide):
        (WebInspector.Popup.prototype.get visible):
        (WebInspector.Popup.prototype.set element):
        (WebInspector.Popup.prototype.get element):
        (WebInspector.Popup.prototype.positionElement):
        (WebInspector.Popup.prototype.set anchor):
        (WebInspector.Popup.prototype.get anchor):
        (WebInspector.Popup.prototype.set autoHide):
        (WebInspector.Popup.prototype._checkNotVisible):
        (WebInspector.Popup.prototype._keyEventHandler):
        (WebInspector.Popup.prototype._mouseDownEventHandler):
        * inspector/front-end/SourceFrame.js:
        (WebInspector.SourceFrame.prototype.revealLine):
        (WebInspector.SourceFrame.prototype._loaded):
        (WebInspector.SourceFrame.prototype._documentContextMenu):
        (WebInspector.SourceFrame.prototype._documentMouseDown):
        (WebInspector.SourceFrame.prototype._editBreakpointCondition.committed):
        (WebInspector.SourceFrame.prototype._editBreakpointCondition.dismissed):
        (WebInspector.SourceFrame.prototype._editBreakpointCondition):
        (WebInspector.SourceFrame.prototype._showBreakpointConditionPopup):
        (WebInspector.SourceFrame.prototype._createPopupElement):
        (WebInspector.SourceFrame.prototype._addBreakpointToSource):
        (WebInspector.SourceFrame.prototype._removeBreakpointFromSource):
        (WebInspector.SourceFrame.prototype._drawBreakpointImagesIfNeeded.drawBreakpoint):
        (WebInspector.SourceFrame.prototype._drawBreakpointImagesIfNeeded):
        * inspector/front-end/WebKit.qrc:
        * inspector/front-end/inspector.html:
        * inspector/front-end/inspector.js:
        (WebInspector.set currentFocusElement):
        (WebInspector.set currentPanel):
        (WebInspector.loaded):
        (WebInspector.contextMenu):
        (WebInspector.elementDragStart):
        (WebInspector.updateResource):
        (WebInspector.drawLoadingPieChart):
        (WebInspector.linkifyURLAsNode):
        (WebInspector.startEditing.getContent):
        (WebInspector.startEditing.editingCancelled):
        (WebInspector.startEditing.editingCommitted):
        * inspector/front-end/utilities.js:
        (Element.prototype.positionAt):
        (Element.prototype.offsetRelativeToWindow):

2009-09-14  Brady Eidson  <beidson@apple.com>

        Reviewed by Darin Adler.

        Page cache should support pages with unload handlers as an experiment.
        <rdar://problem/7196485> and https://bugs.webkit.org/show_bug.cgi?id=29021

        For the experiment, only allow pages with unload handlers into the Page Cache on
        Mac and Windows.

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::canCachePageContainingThisFrame):
        (WebCore::FrameLoader::logCanCacheFrameDecision):

2009-09-14  Simon Fraser  <simon.fraser@apple.com>

        Fix the change in r48376 to do a null-check to fix a crashing test.

        * dom/SelectElement.cpp:
        (WebCore::SelectElement::menuListDefaultEventHandler):

2009-09-14  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Dan Bernstein.

        <rdar://problem/7047282> Safari crashes at WebCore::RenderMenuList::adjustInnerStyle() + 436
        
        Avoid a crash when a mouse event handler on a <select> changes the select from a popup
        to a list (by setting the 'size' property) inside the event handler.

        Test: fast/forms/select-change-popup-to-listbox-in-event-handler.html

        * dom/SelectElement.cpp:
        (WebCore::SelectElement::menuListDefaultEventHandler):

2009-09-14  Anders Carlsson  <andersca@apple.com>

        Reviewed by Jon Honeycutt.

        More PopupMenu cleanup.
        
        * platform/PopupMenu.h:
        * platform/win/PopupMenuWin.cpp:
        (WebCore::PopupMenu::show):
        Call registerClass.
        
        (WebCore::PopupMenu::registerClass):
        Make this a private static member function so it can refer to PopupMenuWndProc.
        
        (WebCore::PopupMenu::PopupMenuWndProc):
        Try to get the PopupMenu and call its wndProc member function.
        
        (WebCore::PopupMenu::wndProc):
        Make this a member function.

2009-09-14  Brady Eidson  <beidson@apple.com>

        Not reviewed, maybe should've been:

        Cleaning up more Windows-specific fallout from the fix for:
        <rdar://problem/7174050> and https://bugs.webkit.org/show_bug.cgi?id=29160

        * platform/network/cf/ResourceHandleCFNet.cpp:
        (WebCore::WebCoreSynchronousLoader::load): Don't allow empty CFStrings as the stored credentials,
          as related checks all look at nullity when they really mean to be looking for emptiness. 

2009-09-14  Anders Carlsson  <andersca@apple.com>

        Speculative Qt build fix.
        
        * platform/qt/QWebPopup.cpp:
        (WebCore::QWebPopup::hidePopup):

2009-09-14  Dirk Pranke  <dpranke@chromium.org>

        Reviewed by Darin Fisher.

        Fix RenderThemeChromiumWin::determineClassicState so that classic_state
        matches the state values (and you get a single classic_state value
        for a given {part,state} value. This change will be tested by a 
        chromium patch that will land after this.

        This will be tested by code landing downstream on Chromium.org; the
        code does not execute on webkit.org.

        * rendering/RenderThemeChromiumWin.cpp:
        (WebCore::RenderThemeChromiumWin::determineClassicState):
        (WebCore::RenderThemeChromiumWin::getThemeData):

2009-09-14  Anders Carlsson  <andersca@apple.com>

        Reviewed by Adam Roben.

        https://bugs.webkit.org/show_bug.cgi?id=29138
        Simplify popup menu handling.

        * platform/PopupMenuClient.h:
        Rename hidePopup to popupDidHide.
        
        * platform/chromium/PopupMenuChromium.cpp:
        (WebCore::PopupListBox::handleKeyEvent):        
        (WebCore::PopupListBox::abandon):
        (WebCore::PopupListBox::acceptIndex):
        Call popupDidHide instead of hidePopup.
        
        * platform/gtk/PopupMenuGtk.cpp:
        (WebCore::PopupMenu::menuUnmapped):
        Ditto.
        
        * platform/mac/PopupMenuMac.mm:
        (WebCore::PopupMenu::show):
        Ditto.
        
        * platform/win/PopupMenuWin.cpp:
        (WebCore::PopupMenu::hide):
        Call popupDidHide.
        
        (WebCore::PopupWndProc):
        Call PopupMenu::hide.
        
        * platform/wx/PopupMenuWx.cpp:
        (WebCore::PopupMenu::OnMenuItemSelected):
        Call popupDidHide.
        
        * rendering/RenderMenuList.cpp:
        (WebCore::RenderMenuList::hidePopup):
        (WebCore::RenderMenuList::popupDidHide):
        * rendering/RenderMenuList.h:
        Set the "popup is visible" flag in popupDidHide.
        
        * rendering/RenderTextControlSingleLine.cpp:
        (WebCore::RenderTextControlSingleLine::hidePopup):
        (WebCore::RenderTextControlSingleLine::popupDidHide):
        * rendering/RenderTextControlSingleLine.h:
        Ditto.

2009-09-14  Anders Carlsson  <andersca@apple.com>

        Reviewed by David Hyatt.

        - Fix <rdar://problem/7182275>.

        Make sure that the newly created scrollbar's style is up to date.
        
        * platform/win/PopupMenuWin.cpp:
        (WebCore::PopupMenu::~PopupMenu):
        Call setParent so that the scrollbar's parts are torn down correctly.
        
        (WebCore::PopupMenu::show):
        Call styleChanged.

2009-09-11  Jon Honeycutt  <jhoneycutt@apple.com>

        <rdar://problem/7197644> WebKit should broadcast an MSAA event when
        jumping to a named anchor

        https://bugs.webkit.org/show_bug.cgi?id=28899

        Reviewed by Adam Roben.

        * accessibility/AXObjectCache.h:
        (WebCore::AXObjectCache::):
        Added declaration for handleScrolledToAnchor(). Added a new entry to
        the enum of accessibility notifications.

        * accessibility/AccessibilityObject.cpp:
        (WebCore::AccessibilityObject::firstAccessibleObjectFromNode):
        Code moved from AccessibilityRenderObject::internalLinkElement() and
        refactored slightly; walks the tree until it finds a Node (with a
        renderer) whose accessibility is not ignored.

        * accessibility/AccessibilityObject.h:
        Added a declaration for firstAccessibleObjectFromNode().

        * accessibility/AccessibilityRenderObject.cpp:
        (WebCore::AccessibilityRenderObject::internalLinkElement):
        Code moved to AccessibilityObject::firstAccessibleObjectFromNode().

        * accessibility/chromium/AXObjectCacheChromium.cpp:
        (WebCore::AXObjectCache::handleScrolledToAnchor):
        Stubbed.

        * accessibility/gtk/AXObjectCacheAtk.cpp:
        (WebCore::AXObjectCache::handleScrolledToAnchor):
        Stubbed.

        * accessibility/mac/AXObjectCacheMac.mm:
        (WebCore::AXObjectCache::postPlatformNotification):
        Add a default case that returns early for notifications that Mac
        doesn't handle.
        (WebCore::AXObjectCache::handleScrolledToAnchor):
        Stubbed.

        * accessibility/win/AXObjectCacheWin.cpp:
        (WebCore::AXObjectCache::handleScrolledToAnchor):
        Post an AXScrolledToAnchor notification for the first accessible from
        the anchor Node.
        (WebCore::AXObjectCache::postPlatformNotification):
        If the notification is AXFocusedUIElementChanged, fire an
        EVENT_OBJECT_FOCUS. If the notification is AXScrolledToAnchor, fire
        EVENT_SYSTEM_SCROLLINGSTART, matching Firefox.
        (WebCore::AXObjectCache::handleFocusedUIElementChanged):
        Code moved to postPlatformNotification().

        * page/FrameView.cpp:
        (WebCore::FrameView::scrollToAnchor):
        Call AXObjectCache::handleScrolledToAnchor().

2009-09-14  Anthony Ricaud  <rik@webkit.org>

        Reviewed by Timothy Hatcher.

        Cookies are not inspectable after reloading a page
        https://bugs.webkit.org/show_bug.cgi?id=29222

        Create the cookieTreeElement on initialization instead of when the view is shown.
        Reset the selected element of the sidebar on reset.

        * inspector/front-end/StoragePanel.js:
        (WebInspector.StoragePanel):
        (WebInspector.StoragePanel.prototype.show):
        (WebInspector.StoragePanel.prototype.reset):


2009-09-14  Brady Eidson  <beidson@apple.com>

        Windows build fix.

        * platform/network/cf/ResourceHandleCFNet.cpp:
        (WebCore::ResourceHandle::didReceiveAuthenticationChallenge):
        (WebCore::ResourceHandle::receivedCredential):
        (WebCore::WebCoreSynchronousLoader::didReceiveChallenge):
        (WebCore::WebCoreSynchronousLoader::load):

2009-09-14  Brady Eidson  <beidson@apple.com>

        Reviewed by Alexey Proskuryakov.

        Safari 4 cannot be used to update firmware on Linksys routers.
        <rdar://problem/7174050> and https://bugs.webkit.org/show_bug.cgi?id=29160

        In http://trac.webkit.org/changeset/42483, we disabled CFNetwork's session credential storage and 
        implemented our own in WebCore.

        One feature we lost is that CFNetwork would automatically send previously authenticated credentials
        with new connections when the paths match, as allowed by RFC 2617 for HTTP Basic and Digest Authentication.  

        Even though it's optional for User Agents to do this, (some?) Linksys routers rely on this behavior for
        HTTP Basic Authentication.  So now WebCore's CredentialStorage will track URL paths for Basic credentials.

        We're not making this enhancement for Digest at this time, since we don't know of anything that broke
        due to the change in Digest behavior.

        Test: http/tests/loading/basic-credentials-sent-automatically.html
              http/tests/loading/basic-auth-resend-wrong-credentials.html

        * WebCore.base.exp:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:

        * platform/network/Credential.cpp:
        (WebCore::Credential::isEmpty):
        * platform/network/Credential.h:

        Add a slightly more full featured CredentialStore that will track URL paths a credential belongs to:
        * platform/network/CredentialStorage.cpp: Added.
        (WebCore::protectionSpaceToCredentialMap):
        (WebCore::originToDefaultCredentialMap):
        (WebCore::originStringFromURL):
        (WebCore::CredentialStorage::set):
        (WebCore::CredentialStorage::get):
        (WebCore::CredentialStorage::getDefaultAuthenticationCredential):
        * platform/network/CredentialStorage.h: Added.

        Allow ProtectionSpace to be a hash key:
        * platform/network/ProtectionSpace.cpp:
        (WebCore::ProtectionSpace::ProtectionSpace):
        * platform/network/ProtectionSpace.h:
        (WebCore::ProtectionSpace::ProtectionSpace):
        (WebCore::ProtectionSpace::isHashTableDeletedValue):
        * platform/network/ProtectionSpaceHash.h: Added.
        (WebCore::ProtectionSpaceHash::hash):
        (WebCore::ProtectionSpaceHash::equal):

        Allow ResourceHandles to remember the initial credential they used:
        * platform/network/ResourceHandleInternal.h:

        Allow mutable ResourceRequests to update their platform object if HTTP header fields change:
        * platform/network/ResourceRequestBase.cpp:
        (WebCore::ResourceRequestBase::addHTTPHeaderField):

        Remove WebCoreCredentialStorage:
        * platform/network/cf/AuthenticationCF.cpp:
        * platform/network/cf/AuthenticationCF.h:
        * platform/network/mac/AuthenticationMac.h:
        * platform/network/mac/AuthenticationMac.mm:

        Change ResourceHandleCFNet to try to use stored credentials on new connections, if appropriate:
        * platform/network/cf/ResourceHandleCFNet.cpp:
        (WebCore::ResourceHandle::start):
        (WebCore::ResourceHandle::didReceiveAuthenticationChallenge): Only try the ProtectionSpace key'ed
          Credential if it does not match the initially used Credential.
        (WebCore::ResourceHandle::receivedCredential):
        (WebCore::WebCoreSynchronousLoader::didReceiveChallenge): Only try the ProtectionSpace key'ed
          Credential if it does not match the initially used Credential.
        (WebCore::WebCoreSynchronousLoader::load):

        Change ResourceHandleMac to try to use stored credentials on new connections, if appropriate:
        * platform/network/mac/ResourceHandleMac.mm:
        (WebCore::ResourceHandle::start):
        (WebCore::ResourceHandle::didReceiveAuthenticationChallenge): Only try the ProtectionSpace key'ed
          Credential if it does not match the initially used Credential.
        (WebCore::ResourceHandle::receivedCredential):
        (-[WebCoreSynchronousLoader connection:didReceiveAuthenticationChallenge:]): Only try the 
          ProtectionSpace key'ed Credential if it does not match the initially used Credential.
        (+[WebCoreSynchronousLoader loadRequest:allowStoredCredentials:returningResponse:error:]):

        Add base64-ability to CString:
        * platform/text/CString.cpp:
        (WebCore::CStringBuffer::base64Encode):
        (WebCore::CString::base64Encode):
        * platform/text/CString.h:
        (WebCore::CStringBuffer::create):
        (WebCore::CStringBuffer::CStringBuffer):

2009-09-12  Mark Rowe  <mrowe@apple.com>

        Reviewed by Dan Bernstein.

        Fix <rdar://problem/6954546> Crashes in WebCore::RenderPart::setWidget below FrameLoader::loadPlugin.

        The calls to FrameLoader::requestObject within RenderPartObject::updateWidget can result in a plug-in
        being initialized.  This can run cause arbitrary JavaScript to run and may result in the RenderPartObject
        being detached from the render tree and destroyed, causing a crash like <rdar://problem/6954546>.

        No test is possible until <rdar://problem/7090444> is fixed.

        * rendering/RenderPartObject.cpp:
        (WebCore::RenderPartObject::updateWidget): Ensure that we stay alive for the duration of plug-in initialization.

2009-09-12  Mark Rowe  <mrowe@apple.com>

        Reviewed by Dan Bernstein.

        Add RenderWidgetProtector to simplify protecting a RenderWidget from destruction for the
        duration of a function.  Deploy it within RenderWidget.

        * rendering/RenderWidget.cpp:
        (WebCore::RenderWidget::setWidgetGeometry):
        (WebCore::RenderWidget::updateWidgetPosition): Use a RefPtr rather than explicitly
        ref'ing and deref'ing the node.
        * rendering/RenderWidget.h:
        * rendering/RenderWidgetProtector.h:
        (WebCore::RenderWidgetProtector::RenderWidgetProtector):
        (WebCore::RenderWidgetProtector::~RenderWidgetProtector):

2009-09-14  Cameron McCormack  <cam@mcc.id.au>

        Reviewed by Eric Seidel.

        CodeGenerator.pm needs some cleaning up
        https://bugs.webkit.org/show_bug.cgi?id=29238

        * bindings/scripts/CodeGenerator.pm:
        (FindParentsRecursively): Removed; its functionality is now handled in
        AddMethodsConstantsAndAttributesFromParentClasses.
        (ForAllParents): New function that visits an interface's ancestors and
        invokes a callback for each one.
        (AddMethodsConstantsAndAttributesFromParentClasses): Simplified by using
        ForAllParents.
        (GetMethodsAndAttributesFromParentClasses): Ditto.
        (IDLFileForInterface): Factored out previous calls to ScanDirectory into
        this new function, which returns the filename containing a given IDL
        interface definition.
        (ParseInterface): Simplified by using IDLFileForInterface.
        (ScanDirectory): Removed in lieu of IDLFileForInterface.
        * bindings/scripts/CodeGeneratorV8.pm: Drop call to
        FindParentsRecursively and get the list of parents from the
        AddMethodsConstantsAndAttributesFromParentClasses call instead.

2009-09-14  Yael Aharon  <yael.aharon@nokia.com>

        Reviewed by Tor Arne Vestbø.

        [Qt] Assert hit when dropping a file in QtLauncher
        https://bugs.webkit.org/show_bug.cgi?id=29242

        Qt's implementation of DropData::asURL does not return a URL encoded string
        as expected.

        * platform/qt/DragDataQt.cpp:
        (WebCore::DragData::asURL):

2009-09-13  Kevin Ollivier  <kevino@theolliviers.com>

        wx build fix, file was missed during TLS.cpp removal.

        * page/wx/FrameWx.cpp: Added.
        (WebCore::Frame::dragImageForSelection):

2009-09-13  Anthony Ricaud  <rik@webkit.org>

        Reviewed by Oliver Hunt.

        Web Inspector: Add "New Style Rule" to the localizedStrings
        https://bugs.webkit.org/show_bug.cgi?id=29237

        * English.lproj/localizedStrings.js:

2009-09-13  Kevin Watters  <kevinwatters@gmail.com>

        Reviewed by Kevin Ollivier.

        [wx] Implement filesystem functions.

        https://bugs.webkit.org/show_bug.cgi?id=29196

        * platform/wx/FileSystemWx.cpp:
        (WebCore::fileExists):
        (WebCore::deleteFile):
        (WebCore::deleteEmptyDirectory):
        (WebCore::getFileSize):
        (WebCore::getFileModificationTime):
        (WebCore::makeAllDirectories):
        (WebCore::pathByAppendingComponent):
        (WebCore::homeDirectoryPath):
        (WebCore::directoryName):

2009-09-12  Kevin Ollivier  <kevino@theolliviers.com>

        wx build fixes for wx 2.9.

        * platform/wx/ScrollbarThemeWx.cpp:
        * platform/wx/wxcode/gtk/scrollbar_render.cpp:
        (wxGetGdkWindowForDC):

2009-09-12  Oliver Hunt  <oliver@apple.com>

        Reviewed by Maciej Stachowiak.

        [ES5] Implement Object.keys
        https://bugs.webkit.org/show_bug.cgi?id=29170

        Switch from getPropertyNames to getOwnPropertyNames, and provide custom
        getPropertyNames to DOMWindow, DOMWindowShell and QuarantinedObjectWrapper
        in order to ensure correct semantics are maintained.

        Test: fast/js/Object-keys.html

        * bindings/js/JSDOMWindowCustom.cpp:
        (WebCore::JSDOMWindow::getOwnPropertyNames):
        * bindings/js/JSDOMWindowShell.cpp:
        (WebCore::JSDOMWindowShell::getOwnPropertyNames):
        * bindings/js/JSDOMWindowShell.h:
        * bindings/js/JSHistoryCustom.cpp:
        (WebCore::JSHistory::getOwnPropertyNames):
        * bindings/js/JSLocationCustom.cpp:
        (WebCore::JSLocation::getOwnPropertyNames):
        * bindings/js/JSQuarantinedObjectWrapper.cpp:
        (WebCore::JSQuarantinedObjectWrapper::getPropertyNames):
        (WebCore::JSQuarantinedObjectWrapper::getOwnPropertyNames):
        * bindings/js/JSQuarantinedObjectWrapper.h:
        * bindings/js/JSStorageCustom.cpp:
        (WebCore::JSStorage::getOwnPropertyNames):
        * bindings/scripts/CodeGeneratorJS.pm:
        * bridge/runtime_object.cpp:
        (JSC::RuntimeObjectImp::getPropertyNames):
        (JSC::RuntimeObjectImp::getOwnPropertyNames):
        * bridge/runtime_object.h:

2009-09-12  Sam Weinig  <sam@webkit.org>

        Reviewed by Anders Carlsson.

        Fix for https://bugs.webkit.org/show_bug.cgi?id=29219
        Document.elementFromPoint() should take page scroll into consideration

        Test: fast/dom/elementFromPoint-relative-to-viewport.html

        * dom/Document.cpp:
        (WebCore::Document::elementFromPoint):
        (WebCore::Document::caretRangeFromPoint):

2009-09-12  Sam Weinig  <sam@webkit.org>

        Reviewed by Maciej Stachowiak.

        Fix for https://bugs.webkit.org/show_bug.cgi?id=29217
        Document.caretRangeFromPoint should take the scroll offset into account before hit testing

        In accordance with the CSSOM View Module spec, Document.caretRangeFromPoint should interpret
        the point passed to it as relative to the viewport, not the document.

        Test: fast/dom/Document/CaretRangeFromPoint/hittest-relative-to-viewport.html

        * dom/Document.cpp:
        (WebCore::Document::caretRangeFromPoint):

2009-09-11  Chris Marrin  <cmarrin@apple.com>

        Reviewed by Oliver Hunt.

        Added some manual tests to show WebGL in action
        https://bugs.webkit.org/show_bug.cgi?id=29215

        * manual-tests/webgl: Added.
        * manual-tests/webgl/Earth.html: Added.
        * manual-tests/webgl/ManyPlanetsDeep.html: Added.
        * manual-tests/webgl/SpinningBox.html: Added.
        * manual-tests/webgl/TeapotPerPixel.html: Added.
        * manual-tests/webgl/TeapotPerVertex.html: Added.
        * manual-tests/webgl/resources: Added.
        * manual-tests/webgl/resources/CanvasMatrix.js: Added.
        * manual-tests/webgl/resources/earthmap1k.jpg: Added.
        * manual-tests/webgl/resources/mars500x250.png: Added.
        * manual-tests/webgl/resources/teapot.obj: Added.
        * manual-tests/webgl/resources/utils3d.js: Added.
 
2009-09-10  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by Darin Adler.

        aria definition role spelled wrong "defintion"
        https://bugs.webkit.org/show_bug.cgi?id=28840

        Test: accessibility/aria-slider-value-change.html

        * accessibility/AccessibilityRenderObject.cpp:
        (WebCore::RoleEntry::):

2009-09-11  Erik Arvidsson  <arv@chromium.org>

        Reviewed by Eric Seidel.

        Fixes an assert in Node::isFocusable which was causing crashes in certain cases.
        https://bugs.webkit.org/show_bug.cgi?id=29210

        * dom/Node.cpp:
        (WebCore::Node::isFocusable):

2009-09-11  Chris Marrin  <cmarrin@apple.com>

        Reviewed by Oliver Hunt.

        Added variants to uniform* and vertexAttrib* calls which take sequence<> in place of CanvasArray
        https://bugs.webkit.org/show_bug.cgi?id=29139
        
        I also added a data() call to each of the CanvasArray subclasses to give back a types pointer
        to the baseAddress().

        * Configurations/FeatureDefines.xcconfig:
        * bindings/js/JSCanvasRenderingContext3DCustom.cpp:
        (WebCore::toArray):
        (WebCore::):
        (WebCore::dataFunctionf):
        (WebCore::dataFunctioni):
        (WebCore::dataFunctionMatrix):
        (WebCore::JSCanvasRenderingContext3D::uniform1fv):
        (WebCore::JSCanvasRenderingContext3D::uniform1iv):
        (WebCore::JSCanvasRenderingContext3D::uniform2fv):
        (WebCore::JSCanvasRenderingContext3D::uniform2iv):
        (WebCore::JSCanvasRenderingContext3D::uniform3fv):
        (WebCore::JSCanvasRenderingContext3D::uniform3iv):
        (WebCore::JSCanvasRenderingContext3D::uniform4fv):
        (WebCore::JSCanvasRenderingContext3D::uniform4iv):
        (WebCore::JSCanvasRenderingContext3D::uniformMatrix2fv):
        (WebCore::JSCanvasRenderingContext3D::uniformMatrix3fv):
        (WebCore::JSCanvasRenderingContext3D::uniformMatrix4fv):
        (WebCore::JSCanvasRenderingContext3D::vertexAttrib1fv):
        (WebCore::JSCanvasRenderingContext3D::vertexAttrib2fv):
        (WebCore::JSCanvasRenderingContext3D::vertexAttrib3fv):
        (WebCore::JSCanvasRenderingContext3D::vertexAttrib4fv):
        * html/canvas/CanvasByteArray.h:
        (WebCore::CanvasByteArray::data):
        * html/canvas/CanvasFloatArray.h:
        (WebCore::CanvasFloatArray::data):
        * html/canvas/CanvasIntArray.h:
        (WebCore::CanvasIntArray::data):
        * html/canvas/CanvasRenderingContext3D.cpp:
        (WebCore::CanvasRenderingContext3D::uniform1fv):
        (WebCore::CanvasRenderingContext3D::uniform1iv):
        (WebCore::CanvasRenderingContext3D::uniform2fv):
        (WebCore::CanvasRenderingContext3D::uniform2iv):
        (WebCore::CanvasRenderingContext3D::uniform3fv):
        (WebCore::CanvasRenderingContext3D::uniform3iv):
        (WebCore::CanvasRenderingContext3D::uniform4fv):
        (WebCore::CanvasRenderingContext3D::uniform4iv):
        (WebCore::CanvasRenderingContext3D::uniformMatrix2fv):
        (WebCore::CanvasRenderingContext3D::uniformMatrix3fv):
        (WebCore::CanvasRenderingContext3D::uniformMatrix4fv):
        (WebCore::CanvasRenderingContext3D::vertexAttrib1fv):
        (WebCore::CanvasRenderingContext3D::vertexAttrib2fv):
        (WebCore::CanvasRenderingContext3D::vertexAttrib3fv):
        (WebCore::CanvasRenderingContext3D::vertexAttrib4fv):
        * html/canvas/CanvasRenderingContext3D.h:
        * html/canvas/CanvasRenderingContext3D.idl:
        * html/canvas/CanvasShortArray.h:
        (WebCore::CanvasShortArray::data):
        * html/canvas/CanvasUnsignedByteArray.h:
        (WebCore::CanvasUnsignedByteArray::data):
        * html/canvas/CanvasUnsignedIntArray.h:
        (WebCore::CanvasUnsignedIntArray::data):
        * html/canvas/CanvasUnsignedShortArray.h:
        (WebCore::CanvasUnsignedShortArray::data):
        * platform/graphics/GraphicsContext3D.h:
        * platform/graphics/mac/GraphicsContext3DMac.cpp:
        (WebCore::GraphicsContext3D::uniform1fv):
        (WebCore::GraphicsContext3D::uniform2fv):
        (WebCore::GraphicsContext3D::uniform3fv):
        (WebCore::GraphicsContext3D::uniform4fv):
        (WebCore::GraphicsContext3D::uniform1iv):
        (WebCore::GraphicsContext3D::uniform2iv):
        (WebCore::GraphicsContext3D::uniform3iv):
        (WebCore::GraphicsContext3D::uniform4iv):
        (WebCore::GraphicsContext3D::uniformMatrix2fv):
        (WebCore::GraphicsContext3D::uniformMatrix3fv):
        (WebCore::GraphicsContext3D::uniformMatrix4fv):
        (WebCore::GraphicsContext3D::vertexAttrib1fv):
        (WebCore::GraphicsContext3D::vertexAttrib2fv):
        (WebCore::GraphicsContext3D::vertexAttrib3fv):
        (WebCore::GraphicsContext3D::vertexAttrib4fv):

2009-09-11  Fumitoshi Ukai  <ukai@chromium.org>

        Reviewed by Eric Seidel.

        Add ENABLE(WEB_SOCKETS) guards.
        https://bugs.webkit.org/show_bug.cgi?id=29174

        * bindings/v8/custom/V8WebSocketCustom.cpp:

2009-09-11  Eric Seidel  <eric@webkit.org>

        No review, rolling out r48229.
        http://trac.webkit.org/changeset/48229

        * WebCore.base.exp:
        * dom/Clipboard.cpp:
        (WebCore::Clipboard::Clipboard):
        (WebCore::Clipboard::sourceOperation):
        * page/DragController.cpp:
        (WebCore::DragController::DragController):
        (WebCore::DragController::dragExited):
        (WebCore::DragController::performDrag):
        (WebCore::DragController::dragEnteredOrUpdated):
        (WebCore::DragController::tryDHTMLDrag):
        (WebCore::DragController::startDrag):
        * page/DragController.h:
        * page/EventHandler.cpp:
        (WebCore::EventHandler::updateDragAndDrop):
        (WebCore::EventHandler::dragSourceMovedTo):
        (WebCore::EventHandler::handleDrag):
        * page/EventHandler.h:

2009-09-11  Michelangelo De Simone  <micdesim@gmail.com>

        Fix the build.

        * html/ValidityState.cpp:
        (WebCore::ValidityState::typeMismatch):

2009-09-11  Michelangelo De Simone  <micdesim@gmail.com>

        Reviewed by Antti Koivisto.

        https://bugs.webkit.org/show_bug.cgi?id=27456
        Added support for static validation of url in
        ValidityState, for url state inputs.
        From HTML5 specs:
        http://www.whatwg.org/specs/web-apps/current-work/#url-state

        Test: fast/forms/ValidityState-typeMismatch-url.html

        * html/ValidityState.cpp:
        (WebCore::ValidityState::typeMismatch):

2009-09-11  Evan Stade  <estade@chromium.org>

        Reviewed by Darin Adler.

        Revert r47992: Expose functions to change the focus ring color for
        Linux Chromium.

        As Darin Fisher has pointed out, there is a better way to do this.

        * rendering/RenderThemeChromiumLinux.cpp:
        (WebCore::RenderThemeChromiumLinux::RenderThemeChromiumLinux):
        * rendering/RenderThemeChromiumLinux.h:

2009-09-11  Alexey Proskuryakov  <ap@webkit.org>

        Reviewed by Geoff Garen.

        https://bugs.webkit.org/show_bug.cgi?id=29207
        Add checks for using WebCore JS context on secondary threads

        * bindings/js/JSDOMWindowBase.cpp: (WebCore::JSDOMWindowBase::commonJSGlobalData):
        Set the new debug-only mainThreadOnly flag.

2009-09-11  Brian Weinstein  <bweinstein@apple.com>

        Reviewed by Timothy Hatcher.

        The inspector should have scope bars.
        https://bugs.webkit.org/show_bug.cgi?id=14353
        
        Add scope bars to the console, so the user can choose which category
        of messages they want to see (All, Errors, Warnings, Logs), and they
        can choose from one or more of {Errors, Warnings, Logs}.

        * inspector/front-end/ConsoleView.js:
        (WebInspector.ConsoleView.createFilterElement):
        (WebInspector.ConsoleView):
        (WebInspector.ConsoleView.prototype._updateFilter):
        (WebInspector.ConsoleView.prototype.filter):
        (WebInspector.ConsoleView.prototype.attach):
        * inspector/front-end/inspector.css:
        * inspector/front-end/inspector.html:

2009-09-11  Yusuke Sato  <yusukes@chromium.org>

        Reviewed by Darin Fisher.

        [Chromium] Complex text doesn't show up with text stroking
        https://bugs.webkit.org/show_bug.cgi?id=28707

        Added extra NULL checks for HDC. This is the second fix for issue 28707,
        and the fix is similar to http://trac.webkit.org/changeset/45482.

        * platform/graphics/chromium/FontChromiumWin.cpp:
        (WebCore::Font::drawComplexText):
        * platform/graphics/chromium/UniscribeHelper.cpp:
        (WebCore::UniscribeHelper::draw):

2009-09-11  Cameron McCormack  <cam@mcc.id.au>

        Reviewed by Eric Seidel.

        Make ElementTimeControl methods return void and not throw.
        https://bugs.webkit.org/show_bug.cgi?id=28831

        SVG 1.1 erratum:
        http://www.w3.org/2003/01/REC-SVG11-20030114-errata#elementtimecontrol-interface

        Test: svg/dom/smil-methods.svg

        * svg/ElementTimeControl.h: Change return type from bool to void and remove exception argument.
        * svg/ElementTimeControl.idl: Change return type from bool to void and remove raises claus.
        * svg/SVGAnimationElement.cpp:
        (WebCore::SVGAnimationElement::beginElement): Change return type from bool to void and remove exception argument.
        (WebCore::SVGAnimationElement::beginElementAt): Ditto.
        (WebCore::SVGAnimationElement::endElement): Ditto.
        (WebCore::SVGAnimationElement::endElementAt): Ditto.
        * svg/SVGAnimationElement.h: Ditto.

2009-09-11  Chris Marrin  <cmarrin@apple.com>

        Reviewed by Oliver Hunt.

        Added support for texImage2D which takes CanvasArray
        https://bugs.webkit.org/show_bug.cgi?id=29191

        * bindings/js/JSCanvasRenderingContext3DCustom.cpp:
        (WebCore::JSCanvasRenderingContext3D::texImage2D):
        * platform/graphics/mac/GraphicsContext3DMac.cpp:
        (WebCore::GraphicsContext3D::texImage2D):

2009-09-11  Steve Falkenburg  <sfalken@apple.com>

        Reviewed by Darin Adler.

        Allow WebKit clients to opt out of high resolution timers on Windows.
        https://bugs.webkit.org/show_bug.cgi?id=29192

        * page/Settings.cpp:
        (WebCore::Settings::setShouldUseHighResolutionTimers): Added.
        * page/Settings.h: Added getter/setter for shouldUseHighResolutionTimers.
        (WebCore::Settings::shouldUseHighResolutionTimers): Added.
        * platform/win/SharedTimerWin.cpp:
        (WebCore::setSharedTimerFireTime): Don't run high resolution timer code if it is disabled.

2009-09-11  Christian Plesner Hansen  <christian.plesner.hansen@gmail.com>

        Reviewed by Adam Barth.

        [v8] Share persistent context handles between events        
        Change events to use a single ref-counted shared persistent handle
        to the context in which to run, rather than create a new
        persistent handle for each new event which puts pressure on the
        gc.
        
        https://bugs.webkit.org/show_bug.cgi?id=29077

        * bindings/v8/ScheduledAction.cpp:
        (WebCore::ScheduledAction::execute):
        * bindings/v8/SharedPersistent.h: Added.
        (WebCore::SharedPersistent::set):
        (WebCore::SharedPersistent::get):
        (WebCore::SharedPersistent::disposeHandle):
        (WebCore::SharedPersistent::create):
        (WebCore::SharedPersistent::SharedPersistent):
        * bindings/v8/V8AbstractEventListener.cpp:
        (WebCore::V8AbstractEventListener::V8AbstractEventListener):
        (WebCore::V8AbstractEventListener::handleEvent):
        * bindings/v8/V8AbstractEventListener.h:
        * bindings/v8/V8IsolatedWorld.cpp:
        (WebCore::V8IsolatedWorld::V8IsolatedWorld):
        (WebCore::V8IsolatedWorld::~V8IsolatedWorld):
        * bindings/v8/V8IsolatedWorld.h:
        (WebCore::V8IsolatedWorld::context):
        (WebCore::V8IsolatedWorld::shared_context):
        * bindings/v8/V8Proxy.cpp:
        (WebCore::V8Proxy::evaluateInNewContext):
        (WebCore::V8Proxy::createWrapperFromCacheSlowCase):
        (WebCore::V8Proxy::isContextInitialized):
        (WebCore::V8Proxy::updateDocumentWrapperCache):
        (WebCore::V8Proxy::clearDocumentWrapperCache):
        (WebCore::V8Proxy::disposeContextHandles):
        (WebCore::V8Proxy::clearForClose):
        (WebCore::V8Proxy::clearForNavigation):
        (WebCore::V8Proxy::setSecurityToken):
        (WebCore::V8Proxy::updateDocument):
        (WebCore::V8Proxy::initContextIfNeeded):
        (WebCore::V8Proxy::shared_context):
        (WebCore::V8Proxy::mainWorldContext):
        (WebCore::V8Proxy::setContextDebugId):
        * bindings/v8/V8Proxy.h:
        (WebCore::V8Proxy::V8Proxy):
        (WebCore::V8Proxy::context):
        (WebCore::V8Proxy::shared_context):

2009-09-11  Anton Muhin  <antonm@chromium.org>

        Reviewed by David Levin.

        Create a real handle (one which would save an object from GC).
        https://bugs.webkit.org/show_bug.cgi?id=29150

        * bindings/v8/V8Binding.cpp:
        (WebCore::v8ExternalString):

2009-09-11  Anton Muhin  <antonm@chromium.org>

        Reviewed by David Levin.

        Inline WebCore::v8String as it only invokes WebCore::v8ExternalString.
        https://bugs.webkit.org/show_bug.cgi?id=29152

        * bindings/v8/V8Binding.cpp:
        * bindings/v8/V8Binding.h:
        (WebCore::v8String):

2009-09-11  Ariya Hidayat  <ariya.hidayat@nokia.com>

        Reviewed by Simon Hausmann.

        Changed URLs from qtsoftware.com to qt.nokia.com, as part of a general
        renaming.

        * ChangeLog-2009-06-16:

2009-09-11  Thiago Macieira  <thiago.macieira@nokia.com>

        Reviewed by Simon Hausmann.

        Use LIBS_PRIVATE on Qt/Mac.

        On the Mac, it means "-framework ApplicationServices -framework Carbon
        -framework AppKit" are no longer part of the default LIBS in Qt
        applications. This required a lot of fixes where we used Mac-specific
        code in Qt.

        * WebCore.pro:

2009-09-11  Cameron McCormack  <cam@mcc.id.au>

        Reviewed by Eric Seidel.

        Remove duplicated WK_{u,l}cfirst subs from CodeGeneratorV8.pm
        https://bugs.webkit.org/show_bug.cgi?id=29165

        * bindings/scripts/CodeGeneratorV8.pm: Remove WK_ucfirst and
        WK_lcfirst, and call the ones in CodeGenerator.pm instead.

2009-09-11  Yongjun Zhang  <yongjun.zhang@nokia.com>

        Reviewed by Darin Adler.

        https://bugs.webkit.org/show_bug.cgi?id=29132
        Symbian winscw compiler fails compiling WebCore/text/RegularExpression.cpp.

        Add RegularExpression class qualifier before Private.

        * platform/text/RegularExpression.cpp:

2009-09-11  Yongjun Zhang  <yongjun.zhang@nokia.com>

        Reviewed by Darin Adler.

        https://bugs.webkit.org/show_bug.cgi?id=29131
        Use a different variadic macro format for Symbian compiler.
        
        Use arg... instead of ellipsis in variadic macro.        

        * platform/StaticConstructors.h:

2009-09-11  Jocelyn Turcotte  <jocelyn.turcotte@nokia.com>

        Reviewed by Simon Hausmann.

        https://bugs.webkit.org/show_bug.cgi?id=28806

        [Qt] Make the WebInspector available as a QWidget.

        * WebCore.pro:

2009-09-11  Simon Hausmann  <simon.hausmann@nokia.com>

        Unreviewed fix for the Web Inspector with the Qt build.

        Re-generate the Qt resource file by running
        WebKitTools/Scripts/generate-qt-inspector-resource

        * inspector/front-end/WebKit.qrc:

2009-09-11  Simon Hausmann  <simon.hausmann@nokia.com>

        Fix the Qt build, remove stray semicolon from function definition.

        * platform/graphics/qt/MediaPlayerPrivatePhonon.cpp:
        (WebCore::MediaPlayerPrivate::buffered):

2009-09-10  Adam Barth  <abarth@webkit.org>

        Reviewed by Sam Weinig.

        Detect mixed content
        https://bugs.webkit.org/show_bug.cgi?id=29003

        Detect some basic kinds of mixed content (HTTP content loaded into an
        HTTPS context).  This new detection logic isn't perfect, but it's a
        place to start.

        Tests: http/tests/security/mixedContent/about-blank-iframe-in-main-frame.html
               http/tests/security/mixedContent/data-url-iframe-in-main-frame.html
               http/tests/security/mixedContent/data-url-script-in-iframe.html
               http/tests/security/mixedContent/insecure-css-in-iframe.html
               http/tests/security/mixedContent/insecure-css-in-main-frame.html
               http/tests/security/mixedContent/insecure-iframe-in-iframe.html
               http/tests/security/mixedContent/insecure-iframe-in-main-frame.html
               http/tests/security/mixedContent/insecure-image-in-iframe.html
               http/tests/security/mixedContent/insecure-image-in-main-frame.html
               http/tests/security/mixedContent/insecure-script-in-iframe.html
               http/tests/security/mixedContent/redirect-http-to-https-iframe-in-main-frame.html
               http/tests/security/mixedContent/redirect-http-to-https-script-in-iframe.html
               http/tests/security/mixedContent/redirect-https-to-http-iframe-in-main-frame.html
               http/tests/security/mixedContent/redirect-https-to-http-script-in-iframe.html

        * loader/DocLoader.cpp:
        (WebCore::DocLoader::canRequest):
        (WebCore::DocLoader::requestResource):
        (WebCore::DocLoader::checkCacheObjectStatus):
        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::isMixedContent):
        (WebCore::FrameLoader::checkIfDisplayInsecureContent):
        (WebCore::FrameLoader::checkIfRunInsecureContent):
        * loader/FrameLoader.h:
        * loader/MainResourceLoader.cpp:
        (WebCore::MainResourceLoader::willSendRequest):

2009-09-10  Mark Rowe  <mrowe@apple.com>

        Fix the Windows build.

        Restore platform/mock to the header search path after it was removed in r48270.

        * WebCore.vcproj/WebCoreCommon.vsprops:

2009-09-08  Timothy Hatcher  <timothy@apple.com>

        Web Inspector: Move the option to create a new style rule under the Styles' gear menu.

        https://bugs.webkit.org/show_bug.cgi?id=29039

        Reviewed by Sam Weinig.

        * inspector/front-end/StylesSidebarPane.js:
        (WebInspector.StylesSidebarPane): Add "New Style Rule" option to the gear menu.
        (WebInspector.StylesSidebarPane.prototype._update): Check instanceof BlankStylePropertiesSection instead.
        (WebInspector.StylesSidebarPane.prototype._changeSetting): Added. Keeps the color format setting selected
        while calling the correct action.
        (WebInspector.StylesSidebarPane.prototype._createNewRule): Creates a new section and edits the selector.
        (WebInspector.StylesSidebarPane.prototype.addBlankSection): Insert the section in a cleaner way.
        (WebInspector.StylesSidebarPane.prototype.removeSection): Added. Removes the passed in section.
        (WebInspector.StylesSidebarPane.prototype.appropriateSelectorForNode): Return an empty string if there is no node.
        (WebInspector.StylePropertiesSection.prototype.expand): Removed the check for _blank.
        (WebInspector.StylePropertiesSection.prototype.startEditingSelector): No need for the context, the original selector
        is remembered by the editing code.
        (WebInspector.StylePropertiesSection.prototype.editingSelectorCancelled): Do nothing. The original text is already
        restored by the editing code.
        (WebInspector.BlankStylePropertiesSection): Call the StylePropertiesSection constructor with appropriate data.
        Remove event listener code.
        (WebInspector.BlankStylePropertiesSection.prototype.expand): Added. Does nothing to prevent expanding.
        (WebInspector.BlankStylePropertiesSection.prototype.editingSelectorCommitted.callback): Correctly construct the
        WebInspector.CSSStyleDeclaration. Call editingSelectorCancelled instead of editingCancelled.
        (WebInspector.BlankStylePropertiesSection.prototype.editingSelectorCommitted): Renamed from editingCommitted to
        override the base class.
        (WebInspector.BlankStylePropertiesSection.prototype.editingSelectorCancelled): Remove the section.
        (WebInspector.BlankStylePropertiesSection.prototype.makeNormal): Removed event listener code. Removed the delete lines
        since they were doing nothing (deleting nonexistent properties that exist only on the prototype.) Change prototypes at
        the end to correctly swtich to a real StylePropertiesSection.
        * inspector/front-end/inspector.js:
        (WebInspector.startEditing.editingCancelled): Ceck for null/undefined callbacks.
        (WebInspector.startEditing.editingCommitted): Ditto.

2009-09-10  Laszlo Gombos  <laszlo.1.gombos@nokia.com>

        Reviewed by Eric Seidel.

        [Qt] Fix comparison between signed and unsigned integer warnings
        https://bugs.webkit.org/show_bug.cgi?id=29162

        No functional change.

        * bridge/qt/qt_runtime.cpp:
        (JSC::Bindings::findMethodIndex):
        * platform/MIMETypeRegistry.cpp:
        (WebCore::initializeSupportedImageMIMETypes):
        (WebCore::initializeSupportedImageMIMETypesForEncoding):
        * platform/graphics/qt/GraphicsContextQt.cpp:
        (WebCore::GraphicsContext::drawFocusRing):
        * platform/graphics/qt/ImageDecoderQt.cpp:
        (WebCore::ImageDecoderQt::duration):
        (WebCore::ImageDecoderQt::imageAtIndex):
        * plugins/qt/PluginPackageQt.cpp:
        (WebCore::PluginPackage::fetchInfo):

2009-09-10  Martin Robinson  <martin.james.robinson@gmail.com>

        Reviewed by Gustavo Noronha.

        Build fix for GTK+ after r48267.

        * platform/graphics/gtk/MediaPlayerPrivateGStreamer.cpp:
        (WebCore::MediaPlayerPrivate::buffered):

2009-09-08  John Abd-El-Malek  <jam@chromium.org>

        Reviewed by Dimitri Glazkov.

        Remove unneeded define for ActiveX.
        https://bugs.webkit.org/show_bug.cgi?id=29054

        * rendering/RenderPartObject.cpp:
        (WebCore::createClassIdToTypeMap):
        (WebCore::serviceTypeForClassId):
        (WebCore::RenderPartObject::updateWidget):

2009-09-10  Mark Rowe  <mrowe@apple.com>

        Rubber-stamped by Sam Weinig.

        Don't copy IDL files in to the built framework.

        * WebCore.xcodeproj/project.pbxproj:

2009-09-10  Xiaomei Ji  <xji@chromium.org>

        Reviewed by Eric Seidel.

        Implment Range.expand().
        https://bugs.webkit.org/show_bug.cgi?id=27632

        Test: fast/dom/Range/range-expand.html

        * dom/Range.cpp:
        (WebCore::Range::expand):
        * dom/Range.h:
        * dom/Range.idl:

2009-09-10  Fumitoshi Ukai  <ukai@chromium.org>

        Reviewed by Alexey Proskuryakov.

        WebSocket API implementation.
        https://bugs.webkit.org/show_bug.cgi?id=28038
        
        Add build systems for GNUmakefile.am, WebCore.xcodeproj and
        WebCore.vcproj.
        Add websockets directory and WebSocket.idl in qt build system.
        Tests will be landed once the code is completed and functional.

        * DerivedSources.cpp:
        * GNUmakefile.am:
        * WebCore.pro:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.vcproj/WebCoreCommon.vsprops:
        * WebCore.xcodeproj/project.pbxproj:
        * bindings/js/JSDOMWindowCustom.cpp:
        (WebCore::JSDOMWindow::webSocket):
        * bindings/js/JSEventTarget.cpp:
        (WebCore::toJS):
        (WebCore::toEventTarget):
        * dom/EventTarget.cpp:
        (WebCore::EventTarget::toWebSocket):
        * dom/EventTarget.h:
        * page/DOMWindow.idl:
        * websockets/WebSocket.cpp:
        (WebCore::ProcessWebSocketEventTask::create):
        (WebCore::ProcessWebSocketEventTask::performTask):
        (WebCore::ProcessWebSocketEventTask::ProcessWebSocketEventTask):
        (WebCore::isValidProtocolString):
        (WebCore::WebSocket::connect):
        (WebCore::WebSocket::send):
        (WebCore::WebSocket::close):
        (WebCore::WebSocket::bufferedAmount):
        (WebCore::WebSocket::addEventListener):
        (WebCore::WebSocket::removeEventListener):
        (WebCore::WebSocket::dispatchEvent):
        (WebCore::WebSocket::didConnect):
        (WebCore::WebSocket::didReceiveMessage):
        (WebCore::WebSocket::didClose):
        (WebCore::WebSocket::dispatchOpenEvent):
        (WebCore::WebSocket::dispatchMessageEvent):
        (WebCore::WebSocket::dispatchCloseEvent):
        * websockets/WebSocket.h:
        (WebCore::WebSocket::create):
        (WebCore::WebSocket::):
        (WebCore::WebSocket::setOnopen):
        (WebCore::WebSocket::onopen):
        (WebCore::WebSocket::setOnmessage):
        (WebCore::WebSocket::onmessage):
        (WebCore::WebSocket::setOnclose):
        (WebCore::WebSocket::onclose):
        (WebCore::WebSocket::toWebSocket):
        (WebCore::WebSocket::eventListeners):
        (WebCore::WebSocket::refEventTarget):
        (WebCore::WebSocket::derefEventTarget):
        * websockets/WebSocketChannel.cpp: Added.
        * websockets/WebSocketChannel.h: Added.
        * websockets/WebSocketChannelClient.h: Added.
        * websockets/WebSocketHandshake.cpp: Added.
        * websockets/WebSocketHandshake.h: Added.

2009-09-10  Albert J. Wong  <ajwong@chromium.org>

        No review, windows build fix only.
        
        Spurious semicolon causing parse error in chromium build on windows.

        * platform/graphics/win/MediaPlayerPrivateQuickTimeWin.cpp:
        (WebCore::MediaPlayerPrivate::buffered):

2009-09-10  Albert J. Wong  <ajwong@chromium.org>

        No review, build fix only.

        Adding in a missed include from the last patch that is breaking the
        chromium build.

        * rendering/RenderThemeChromiumMac.mm: include TimeRanges.h

2009-09-10  Alpha Lam  <hclam@chromium.org>

        Reviewed by Eric Carlson.

        HTMLMediaElement buffered attribute should report a list of time ranges
        https://bugs.webkit.org/show_bug.cgi?id=29041

        Changed MediaPlayerPrivateInterface and MediaPlayer's definition to
        report a list of buffered time ranges as WebCore::TimeRanges. This
        change also got rid of the maxTimeBuffered() method.

        No new tests since this is a API change.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::percentLoaded):
        Use MediaPlaier::buffered() instead of maxTimeBuffered().
        (WebCore::HTMLMediaElement::buffered):
        ditto.
        * platform/graphics/MediaPlayer.cpp:
        (WebCore::NullMediaPlayerPrivate::buffered):
        Use MediaPlayerPrivateInterface::buffered() instead of maxTimeBuffered().
        (WebCore::MediaPlayer::buffered):
        ditto.
        * platform/graphics/MediaPlayer.h:
        Removed maxTimeBuffered() and defines PassRefPtr<TimeRanges> buffered().
        * platform/graphics/MediaPlayerPrivate.h:
        ditto.
        * platform/graphics/gtk/MediaPlayerPrivateGStreamer.cpp:
        Implements PassRefPtr<TimeRanges> buffered();
        * platform/graphics/gtk/MediaPlayerPrivateGStreamer.h:
        Removed maxTimeBuffered() and defines PassRefPtr<TimeRanges> buffered().
        * platform/graphics/mac/MediaPlayerPrivateQTKit.h:
        Removed maxTimeBuffered() and defines PassRefPtr<TimeRanges> buffered().
        * platform/graphics/mac/MediaPlayerPrivateQTKit.mm:
        (WebCore::MediaPlayerPrivate::buffered):
        Implementation of buffered().
        * platform/graphics/qt/MediaPlayerPrivatePhonon.cpp:
        Implements PassRefPtr<TimeRanegs> buffered().
        * platform/graphics/qt/MediaPlayerPrivatePhonon.h:
        Removed maxTimeBuffered() and defines PassRefPtr<TimeRanges> buffered().
        * platform/graphics/win/MediaPlayerPrivateQuickTimeWin.cpp:
        Implements PassRefPtr<TimeRanges> buffered().
        * platform/graphics/win/MediaPlayerPrivateQuickTimeWin.h:
        Removed maxTimeBuffered() and defines PassRefPtr<TimeRanges> buffered().
        * platform/graphics/wince/MediaPlayerPrivateWince.h:
        ditto.
        * rendering/RenderThemeChromiumMac.mm:
        (WebCore::RenderThemeChromiumMac::paintMediaSliderTrack):
        Use buffered() instead of maxTimeBuffered().
        * rendering/RenderThemeChromiumSkia.cpp:
        ditto.
        * rendering/RenderThemeMac.mm:
        (WebCore::RenderThemeMac::paintMediaSliderTrack):
        ditto.

2009-09-10  Cameron McCormack  <cam@mcc.id.au>

        Reviewed by Eric Seidel.

        Make bindings generators more aware of IDL dependencies
        https://bugs.webkit.org/show_bug.cgi?id=29114

        Make the JS and ObjC bindings generators able to output dependency
        rules for DerivedSources.make to consume.  These rules make a given
        generated binding class file header, JSWhatever.h, depend on Whatever's
        ancestor interfaces.

        * DerivedSources.make: Pass --write-dependencies to generate-bindings.pl
        when generating JS and ObjC bindings.  Include dependency fies that are
        generated due to that.
        * bindings/scripts/CodeGenerator.pm: Make
        AddMethodsConstantsAndAttributesFromParentClasses accumulate a list of
        the ancestor interfaces that were visited.
        * bindings/scripts/CodeGeneratorJS.pm: Optionally write out a dependency
        file.
        * bindings/scripts/CodeGeneratorObjC.pm: Ditto.
        * bindings/scripts/generate-bindings.pl: Add a --write-dependencies
        option.

2009-09-10  Gustavo Noronha Silva  <gustavo.noronha@collabora.co.uk>

        Reviewed by Xan Lopez and Dan Winship.

        Give all requests to libsoup, to let it queue, and schedule them
        itself, instead of throttling the number of requests in WebCore.

        * platform/network/ResourceRequestBase.cpp:
        * platform/network/soup/ResourceRequestSoup.cpp:
        (WebCore::initializeMaximumHTTPConnectionCountPerHost):

2009-09-10  Jian Li  <jianli@chromium.org>

        Reviewed by Eric Seidel.

        [V8] Make XMLHttpRequest.send handle File object.
        https://bugs.webkit.org/show_bug.cgi?id=28924

        Test: http/tests/local/send-dragged-file.html

        * bindings/v8/custom/V8XMLHttpRequestCustom.cpp:
        (WebCore::CALLBACK_FUNC_DECL):

2009-09-10  Zoltan Horvath  <zoltan@webkit.org>

        Reviewed by Darin Adler.

        Use fastNew and fastDelete instead of operator new and delete for CSSSelector class. 
        https://bugs.webkit.org/show_bug.cgi?id=25930

        Change using of operator new to fastNew and operator delete to
        fastDeleteSkippingDestructor for CSSSelector class to avoid mismatched function call.

        This change fixes valgrind's 'mismatched free' notification.

        * css/CSSParser.cpp:
        (WebCore::CSSParser::~CSSParser):
        (WebCore::CSSParser::createFloatingSelector):
        * css/CSSSelectorList.cpp:
        (WebCore::CSSSelectorList::adoptSelectorVector):

2009-09-10  Steve Block  <steveblock@google.com>

        Reviewed by Darin Adler.

        Geolocation does not correctly handle reentrant calls from callbacks.
        https://bugs.webkit.org/show_bug.cgi?id=29040

        Tests: fast/dom/Geolocation/reentrant-error.html
               fast/dom/Geolocation/reentrant-success.html

        * page/Geolocation.cpp: Modified.
        (WebCore::Geolocation::handleError): Modified. Call sendError directly, clearing notifier lists before making callback.
        (WebCore::Geolocation::makeSuccessCallbacks): Modified. Call sendPosition directly, clearing notifier lists before making callback.
        * page/Geolocation.h: Modified. Deleted sendErrorToXX and sendPositionToXXX methods.

2009-09-10  Erik Arvidsson  <arv@chromium.org>

        Reviewed by Eric Seidel.

        Fixes issue where focused elements did not get blur and focus events when the window was blurred and focused.
        https://bugs.webkit.org/show_bug.cgi?id=27105

        Test: fast/events/blur-focus-window-should-blur-focus-element.html

        * page/FocusController.cpp:
        (WebCore::dispatchEventsOnWindowAndFocusedNode):
        (WebCore::FocusController::setFocused):
        (WebCore::FocusController::setActive):

2009-09-10  Adam Roben  <aroben@apple.com>

        Make the play/pause button in <video> controls indicate the button's
        action, not the movie state

        This matches the Mac behavior, iTunes, and many other media players.

        No test possible.

        Fixes <http://webkit.org/b/29126> Play/pause button in <video>
        controls shows the wrong image

        Reviewed by Eric Carlson.

        * rendering/RenderMediaControls.cpp:
        (WebCore::RenderMediaControls::paintMediaControlsPart): Reversed when
        we show the play vs. pause artwork, so that the button reflects what
        will happen when you click it, rather than the current state of the
        movie.

2009-09-09  Steve Block  <steveblock@google.com>

        Reviewed by Maciej Stachowiak.

        Geolocation Coordinates::toString() prints bogus values for unspecified properties.
        https://bugs.webkit.org/show_bug.cgi?id=29080

        Test: fast/dom/Geolocation/position-string.html

        * GNUmakefile.am: Modified. Removes Geoposition.cpp and Coordinates.cpp.
        * WebCore.gypi: Modified. Removes Geoposition.cpp and Coordinates.cpp.
        * WebCore.pro: Modified. Removes Geoposition.cpp and Coordinates.cpp.
        * WebCore.vcproj/WebCore.vcproj: Modified. Removes Geoposition.cpp and Coordinates.cpp.
        * WebCore.xcodeproj/project.pbxproj: Modified. Removes Geoposition.cpp and Coordinates.cpp.
        * WebCoreSources.bkl: Modified. Removes Geoposition.cpp and Coordinates.cpp.
        * page/Coordinates.cpp: Removed.
        * page/Coordinates.h: Modified. Removes toString method.
        * page/Coordinates.idl: Modified. Removes toString method.
        * page/Geoposition.cpp: Removed.
        * page/Geoposition.h: Modified. Removes toString method.
        * page/Geoposition.idl: Modified. Removes toString method.

2009-09-09  Steve Block  <steveblock@google.com>

        Reviewed by Adam Barth.

        Correctly applies the Geolocation timeout property.
        https://bugs.webkit.org/show_bug.cgi?id=27256

        If a timeout is specified, the timer is started as soon as the location acquistion process starts.
        If a position fix is not obtained within the timeout interval, the position request is cancelled
        and the error callback (if specified) is invoked. If a position fix is obtained within the timeout
        interval, the timer is stopped. Permissions are then requested from the user if required. See
        http://www.w3.org/TR/geolocation-API/#position-options.

        Note that this logic means that the time required to obtain permissions from the user is not
        included in the timeout interval.

        Tests: fast/dom/Geolocation/timeout.html
               fast/dom/Geolocation/timeout-zero.html

        * page/Geolocation.cpp: Modified.
        (WebCore::Geolocation::GeoNotifier::GeoNotifier): Modified. Takes Geolocation object as parameter.
        (WebCore::Geolocation::GeoNotifier::hasZeroTimeout): Added. Determines whether this request has a zero timeout.
        (WebCore::Geolocation::GeoNotifier::startTimerIfNeeded): Renamed from startTimer. Starts the timer if a timeout was specified.
        (WebCore::Geolocation::GeoNotifier::timerFired): Modified. Calls the error callback if specified, and reports the timeout to the Geolocation object.
        (WebCore::Geolocation::getCurrentPosition): Modified. Calls maybeStartTimer when starting the location acquisition process.
        (WebCore::Geolocation::watchPosition): Modified. Calls maybeStartTimer when starting the location acquisition process.
        (WebCore::Geolocation::requestTimedOut): Added. Cancels a request when it times out.
        (WebCore::Geolocation::setIsAllowed): Modified. No longer starts timers.
        (WebCore::Geolocation::sendPosition): Modified. No longer stops timers.
        (WebCore::Geolocation::stopTimer): Added. Stops the timers for a vector of notifiers.
        (WebCore::Geolocation::stopTimersForOneShots): Added. Stops the timers for all one-shots.
        (WebCore::Geolocation::stopTimersForWatchers): Added. Stops the timers for all watchers.
        (WebCore::Geolocation::stopTimers): Added. Stops the timers for all requests.
        (WebCore::Geolocation::geolocationServicePositionChanged): Modfified. Stops the timers for all requests.
        * page/Geolocation.h: Modified.
        (WebCore::Geolocation::GeoNotifier::create): Modified. Takes Geolocation object as parameter.

2009-09-09  Chris Fleizach  <cfleizach@apple.com>

        AX notifications should be an ENUM type instead of strings
        https://bugs.webkit.org/show_bug.cgi?id=28963

        Build fix for Qt.

        * accessibility/AXObjectCache.h:
        (WebCore::AXObjectCache::postNotification):
        (WebCore::AXObjectCache::postPlatformNotification):

2009-09-08  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by Darin Adler.

        AX notifications should be an ENUM type instead of strings
        https://bugs.webkit.org/show_bug.cgi?id=28963

        Moves AX notifications over to an ENUM type instead of
        using the actual string values that are used on OS X.

        * accessibility/AXObjectCache.cpp:
        (WebCore::AXObjectCache::postNotification):
        (WebCore::AXObjectCache::selectedChildrenChanged):
        * accessibility/AXObjectCache.h:
        (WebCore::AXObjectCache::):
        * accessibility/AccessibilityRenderObject.cpp:
        (WebCore::AccessibilityRenderObject::handleActiveDescendantChanged):
        * accessibility/chromium/AXObjectCacheChromium.cpp:
        (WebCore::AXObjectCache::postPlatformNotification):
        * accessibility/gtk/AXObjectCacheAtk.cpp:
        (WebCore::AXObjectCache::postPlatformNotification):
        * accessibility/mac/AXObjectCacheMac.mm:
        (WebCore::AXObjectCache::postPlatformNotification):
        * accessibility/win/AXObjectCacheWin.cpp:
        (WebCore::AXObjectCache::postPlatformNotification):
        * dom/Document.cpp:
        (WebCore::Document::implicitClose):
        * dom/Element.cpp:
        (WebCore::Element::updateAfterAttributeChanged):
        * editing/Editor.cpp:
        (WebCore::Editor::respondToChangedContents):
        * editing/mac/SelectionControllerMac.mm:
        (WebCore::SelectionController::notifyAccessibilityForSelectionChange):
        * html/HTMLInputElement.cpp:
        (WebCore::HTMLInputElement::setChecked):
        * page/FrameView.cpp:
        (WebCore::FrameView::layout):
        * rendering/RenderTextControl.cpp:
        (WebCore::RenderTextControl::setInnerTextValue):

2009-09-08  Adam Barth  <abarth@webkit.org>

        Reviewed by Eric Seidel.

        Missing checkout for getSVGDocument()
        https://bugs.webkit.org/show_bug.cgi?id=29064

        The V8 code generator didn't understand SVGCheckSecurityDocument.

        Tests: http/tests/security/xss-DENIED-getSVGDocument-iframe.html
               http/tests/security/xss-DENIED-getSVGDocument-object.html

        * bindings/scripts/CodeGeneratorV8.pm:

2009-09-09  Cameron McCormack  <cam@mcc.id.au>

        Reviewed by Eric Seidel.

        Make SVGStyleElement inherit from SVGLangSpace
        https://bugs.webkit.org/show_bug.cgi?id=29058

        Required by SVG 1.1 Second Edition:
        http://dev.w3.org/SVG/profiles/1.1F2/publish/styling.html#InterfaceSVGStyleElement

        Test: svg/dom/SVGStyleElement/style-langspace.html

        * svg/SVGStyleElement.cpp: Drop methods xmlspace and setXmlspace.
        (WebCore::SVGStyleElement::SVGStyleElement): Add SVGLangSpace()
        initializer.
        (WebCore::SVGStyleElement::parseMappedAttribute): Call
        parseMappedAttribute on SVGLangSpace.
        * svg/SVGStyleElement.h: Drop xmlspace and setXmlspace declarations.
        * svg/SVGStyleElement.idl: Drop xmlspace attribute and add SVGLangSpace
        as a superinterface.

2009-09-09  Nate Chapin  <japhet@chromium.org>

        Reviewed by David Levin.

        Remove unnecessary includes and forward declarations in V8Proxy.h

        https://bugs.webkit.org/show_bug.cgi?id=29111

        * bindings/v8/V8Proxy.h:

2009-07-30  Eric Seidel  <eric@webkit.org>

        Reviewed by Adam Barth.

        Add more position constructors
        positionBeforeNode, positionAfterNode
        firstPositionInNode, lastPositionInNode
        https://bugs.webkit.org/show_bug.cgi?id=25494

        I also added a lastOffsetInNode and deployed it to a couple places.

        There are no callers to these new constructors yet, but those
        will be coming in future patches.

        * dom/Position.cpp:
        (WebCore::Position::computeOffsetInContainerNode):
        * dom/Position.h:
        (WebCore::positionBeforeNode):
        (WebCore::positionAfterNode):
        (WebCore::lastOffsetInNode):
        (WebCore::firstPositionInNode):
        (WebCore::lastPositionInNode):
        * editing/ApplyStyleCommand.cpp:
        * editing/TextIterator.cpp:
        (WebCore::SimplifiedBackwardsTextIterator::SimplifiedBackwardsTextIterator):
        * editing/htmlediting.cpp:
        (WebCore::lastOffsetForEditing):

2009-04-30  Eric Seidel  <eric@webkit.org>

        Reviewed by Adam Barth.

        Rename positionBeforeNode to positionInParentBeforeNode
        and positionAfterNode to positionInParentAfterNode
        in preparation for adding a positionBeforeNode
        which returns a neighbor-anchored position.
        https://bugs.webkit.org/show_bug.cgi?id=25494

        No functional changes, thus no tests.

        * dom/PositionConstructors.h:
        (WebCore::positionInParentBeforeNode):
        (WebCore::positionInParentAfterNode):
        * dom/PositionIterator.cpp:
        (WebCore::PositionIterator::operator Position):
        * editing/ApplyStyleCommand.cpp:
        (WebCore::ApplyStyleCommand::applyInlineStyle):
        * editing/CompositeEditCommand.cpp:
        (WebCore::CompositeEditCommand::positionOutsideTabSpan):
        (WebCore::CompositeEditCommand::breakOutOfEmptyMailBlockquotedParagraph):
        (WebCore::CompositeEditCommand::positionAvoidingSpecialElementBoundary):
        * editing/CreateLinkCommand.cpp:
        (WebCore::CreateLinkCommand::doApply):
        * editing/DeleteButtonController.cpp:
        (WebCore::DeleteButtonController::deleteTarget):
        * editing/DeleteSelectionCommand.cpp:
        (WebCore::DeleteSelectionCommand::initializeStartEnd):
        (WebCore::updatePositionForNodeRemoval):
        * editing/InsertLineBreakCommand.cpp:
        (WebCore::InsertLineBreakCommand::doApply):
        * editing/InsertListCommand.cpp:
        (WebCore::InsertListCommand::doApply):
        * editing/InsertParagraphSeparatorCommand.cpp:
        (WebCore::InsertParagraphSeparatorCommand::doApply):
        * editing/InsertTextCommand.cpp:
        (WebCore::InsertTextCommand::input):
        * editing/ReplaceSelectionCommand.cpp:
        (WebCore::ReplaceSelectionCommand::positionAtStartOfInsertedContent):
        (WebCore::ReplaceSelectionCommand::doApply):
        * editing/VisibleSelection.cpp:
        (WebCore::VisibleSelection::adjustSelectionToAvoidCrossingEditingBoundaries):
        * editing/htmlediting.cpp:
        (WebCore::firstEditablePositionAfterPositionInRoot):
        (WebCore::lastEditablePositionBeforePositionInRoot):
        (WebCore::rangeCompliantEquivalent):
        (WebCore::positionBeforeContainingSpecialElement):
        (WebCore::positionAfterContainingSpecialElement):
        (WebCore::positionBeforeTabSpan):

2009-04-30  Eric Seidel  <eric@webkit.org>

        Reviewed by Adam Barth.

        Re-organize position creation functions in preparation for adding more
        https://bugs.webkit.org/show_bug.cgi?id=25494

        Make position functions inline to avoid ref-churn.
        Remove startPosition/endPosition as they were only used in one place.

        No functional changes, thus no tests.

        * dom/Position.cpp:
        * dom/Position.h:
        (WebCore::positionBeforeNode):
        (WebCore::positionAfterNode):
        * editing/SelectionController.cpp:
        (WebCore::SelectionController::moveTo):
        * editing/TypingCommand.cpp:
        * editing/htmlediting.cpp:
        * editing/htmlediting.h:
        (WebCore::firstDeepEditingPositionForNode):
        (WebCore::lastDeepEditingPositionForNode):
        * rendering/RenderObject.cpp:

2009-09-09  Kevin Watters  <kevinwatters@gmail.com>

        Reviewed by Kevin Ollivier.
        
        [wx] Add wxSize conversions for IntSize.
        https://bugs.webkit.org/show_bug.cgi?id=29104

        * platform/graphics/IntSize.h:
        * platform/graphics/wx/IntSizeWx.cpp: Added.
        (WebCore::IntSize::IntSize):
        (WebCore::IntSize::operator wxSize):

2009-09-09  Yaar Schnitman  <yaar@chromium.org>

        Reviewed by David Levin.
        
        Chromium uses its own config.h file that was forked from webkit's config.h.
        By merging in Chromium's defines, Chromium would again be able to use webkit's
        config.h.

        https://bugs.webkit.org/show_bug.cgi?id=28882 

        * config.h: Added chromium-specific defines. 

2009-09-09  Jens Alfke  <snej@chromium.org>

        Reviewed by Eric Seidel.

        Initialize DataTransfer's effectAllowed and dropEffect properties correctly
        according to HTML5 spec (sec. 7.9.2-7.9.3).
        https://bugs.webkit.org/show_bug.cgi?id=26700
        - At the start of a drag operation, the value of effectAllowed should be
          the string "uninitialized".
        - At end of dragstart handler, if effectAllowed hasn't been set yet, it
          should be set to "copy".
        - on dragenter and dragover event, dropEffect should be initialized to a
          default value based on the value of effectAllowed.
        - at end of dragenter and dragover the dropEffect should be set to "none"
          if the value set by the handler doesn't match the effectAllowed.
        - on dragleave event, dropEffect should be "none".
        - on drop event, dropEffect should be the previously negotiated value.

        Test: fast/events/drag-dropeffect.html

        * WebCore.base.exp:
            Added a parameter to EventHandler::dragSourceMovedTo.
        * dom/Clipboard.cpp:
        (WebCore::Clipboard::Clipboard):
            Initialize m_effectAllowed to "uninitialized".
        (WebCore::Clipboard::sourceOperation):
            Treat "uninitialized" as meaning no value has been set.
        * page/DragController.cpp:
        (WebCore::DragController::DragController):
            Initialize new member m_destinationDragOperation.
        (WebCore::DragController::dragExited):
            Set m_destinationDragOperation to none on dragExit.
        (WebCore::DragController::performDrag):
            Set m_destinationDragOperation to current dropEffect.
        (WebCore::DragController::dragEnteredOrUpdated):
            Make sure to clear the operation if drag source doesn't allow it.
        (WebCore::DragController::tryDHTMLDrag):
            Set a default value for the dst drag op before sending dragEnter/Over.
        (WebCore::DragController::startDrag):
            Clear m_destinationDragOperation at start of drag.
        * page/DragController.h:
        (WebCore::DragController::destinationDragOperation):
            Added new member m_destinationDragOperation, and its public getter.
        * page/EventHandler.cpp:
        (WebCore::EventHandler::updateDragAndDrop):
            dropEffect should be 'none' during dropleave handler, per spec.
        (WebCore::EventHandler::dragSourceMovedTo):
            Added DragOperation parameter, so the handler sees the current dropEffect.
        (WebCore::EventHandler::handleDrag):
            Assume DragOperationEvery for non-DHTML drags.
        * page/EventHandler.h:
            Added DragOperation parameter to dragSourceMovedTo().

2009-09-09  Dumitru Daniliuc  <dumi@chromium.org>

        Reviewed by Dimitri Glazkov.

        1. Adding support/bindings for read-only transactions.
        2. Disallowing the SQLITE_*_VIEW and REINDEX operations in the
        private browsing mode.
        3. Adding an authorizer test.

        https://bugs.webkit.org/show_bug.cgi?id=28918

        Test: storage/test-authorizer.html

        * bindings/js/JSDatabaseCustom.cpp:
        (WebCore::createTransaction): Parses all arguments and executes a
        transaction.
        (WebCore::JSDatabase::transaction): Refactored to use
        createTransaction().
        (WebCore::JSDatabase::readTransaction): Added to execute read-only
        transactions using createTransaction().
        * bindings/v8/custom/V8CustomBinding.h: Added the binding for
        Database::readTransaction().
        * bindings/v8/custom/V8DatabaseCustom.cpp:
        (WebCore::createTransaction): Parses all arguments and executes a
        transaction.
        (WebCore::transaction): Refactored to use createTransaction().
        (WebCore::readTransaction): Added to execute read-only
        transactions using createTransaction().
        * storage/Database.cpp:
        (WebCore::Database::transaction): Added support for read-only
        transactions.
        * storage/Database.h: Added support for read-only transactions.
        * storage/Database.idl: Added support for read-only transactions.
        * storage/DatabaseAuthorizer.cpp:
        (WebCore::DatabaseAuthorizer::createTempTable): Make it obvious
        that the statement will be denied in private browsing mode and
        read-only transactions.
        (WebCore::DatabaseAuthorizer::dropTempTable): Same.
        (WebCore::DatabaseAuthorizer::createTempIndex): Same.
        (WebCore::DatabaseAuthorizer::dropTempIndex): Same.
        (WebCore::DatabaseAuthorizer::createTempTrigger): Same.
        (WebCore::DatabaseAuthorizer::dropTempTrigger): Same.
        (WebCore::DatabaseAuthorizer::createView): Deny in private
        browsing mode and read-only transactions.
        (WebCore::DatabaseAuthorizer::createTempView): Same.
        (WebCore::DatabaseAuthorizer::dropView): Same.
        (WebCore::DatabaseAuthorizer::dropTempView): Same.
        (WebCore::DatabaseAuthorizer::allowReindex): Same.
        * storage/DatabaseAuthorizer.h:
        * storage/SQLTransaction.cpp: Added support for read-only
        transactions.
        (WebCore::SQLTransaction::create):
        (WebCore::SQLTransaction::SQLTransaction):
        (WebCore::SQLTransaction::executeSQL):
        (WebCore::SQLTransaction::acquireLock):
        * storage/SQLTransaction.h:
        * storage/SQLTransactionCoordinator.cpp:
        (WebCore::SQLTransactionCoordinator::acquireLock): Added a new
        parameter in preparation for a change that will allow multiple
        read-only transactions on the same DB to run concurrently.
        * storage/SQLTransactionCoordinator.h:

2009-09-09  Dave Hyatt  <hyatt@apple.com>

        Reviewed by Adam Roben.

        https://bugs.webkit.org/show_bug.cgi?id=29102, add support for user stylesheet injection.  This is similar
        to user script injection but allows for user stylesheets to be added.  The stylesheets are applied immediately
        to all Frames in the PageGroup.

        Added userscripts/simple-stylesheet.html test case.

        * WebCore.base.exp:
        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * css/CSSStyleSelector.cpp:
        (WebCore::CSSStyleSelector::CSSStyleSelector):
        * css/CSSStyleSelector.h:
        * dom/Document.cpp:
        (WebCore::Document::Document):
        (WebCore::Document::attach):
        (WebCore::Document::pageGroupUserSheets):
        (WebCore::Document::clearPageGroupUserSheets):
        (WebCore::Document::recalcStyleSelector):
        * dom/Document.h:
        * loader/PlaceholderDocument.cpp:
        (WebCore::PlaceholderDocument::attach):
        * page/PageGroup.cpp:
        (WebCore::PageGroup::addUserStyleSheet):
        (WebCore::PageGroup::removeUserContentForWorld):
        (WebCore::PageGroup::removeAllUserContent):
        * page/PageGroup.h:
        (WebCore::PageGroup::userStyleSheets):
        * page/UserStyleSheet.h: Added.
        (WebCore::UserStyleSheet::UserStyleSheet):
        (WebCore::UserStyleSheet::source):
        (WebCore::UserStyleSheet::url):
        (WebCore::UserStyleSheet::patterns):
        (WebCore::UserStyleSheet::worldID):
        * page/UserStyleSheetTypes.h: Added.

2009-09-09  Carol Szabo  <carol.szabo@nokia.com>

        Reviewed by Ariya Hidayat.

        [Qt] CSS Style -webkit-box-shadow is not rendered correctly on
        Qt platform
        https://bugs.webkit.org/show_bug.cgi?id=23291

        * platform/graphics/qt/GraphicsContextQt.cpp:
        (WebCore::GraphicsContext::drawRect):
        (WebCore::GraphicsContext::strokeArc):
        (WebCore::GraphicsContext::drawConvexPolygon):
        (WebCore::GraphicsContext::fillPath):
        (WebCore::GraphicsContext::strokePath):
        (WebCore::GraphicsContext::fillRect):
        (WebCore::GraphicsContext::fillRoundedRect):
         Added the ability to draw shadows for all these curves.

2009-09-09  Kenneth Rohde Christiansen  <kenneth@webkit.org>

        Reviewed by Simon Hausmann.

        Add the qwebgraphicsitem.cpp to the build system.

        https://bugs.webkit.org/show_bug.cgi?id=28862

        * WebCore.pro:

2009-09-09  Kevin Watters  <kevinwatters@gmail.com>

        Reviewed by Kevin Ollivier.

        [wx port] Move functions in TemporaryLinkStubs.cpp out to files where
        they belong.

        https://bugs.webkit.org/show_bug.cgi?id=29088

        * editing/wx/EditorWx.cpp:
        (WebCore::Editor::showColorPanel):
        (WebCore::Editor::showFontPanel):
        (WebCore::Editor::showStylesPanel):
        * platform/graphics/wx/GraphicsContextWx.cpp:
        (WebCore::GraphicsContext::setPlatformShadow):
        (WebCore::GraphicsContext::clearPlatformShadow):
        (WebCore::GraphicsContext::beginTransparencyLayer):
        (WebCore::GraphicsContext::endTransparencyLayer):
        (WebCore::GraphicsContext::clearRect):
        (WebCore::GraphicsContext::strokeRect):
        (WebCore::GraphicsContext::setLineCap):
        (WebCore::GraphicsContext::setLineJoin):
        (WebCore::GraphicsContext::setMiterLimit):
        (WebCore::GraphicsContext::setAlpha):
        (WebCore::GraphicsContext::addInnerRoundedRectClip):
        * platform/graphics/wx/IconWx.cpp: Added.
        (WebCore::Icon::~Icon):
        (WebCore::Icon::createIconForFile):
        (WebCore::Icon::createIconForFiles):
        (WebCore::Icon::paint):
        * platform/graphics/wx/ImageWx.cpp:
        (WebCore::Image::loadPlatformResource):
        (WebCore::Image::drawPattern):
        * platform/wx/CursorWx.cpp:
        (WebCore::moveCursor):
        * platform/wx/FileChooserWx.cpp: Added.
        (WebCore::FileChooser::basenameForWidth):
        * platform/wx/KURLWx.cpp: Added.
        (WebCore::KURL::fileSystemPath):
        * platform/wx/SSLKeyGeneratorWx.cpp: Added.
        (WebCore::getSupportedKeySizes):
        (WebCore::signedPublicKeyAndChallengeString):
        * platform/wx/SearchPopupMenuWx.cpp: Added.
        (WebCore::SearchPopupMenu::SearchPopupMenu):
        (WebCore::SearchPopupMenu::saveRecentSearches):
        (WebCore::SearchPopupMenu::loadRecentSearches):
        (WebCore::SearchPopupMenu::enabled):
        * platform/wx/SharedBufferWx.cpp: Added.
        (WebCore::SharedBuffer::createWithContentsOfFile):
        * platform/wx/SystemTimeWx.cpp: Added.
        (WebCore::userIdleTime):
        * platform/wx/TemporaryLinkStubs.cpp: Removed.
        * platform/wx/TextBreakIteratorInternalICUWx.cpp: Added.
        (WebCore::currentSearchLocaleID):
        (WebCore::currentTextBreakLocaleID):
        * platform/wx/WidgetWx.cpp:
        (WebCore::Widget::setIsSelected):

2009-09-09  Steve Block  <steveblock@google.com>

        Reviewed by Adam Barth.

        Geolocation incorrectly calls error callback in case of exception in success callback.
        https://bugs.webkit.org/show_bug.cgi?id=27255

        Test: fast/dom/Geolocation/callback-exception.html

        * bindings/js/JSCustomPositionCallback.cpp: Modified.
        (WebCore::JSCustomPositionCallback::handleEvent): Modified. Removed raisedException out param.
        * bindings/js/JSCustomPositionCallback.h: Modified. Removed raisedException out param from handleEvent method and made handleEvent private.
        * bindings/js/JSCustomPositionErrorCallback.h: Modified. Made handleEvent private.
        * page/Geolocation.cpp: Modified.
        (WebCore::Geolocation::sendPosition): Modified. No longer call error callback in case of exception in success callback.
        * page/PositionCallback.h: Modified. Removed raisedException out param from handleEvent method.

2009-09-09  Steve Block  <steveblock@google.com>

        Reviewed by Darin Adler.

        When Geolocation permission is denied, stops watches as well as one-shots.
        https://bugs.webkit.org/show_bug.cgi?id=28305.

        Tests: fast/dom/Geolocation/watch.html
               fast/dom/Geolocation/permission-denied-stops-watches.html

        * page/Geolocation.cpp: Modified.
        (WebCore::Geolocation::setIsAllowed): Modified. Marks the permission error as fatal.
        (WebCore::Geolocation::handleError): Modified. If the error is fatal, stops watchers as well as one-shots.
        * page/PositionError.h: Modified.
        (WebCore::PositionError::setIsFatal): Added. Marks an error as fatal.
        (WebCore::PositionError::isFatal): Added. Determines whether an error is fatal.

2009-09-09  Roland Steiner  <rolandsteiner@google.com>

        Reviewed by Eric Seidel.

        Bug 28964 -  [Chromium] ChromiumDataObject should have getter/setter interface

        Added getter/setter methods and trivial inline implementations for each.
        (Note that they are not yet actually used.)
        Once the Chromium code is changed to use them instead of directly accessing the
        member variables, the member variables should be made private and cleaned up.

        No new tests (no functional behavior changed).

        * platform/chromium/ChromiumDataObject.h:
        (WebCore::ChromiumDataObject::mainURL):
        (WebCore::ChromiumDataObject::setMainURL):
        (WebCore::ChromiumDataObject::mainURLTitle):
        (WebCore::ChromiumDataObject::setMainURLTitle):
        (WebCore::ChromiumDataObject::textPlain):
        (WebCore::ChromiumDataObject::setTextPlain):
        (WebCore::ChromiumDataObject::textHTML):
        (WebCore::ChromiumDataObject::setTextHTML):
        (WebCore::ChromiumDataObject::htmlBaseURL):
        (WebCore::ChromiumDataObject::setHTMLBaseURL):
        (WebCore::ChromiumDataObject::content):
        (WebCore::ChromiumDataObject::releaseContent):
        (WebCore::ChromiumDataObject::setContent):
        (WebCore::ChromiumDataObject::contentFileExtension):
        (WebCore::ChromiumDataObject::setContentFileExtension):
        (WebCore::ChromiumDataObject::contentFileName):
        (WebCore::ChromiumDataObject::setContentFileName):
        (WebCore::ChromiumDataObject::fileNames):
        (WebCore::ChromiumDataObject::setFileNames):
        (WebCore::ChromiumDataObject::takeFileNames):

2009-09-08  Pat Bradley  <vincent.bradley@nokia.com>

        Reviewed by Ariya Hidayat.

        [Qt] locale date displays incorrect date format in symbian.
        https://bugs.webkit.org/show_bug.cgi?id=29032

        strftime() in Symbian does not support #
        Layout tests cannot be run on Symbian yet, so they are not updated.

        * runtime/DatePrototype.cpp:
        (JSC::formatLocaleDate):

2009-09-09  Rohini Ananth <rohini.ananth@nokia.com>

        Reviewed by Simon Hausmann.

        NPAPI Plugin NPP_AsFile not working on Qt Webkit
        https://bugs.webkit.org/show_bug.cgi?id=29068

        * platform/qt/FileSystemQt.cpp:
        (WebCore::openTemporaryFile)
        Autoremove property of QTemporaryFile has been set to false. Hence closeFile() just closes and does not delete the file.
        This solves the deletion of created temp file in PluginStream::destroyStream() before passing to plugin in NPP_AsFile.

2009-09-08  Oliver Hunt  <oliver@apple.com>

        Reviewed by NOBODY (Build fix).

        Remove a few incorrect changes I left in.

        * bindings/scripts/CodeGeneratorJS.pm:

2009-09-08  Oliver Hunt  <oliver@apple.com>

        Reviewed by Sam Weinig.

        Support numeric index getters in bindings
        https://bugs.webkit.org/show_bug.cgi?id=29067

        Add HasNumericIndexGetter to indicate a non-custom getter that
        returns a number.  The numeric index getter also uses PropertySlot's
        setValue rather than setCustomIndex to avoid an additional indirect
        call.

        * bindings/js/JSCanvasByteArrayCustom.cpp:
        * bindings/js/JSCanvasFloatArrayCustom.cpp:
        * bindings/js/JSCanvasIntArrayCustom.cpp:
        * bindings/js/JSCanvasShortArrayCustom.cpp:
        * bindings/js/JSCanvasUnsignedByteArrayCustom.cpp:
        * bindings/js/JSCanvasUnsignedIntArrayCustom.cpp:
        * bindings/js/JSCanvasUnsignedShortArrayCustom.cpp:
        * bindings/scripts/CodeGeneratorJS.pm:
        * html/canvas/CanvasByteArray.h:
        (WebCore::CanvasByteArray::item):
        * html/canvas/CanvasByteArray.idl:
        * html/canvas/CanvasFloatArray.h:
        (WebCore::CanvasFloatArray::get):
        (WebCore::CanvasFloatArray::item):
        * html/canvas/CanvasFloatArray.idl:
        * html/canvas/CanvasIntArray.h:
        (WebCore::CanvasIntArray::get):
        (WebCore::CanvasIntArray::item):
        * html/canvas/CanvasIntArray.idl:
        * html/canvas/CanvasPixelArray.idl:
        * html/canvas/CanvasShortArray.h:
        (WebCore::CanvasShortArray::get):
        (WebCore::CanvasShortArray::item):
        * html/canvas/CanvasShortArray.idl:
        * html/canvas/CanvasUnsignedByteArray.h:
        (WebCore::CanvasUnsignedByteArray::get):
        (WebCore::CanvasUnsignedByteArray::item):
        * html/canvas/CanvasUnsignedByteArray.idl:
        * html/canvas/CanvasUnsignedIntArray.h:
        (WebCore::CanvasUnsignedIntArray::get):
        (WebCore::CanvasUnsignedIntArray::item):
        * html/canvas/CanvasUnsignedIntArray.idl:
        * html/canvas/CanvasUnsignedShortArray.h:
        (WebCore::CanvasUnsignedShortArray::item):
        * html/canvas/CanvasUnsignedShortArray.idl:

2009-09-08  Kevin Ollivier  <kevino@theolliviers.com>

        wx build fix for 2.8.

        * platform/wx/wxcode/mac/carbon/scrollbar_render.cpp:
        (wxRenderer_DrawScrollbar):

2009-09-08  Jens Alfke  <snej@chromium.org>

        Reviewed by Eric Seidel.

        In Mac Chromium, clicking below the last line of an editable area (textarea or
        contenteditable) should put the caret at the end of the last line, as in Mac Safari.

        Tests: LayoutTests/editing/selection/click-in-margins-inside-editable-div.html
               LayoutTests/editing/selection/click-in-padding-with-multiple-line-boxes.html

        * page/Settings.cpp:
        (WebCore::Settings::Settings): Change #if PLATFORM_MAC to be Mac-Chrome-inclusive.

2009-09-08  Dave Hyatt  <hyatt@apple.com>

        Reviewed by Mark Rowe.

        Make sure not to do an early return when a data URL stylesheet successfully loads.  We need to still
        clear the old cached sheet out of all existing Frames.  Fixes the data URL stylesheet layout test failure.

        * page/Page.cpp:
        (WebCore::Page::userStyleSheetLocationChanged):

2009-09-08  Sam Weinig  <sam@webkit.org>

        Fix windows build.

        * dom/Document.idl:

2009-09-08  Kevin Ollivier  <kevino@theolliviers.com>

        More robust wx build fix for 2.9.

        * platform/wx/wxcode/mac/carbon/scrollbar_render.cpp:
        (wxRenderer_DrawScrollbar):

2009-09-08  Sam Weinig  <sam@webkit.org>

        Reviewed by Timothy Hatcher.

        Fix for https://bugs.webkit.org/show_bug.cgi?id=27046
        Implement CSSOM DocumentView.caretRangeFromPoint

        Tests: fast/dom/Document/CaretRangeFromPoint/basic.html
               fast/dom/Document/CaretRangeFromPoint/replace-element.html

        * dom/Document.cpp:
        (WebCore::Document::caretRangeFromPoint):
        * dom/Document.h:
        * dom/Document.idl:

2009-09-08  Kevin Ollivier  <kevino@theolliviers.com>

        wx build fix, generate derived sources earlier in order to make sure
        they're found by the build system when generating the list of sources to build.

        * wscript:

2009-09-08  Nate Chapin  <japhet@chromium.org>

        Reviewed by Dimitri Glazkov.

        <iterator> include in V8Proxy.h is spurious and causing ObjC compile issues for Chromium.

        Test: Chromium mac canary build is fixed.

        * bindings/v8/V8Proxy.h: Remove <iterator> include.

2009-09-08  Xan Lopez  <xlopez@igalia.com>

        Unreviewed attempt to fix the GTK+ build.

        * GNUmakefile.am:

2009-09-04  Dave Hyatt  <hyatt@apple.com>

        Reviewed by Eric Seidel.

        https://bugs.webkit.org/show_bug.cgi?id=28987, make the Document cache the page's user stylesheet in
        parsed form.  Allows the sheet to survive across destruction/re-creation of the CSSStyleSelector.

        * css/CSSStyleSelector.cpp:
        (WebCore::CSSStyleSelector::CSSStyleSelector):
        * css/CSSStyleSelector.h:
        * dom/Document.cpp:
        (WebCore::Document::attach):
        (WebCore::Document::pageUserSheet):
        (WebCore::Document::clearPageUserSheet):
        (WebCore::Document::recalcStyleSelector):
        * dom/Document.h:
        * loader/PlaceholderDocument.cpp:
        (WebCore::PlaceholderDocument::attach):
        * page/Page.cpp:
        (WebCore::Page::userStyleSheetLocationChanged):
        * page/Settings.cpp:
        (WebCore::Settings::setUserStyleSheetLocation):

2009-09-08  Kenneth Rohde Christiansen  <kenneth@webkit.org>

        Unreviewed buildfix.

        Fix Qt build after 48167, by adding the new cpp/h files
        added to WebCore.gypi to WebCore.pro as well.

        * WebCore.pro:

2009-09-08  Xan Lopez  <xlopez@igalia.com>

        Reviewed by Gustavo Noronha.

        should not pass URI fragments to libsoup
        https://bugs.webkit.org/show_bug.cgi?id=28687

        Strip the fragment from the URI before passing it to soup, since
        it forwards it to servers in some cases (like when using a proxy)
        which confuses them and makes them return 403/404.

        * platform/network/soup/ResourceHandleSoup.cpp:
        (WebCore::startHttp):
        (WebCore::):

2009-09-08  Kenneth Rohde Christiansen  <kenneth@webkit.org>

        Reviewed by Simon Hausmann.

        Add QGraphicsScene events support to the Qt platform events.

        * platform/PlatformMouseEvent.h:
        * platform/PlatformWheelEvent.h:
        * platform/qt/PlatformMouseEventQt.cpp:
        (WebCore::PlatformMouseEvent::PlatformMouseEvent):
        * platform/qt/WheelEventQt.cpp:
        (WebCore::PlatformWheelEvent::applyDelta):
        (WebCore::PlatformWheelEvent::PlatformWheelEvent):

2009-09-08  Michael Nordman  <michaeln@google.com>

        Reviewed by Eric Seidel.

        [Chromium] Cleanup: remove a few deprecated methods.
        https://bugs.webkit.org/show_bug.cgi?id=28960

        No new tests, just syntactic sugar.

        * platform/network/chromium/ResourceRequest.h:
        * platform/network/chromium/ResourceResponse.h:

2009-09-08  Yongjun Zhang  <yongjun.zhang@nokia.com>

        Reviewed by Ariya Hidayat.

        https://bugs.webkit.org/show_bug.cgi?id=28981

        [Qt] make npapi.h compile in winscw compiler.

        Add XP_SYMBIAN macro to identify Symbian OS; this macro should be used for Symbian
        specific changes in npapi.h.
        Undefine XP_WIN when building for Symbian to avoid including Windows specific code.

        * bridge/npapi.h:

2009-09-08  Oliver Hunt  <oliver@apple.com>

        Reviewed by Geoff Garen.

        Web Inspector assertion failure related to marking
        https://bugs.webkit.org/show_bug.cgi?id=28997

        When wrapping the callback the JSInspectorCallbackWrapper creator was using
        inheritorID for the prototype structure which is unsafe for anything other
        than a pure JS object.  Instead we now create a new structure, which while
        inefficient is not problematic as this code is not hit frequently.

        * bindings/js/JSInspectorCallbackWrapper.cpp:
        (WebCore::JSInspectorCallbackWrapper::wrap):

2009-09-08  Kelly Norton  <knorton@google.com>

        Reviewed by Dimitri Glazkov.

        Add missing extension to the file entry in WebCore.vcproj.

        * WebCore.vcproj/WebCore.vcproj: Added "cpp".

2009-09-08  Jian Li  <jianli@chromium.org>

        Reviewed by David Levin.

        dataTransfer.types() should not return Files if file list is empty in the clipboard.
        https://bugs.webkit.org/show_bug.cgi?id=28891

        We change the behavior to handle the empty file list in order to match the spec.

        Tested by clipboard-file-access.html.

        * platform/mac/ClipboardMac.mm:
        (WebCore::addHTMLClipboardTypesForCocoaType):
        (WebCore::ClipboardMac::types):

2009-09-08  Steve VanDeBogart  <vandebo@chromium.org>

        Reviewed by Eric Seidel.

        Handle middle click in Chromium like QT
        https://bugs.webkit.org/show_bug.cgi?id=28696

        Tested by middle-click-onpaste.html.

        * platform/Pasteboard.h:
        * platform/chromium/ChromiumBridge.h:
        * platform/chromium/ClipboardChromium.cpp:
        (WebCore::ClipboardChromium::getData):
        * platform/chromium/PasteboardChromium.cpp:
        (WebCore::Pasteboard::Pasteboard):
        (WebCore::Pasteboard::isSelectionMode):
        (WebCore::Pasteboard::setSelectionMode):
        (WebCore::Pasteboard::canSmartReplace):
        (WebCore::Pasteboard::plainText):
        (WebCore::Pasteboard::documentFragment):
        * platform/chromium/PasteboardPrivate.h:
        (WebCore::PasteboardPrivate::):

2009-09-08  Kelly Norton  <knorton@google.com>

        Reviewed by Eric Seidel.

        WebInspector: Adds a timeline agent to InspectorController that collects
        high-level timing data about event dispatch, layout, painting and HTML
        parsing and makes it available to Inspector.
        https://bugs.webkit.org/show_bug.cgi?id=25503

        * WebCore.gypi:
        * WebCore.xcodeproj/project.pbxproj:
        * dom/Document.cpp:
        (WebCore::Document::recalcStyle):
        * dom/Document.h:
        (WebCore::Document::inspectorTimelineAgent):
        * dom/Node.cpp:
        (WebCore::Node::dispatchGenericEvent):
        * html/HTMLTokenizer.cpp:
        (WebCore::HTMLTokenizer::write):
        * inspector/DOMDispatchTimelineItem.cpp: Added.
        (WebCore::DOMDispatchTimelineItem::DOMDispatchTimelineItem):
        (WebCore::DOMDispatchTimelineItem::convertToScriptObject):
        * inspector/DOMDispatchTimelineItem.h: Added.
        (WebCore::DOMDispatchTimelineItem::~DOMDispatchTimelineItem):
        * inspector/InspectorBackend.cpp:
        (WebCore::InspectorBackend::enableTimeline):
        (WebCore::InspectorBackend::disableTimeline):
        (WebCore::InspectorBackend::timelineEnabled):
        * inspector/InspectorBackend.h:
        * inspector/InspectorBackend.idl:
        * inspector/InspectorController.cpp:
        (WebCore::InspectorController::setFrontendProxyObject):
        (WebCore::InspectorController::close):
        (WebCore::InspectorController::resetScriptObjects):
        (WebCore::InspectorController::enableTimeline):
        (WebCore::InspectorController::disableTimeline):
        (WebCore::InspectorController::timelineEnabled):
        * inspector/InspectorController.h:
        (WebCore::InspectorController::timelineAgent):
        * inspector/InspectorFrontend.cpp:
        (WebCore::InspectorFrontend::timelineWasEnabled):
        (WebCore::InspectorFrontend::timelineWasDisabled):
        (WebCore::InspectorFrontend::addItemToTimeline):
        * inspector/InspectorFrontend.h:
        * inspector/InspectorTimelineAgent.cpp: Added.
        (WebCore::InspectorTimelineAgent::InspectorTimelineAgent):
        (WebCore::InspectorTimelineAgent::~InspectorTimelineAgent):
        (WebCore::InspectorTimelineAgent::willDispatchDOMEvent):
        (WebCore::InspectorTimelineAgent::didDispatchDOMEvent):
        (WebCore::InspectorTimelineAgent::willLayout):
        (WebCore::InspectorTimelineAgent::didLayout):
        (WebCore::InspectorTimelineAgent::willRecalculateStyle):
        (WebCore::InspectorTimelineAgent::didRecalculateStyle):
        (WebCore::InspectorTimelineAgent::willPaint):
        (WebCore::InspectorTimelineAgent::didPaint):
        (WebCore::InspectorTimelineAgent::willWriteHTML):
        (WebCore::InspectorTimelineAgent::didWriteHTML):
        (WebCore::InspectorTimelineAgent::reset):
        (WebCore::InspectorTimelineAgent::didCompleteCurrentRecord):
        (WebCore::InspectorTimelineAgent::currentTimeInMilliseconds):
        (WebCore::InspectorTimelineAgent::sessionTimeInMilliseconds):
        * inspector/InspectorTimelineAgent.h: Added.
        * inspector/TimelineItem.cpp: Added.
        (WebCore::TimelineItem::TimelineItem):
        (WebCore::TimelineItem::addToTimeline):
        (WebCore::TimelineItem::convertToScriptObject):
        (WebCore::TimelineItem::convertChildrenToScriptArray):
        (WebCore::TimelineItem::addChildItem):
        * inspector/TimelineItem.h: Added.
        (WebCore::):
        (WebCore::TimelineItem::~TimelineItem):
        (WebCore::TimelineItem::previous):
        (WebCore::TimelineItem::releasePrevious):
        (WebCore::TimelineItem::setEndTime):
        (WebCore::TimelineItem::type):
        * inspector/front-end/TimelineAgent.js: Added.
        (WebInspector.TimelineAgent):
        (WebInspector.addItemToTimeline):
        (WebInspector.timelineWasEnabled):
        (WebInspector.timelineWasDisabled):
        * inspector/front-end/inspector.html:
        * page/FrameView.cpp:
        (WebCore::FrameView::layout):
        (WebCore::FrameView::paintContents):
        * page/FrameView.h:
        (WebCore::FrameView::inspectorTimelineAgent):
        * page/Page.cpp:
        (WebCore::Page::inspectorTimelineAgent):
        * page/Page.h:

2009-09-08  Laszlo Gombos  <laszlo.1.gombos@nokia.com>

        Reviewed by Simon Hausmann.

        [Qt] Fix unused variable warnings
        https://bugs.webkit.org/show_bug.cgi?id=29018

        No functional change, no tests.

        * history/qt/HistoryItemQt.cpp:
        (WebCore::HistoryItem::restoreState):
        * platform/graphics/qt/ImageBufferQt.cpp:
        (WebCore::putImageData):
        * platform/qt/RenderThemeQt.cpp:
        (WebCore::RenderThemeQt::paintMenuList):

2009-09-08  Laszlo Gombos  <laszlo.1.gombos@nokia.com>

        Reviewed by Ariya Hidayat.

        [Qt] Use the declaration order in initializer lists
        https://bugs.webkit.org/show_bug.cgi?id=29017

        No functional change, no new tests.

        * platform/graphics/qt/FontCacheQt.cpp:
        (WebCore::FontPlatformDataCacheKey::FontPlatformDataCacheKey):
        * platform/network/qt/QNetworkReplyHandler.cpp:
        (WebCore::QNetworkReplyHandler::QNetworkReplyHandler):

2009-09-08  Kent Tamura  <tkent@chromium.org>

        Reviewed by Eric Seidel.

        Implement ValidityState::typeMismatch() for <input type=number>.
        https://bugs.webkit.org/show_bug.cgi?id=28934

        Test: fast/forms/ValidityState-typeMismatch-number.html

        * html/HTMLInputElement.cpp:
        (WebCore::HTMLInputElement::formStringToDouble):
        * html/HTMLInputElement.h:
        * html/ValidityState.cpp:
        (WebCore::ValidityState::typeMismatch):
        * html/ValidityState.h:

2009-09-08  Andras Becsi  <becsi.andras@stud.u-szeged.hu>

        Reviewed by Gustavo Noronha.

        [Gtk] Another attempt of a buildfix.

        * GNUmakefile.am: Modified. Remove some extra IDL files added in r48153.

2009-09-08  Kenneth Rohde Christiansen  <kenneth@webkit.org>

        Reviewed by Simon Hausmann.

        [Qt] Make cursor set cleaner in QtWebKit Api: eliminate SetCursorEvent hack.
        https://bugs.webkit.org/show_bug.cgi?id=28865

        Save the QCursor as a property in WidgetQt::setCursor
        and actually change the cursor in QWebView::event() by making use
        of the QEvent::DynamicPropertyChange event type.
        When unsetCursor() is called on the QWidget we can fallback to
        the cursor set by WebCore.

        Patch by Kenneth Rohde Christiansen <kenneth@webkit.org> and
                 Antonio Gomes <antonio.gomes@openbossa.org> on 2009-09-07

        * platform/qt/WidgetQt.cpp:
        (WebCore::Widget::setCursor):

2009-09-08  Andras Becsi  <becsi.andras@stud.u-szeged.hu>

        Reviewed by Gustavo Noronha.

        [Gtk] Buildfix for build error introduced in r48150.

        * GNUmakefile.am: Modified. Added missing IDL files.

2009-09-08  Csaba Osztrogonac  <oszi@inf.u-szeged.hu>

        Reviewed by Tor Arne Vestbø.

        [Qt] Buildfix. Build error caused by r48150.

        * WebCore.pro: missing IDL files added

2009-09-07  Chris Marrin  <cmarrin@apple.com>

        Reviewed by Oliver Hunt.

        Update Canvas 3D implementation to match spec
        https://bugs.webkit.org/show_bug.cgi?id=29010

        This adds several new CanvasXXXArray classes each of which has a custom constructor
        and custom getters and setters. Also changed CanvasRenderingContext3D and GraphicsContext3D
        to match the new and changed API.

        * DerivedSources.make:
        * WebCore.xcodeproj/project.pbxproj:
        * bindings/js/JSCanvasArrayBufferConstructor.cpp: Added with properties svn:eol-style and svn:mime-type.
        * bindings/js/JSCanvasArrayBufferConstructor.h: Added with properties svn:eol-style and svn:mime-type.
        * bindings/js/JSCanvasArrayCustom.cpp: Added with properties svn:eol-style and svn:mime-type.
        * bindings/js/JSCanvasByteArrayConstructor.cpp: Added with properties svn:eol-style and svn:mime-type.
        * bindings/js/JSCanvasByteArrayConstructor.h: Added with properties svn:eol-style and svn:mime-type.
        * bindings/js/JSCanvasByteArrayCustom.cpp: Added with properties svn:eol-style and svn:mime-type.
        * bindings/js/JSCanvasFloatArrayConstructor.cpp: Added with properties svn:eol-style and svn:mime-type.
        * bindings/js/JSCanvasFloatArrayConstructor.h: Added with properties svn:eol-style and svn:mime-type.
        * bindings/js/JSCanvasFloatArrayCustom.cpp: Added with properties svn:eol-style and svn:mime-type.
        * bindings/js/JSCanvasIntArrayConstructor.cpp: Added with properties svn:eol-style and svn:mime-type.
        * bindings/js/JSCanvasIntArrayConstructor.h: Added with properties svn:eol-style and svn:mime-type.
        * bindings/js/JSCanvasIntArrayCustom.cpp: Added with properties svn:eol-style and svn:mime-type.
        * bindings/js/JSCanvasRenderingContext3DCustom.cpp:
        (WebCore::JSCanvasRenderingContext3D::bufferData):
        (WebCore::JSCanvasRenderingContext3D::bufferSubData):
        (WebCore::JSCanvasRenderingContext3D::texImage2D):
        (WebCore::JSCanvasRenderingContext3D::texSubImage2D):
        * bindings/js/JSCanvasShortArrayConstructor.cpp: Added with properties svn:eol-style and svn:mime-type.
        * bindings/js/JSCanvasShortArrayConstructor.h: Added with properties svn:eol-style and svn:mime-type.
        * bindings/js/JSCanvasShortArrayCustom.cpp: Added with properties svn:eol-style and svn:mime-type.
        * bindings/js/JSCanvasUnsignedByteArrayConstructor.cpp: Added with properties svn:eol-style and svn:mime-type.
        * bindings/js/JSCanvasUnsignedByteArrayConstructor.h: Added with properties svn:eol-style and svn:mime-type.
        * bindings/js/JSCanvasUnsignedByteArrayCustom.cpp: Added with properties svn:eol-style and svn:mime-type.
        * bindings/js/JSCanvasUnsignedIntArrayConstructor.cpp: Added with properties svn:eol-style and svn:mime-type.
        * bindings/js/JSCanvasUnsignedIntArrayConstructor.h: Added with properties svn:eol-style and svn:mime-type.
        * bindings/js/JSCanvasUnsignedIntArrayCustom.cpp: Added with properties svn:eol-style and svn:mime-type.
        * bindings/js/JSCanvasUnsignedShortArrayConstructor.cpp: Added with properties svn:eol-style and svn:mime-type.
        * bindings/js/JSCanvasUnsignedShortArrayConstructor.h: Added with properties svn:eol-style and svn:mime-type.
        * bindings/js/JSCanvasUnsignedShortArrayCustom.cpp: Added with properties svn:eol-style and svn:mime-type.
        * bindings/js/JSDOMWindowCustom.cpp:
        (WebCore::JSDOMWindow::canvasArrayBuffer):
        (WebCore::JSDOMWindow::canvasByteArray):
        (WebCore::JSDOMWindow::canvasUnsignedByteArray):
        (WebCore::JSDOMWindow::canvasIntArray):
        (WebCore::JSDOMWindow::canvasUnsignedIntArray):
        (WebCore::JSDOMWindow::canvasShortArray):
        (WebCore::JSDOMWindow::canvasUnsignedShortArray):
        (WebCore::JSDOMWindow::canvasFloatArray):
        * html/HTMLCanvasElement.cpp:
        (WebCore::HTMLCanvasElement::getContext):
        (WebCore::HTMLCanvasElement::paint):
        * html/canvas/CanvasArray.cpp: Added with properties svn:eol-style and svn:mime-type.
        * html/canvas/CanvasArray.h: Added with properties svn:eol-style and svn:mime-type.
        * html/canvas/CanvasArray.idl: Added.
        * html/canvas/CanvasArrayBuffer.cpp: Added with properties svn:eol-style and svn:mime-type.
        * html/canvas/CanvasArrayBuffer.h: Added with properties svn:eol-style and svn:mime-type.
        * html/canvas/CanvasArrayBuffer.idl: Added.
        * html/canvas/CanvasByteArray.cpp:
        * html/canvas/CanvasByteArray.h:
        * html/canvas/CanvasByteArray.idl:
        * html/canvas/CanvasFloatArray.cpp: Added with properties svn:eol-style and svn:mime-type.
        * html/canvas/CanvasFloatArray.h: Added with properties svn:eol-style and svn:mime-type.
        * html/canvas/CanvasFloatArray.idl: Added.
        * html/canvas/CanvasIntArray.cpp: Added with properties svn:eol-style and svn:mime-type.
        * html/canvas/CanvasIntArray.h: Added with properties svn:eol-style and svn:mime-type.
        * html/canvas/CanvasIntArray.idl: Added.
        * html/canvas/CanvasRenderingContext3D.cpp:
        (WebCore::CanvasRenderingContext3D::CanvasRenderingContext3D):
        (WebCore::CanvasRenderingContext3D::markContextChanged):
        (WebCore::CanvasRenderingContext3D::beginPaint):
        (WebCore::CanvasRenderingContext3D::endPaint):
        (WebCore::CanvasRenderingContext3D::reshape):
        (WebCore::CanvasRenderingContext3D::sizeInBytes):
        (WebCore::CanvasRenderingContext3D::bindTexture):
        (WebCore::CanvasRenderingContext3D::bufferData):
        (WebCore::CanvasRenderingContext3D::bufferSubData):
        (WebCore::CanvasRenderingContext3D::checkFramebufferStatus):
        (WebCore::CanvasRenderingContext3D::clear):
        (WebCore::CanvasRenderingContext3D::createBuffer):
        (WebCore::CanvasRenderingContext3D::createFramebuffer):
        (WebCore::CanvasRenderingContext3D::createTexture):
        (WebCore::CanvasRenderingContext3D::createProgram):
        (WebCore::CanvasRenderingContext3D::createRenderbuffer):
        (WebCore::CanvasRenderingContext3D::createShader):
        (WebCore::CanvasRenderingContext3D::deleteBuffer):
        (WebCore::CanvasRenderingContext3D::deleteFramebuffer):
        (WebCore::CanvasRenderingContext3D::deleteProgram):
        (WebCore::CanvasRenderingContext3D::deleteRenderbuffer):
        (WebCore::CanvasRenderingContext3D::deleteShader):
        (WebCore::CanvasRenderingContext3D::deleteTexture):
        (WebCore::CanvasRenderingContext3D::drawArrays):
        (WebCore::CanvasRenderingContext3D::drawElements):
        (WebCore::CanvasRenderingContext3D::getBoolean):
        (WebCore::CanvasRenderingContext3D::getBooleanv):
        (WebCore::CanvasRenderingContext3D::getBufferParameteri):
        (WebCore::CanvasRenderingContext3D::getBufferParameteriv):
        (WebCore::CanvasRenderingContext3D::getFloat):
        (WebCore::CanvasRenderingContext3D::getFloatv):
        (WebCore::CanvasRenderingContext3D::getFramebufferAttachmentParameteri):
        (WebCore::CanvasRenderingContext3D::getFramebufferAttachmentParameteriv):
        (WebCore::CanvasRenderingContext3D::getInteger):
        (WebCore::CanvasRenderingContext3D::getIntegerv):
        (WebCore::CanvasRenderingContext3D::getProgrami):
        (WebCore::CanvasRenderingContext3D::getProgramiv):
        (WebCore::CanvasRenderingContext3D::getProgramInfoLog):
        (WebCore::CanvasRenderingContext3D::getRenderbufferParameteri):
        (WebCore::CanvasRenderingContext3D::getRenderbufferParameteriv):
        (WebCore::CanvasRenderingContext3D::getShaderi):
        (WebCore::CanvasRenderingContext3D::getShaderiv):
        (WebCore::CanvasRenderingContext3D::getShaderInfoLog):
        (WebCore::CanvasRenderingContext3D::getShaderSource):
        (WebCore::CanvasRenderingContext3D::getTexParameterf):
        (WebCore::CanvasRenderingContext3D::getTexParameterfv):
        (WebCore::CanvasRenderingContext3D::getTexParameteri):
        (WebCore::CanvasRenderingContext3D::getTexParameteriv):
        (WebCore::CanvasRenderingContext3D::getUniformf):
        (WebCore::CanvasRenderingContext3D::getUniformfv):
        (WebCore::CanvasRenderingContext3D::getUniformi):
        (WebCore::CanvasRenderingContext3D::getUniformiv):
        (WebCore::CanvasRenderingContext3D::getUniformLocation):
        (WebCore::CanvasRenderingContext3D::getVertexAttribf):
        (WebCore::CanvasRenderingContext3D::getVertexAttribfv):
        (WebCore::CanvasRenderingContext3D::getVertexAttribi):
        (WebCore::CanvasRenderingContext3D::getVertexAttribiv):
        (WebCore::CanvasRenderingContext3D::getVertexAttribOffset):
        (WebCore::CanvasRenderingContext3D::texImage2D):
        (WebCore::CanvasRenderingContext3D::texParameterf):
        (WebCore::CanvasRenderingContext3D::texParameteri):
        (WebCore::CanvasRenderingContext3D::texSubImage2D):
        (WebCore::CanvasRenderingContext3D::uniform1f):
        (WebCore::CanvasRenderingContext3D::uniform1fv):
        (WebCore::CanvasRenderingContext3D::uniform1i):
        (WebCore::CanvasRenderingContext3D::uniform1iv):
        (WebCore::CanvasRenderingContext3D::uniform2f):
        (WebCore::CanvasRenderingContext3D::uniform2fv):
        (WebCore::CanvasRenderingContext3D::uniform2i):
        (WebCore::CanvasRenderingContext3D::uniform2iv):
        (WebCore::CanvasRenderingContext3D::uniform3f):
        (WebCore::CanvasRenderingContext3D::uniform3fv):
        (WebCore::CanvasRenderingContext3D::uniform3i):
        (WebCore::CanvasRenderingContext3D::uniform3iv):
        (WebCore::CanvasRenderingContext3D::uniform4f):
        (WebCore::CanvasRenderingContext3D::uniform4fv):
        (WebCore::CanvasRenderingContext3D::uniform4i):
        (WebCore::CanvasRenderingContext3D::uniform4iv):
        (WebCore::CanvasRenderingContext3D::uniformMatrix2fv):
        (WebCore::CanvasRenderingContext3D::uniformMatrix3fv):
        (WebCore::CanvasRenderingContext3D::uniformMatrix4fv):
        (WebCore::CanvasRenderingContext3D::useProgram):
        (WebCore::CanvasRenderingContext3D::validateProgram):
        (WebCore::CanvasRenderingContext3D::vertexAttrib1f):
        (WebCore::CanvasRenderingContext3D::vertexAttrib1fv):
        (WebCore::CanvasRenderingContext3D::vertexAttrib2f):
        (WebCore::CanvasRenderingContext3D::vertexAttrib2fv):
        (WebCore::CanvasRenderingContext3D::vertexAttrib3f):
        (WebCore::CanvasRenderingContext3D::vertexAttrib3fv):
        (WebCore::CanvasRenderingContext3D::vertexAttrib4f):
        (WebCore::CanvasRenderingContext3D::vertexAttrib4fv):
        (WebCore::CanvasRenderingContext3D::vertexAttribPointer):
        (WebCore::CanvasRenderingContext3D::viewport):
        * html/canvas/CanvasRenderingContext3D.h:
        * html/canvas/CanvasRenderingContext3D.idl:
        * html/canvas/CanvasShortArray.cpp: Added with properties svn:eol-style and svn:mime-type.
        * html/canvas/CanvasShortArray.h: Added with properties svn:eol-style and svn:mime-type.
        * html/canvas/CanvasShortArray.idl: Added.
        * html/canvas/CanvasTexture.cpp:
        (WebCore::CanvasTexture::CanvasTexture):
        * html/canvas/CanvasTexture.h:
        (WebCore::CanvasTexture::isCubeMapRWrapModeInitialized):
        (WebCore::CanvasTexture::setCubeMapRWrapModeInitialized):
        * html/canvas/CanvasUnsignedByteArray.cpp: Added with properties svn:eol-style and svn:mime-type.
        * html/canvas/CanvasUnsignedByteArray.h: Added with properties svn:eol-style and svn:mime-type.
         * html/canvas/CanvasUnsignedByteArray.idl: Added.
        * html/canvas/CanvasUnsignedIntArray.cpp: Added with properties svn:eol-style and svn:mime-type.
        * html/canvas/CanvasUnsignedIntArray.h: Added with properties svn:eol-style and svn:mime-type.
        * html/canvas/CanvasUnsignedIntArray.idl: Added.
        * html/canvas/CanvasUnsignedShortArray.cpp: Added with properties svn:eol-style and svn:mime-type.
        * html/canvas/CanvasUnsignedShortArray.h: Added with properties svn:eol-style and svn:mime-type.
        * html/canvas/CanvasUnsignedShortArray.idl: Added.
        * page/DOMWindow.idl:
        * platform/graphics/GraphicsContext3D.h:
        * platform/graphics/mac/GraphicsContext3DMac.cpp:
        (WebCore::GraphicsContext3D::beginPaint):
        (WebCore::GraphicsContext3D::endPaint):
        (WebCore::GraphicsContext3D::bindTexture):
        (WebCore::GraphicsContext3D::bufferData):
        (WebCore::GraphicsContext3D::bufferSubData):
        (WebCore::GraphicsContext3D::checkFramebufferStatus):
        (WebCore::GraphicsContext3D::drawArrays):
        (WebCore::GraphicsContext3D::drawElements):
        (WebCore::GraphicsContext3D::texParameterf):
        (WebCore::GraphicsContext3D::texParameteri):
        (WebCore::GraphicsContext3D::uniform1f):
        (WebCore::GraphicsContext3D::uniform1fv):
        (WebCore::GraphicsContext3D::uniform2f):
        (WebCore::GraphicsContext3D::uniform2fv):
        (WebCore::GraphicsContext3D::uniform3f):
        (WebCore::GraphicsContext3D::uniform3fv):
        (WebCore::GraphicsContext3D::uniform4f):
        (WebCore::GraphicsContext3D::uniform4fv):
        (WebCore::GraphicsContext3D::uniform1i):
        (WebCore::GraphicsContext3D::uniform1iv):
        (WebCore::GraphicsContext3D::uniform2i):
        (WebCore::GraphicsContext3D::uniform2iv):
        (WebCore::GraphicsContext3D::uniform3i):
        (WebCore::GraphicsContext3D::uniform3iv):
        (WebCore::GraphicsContext3D::uniform4i):
        (WebCore::GraphicsContext3D::uniform4iv):
        (WebCore::GraphicsContext3D::uniformMatrix2fv):
        (WebCore::GraphicsContext3D::uniformMatrix3fv):
        (WebCore::GraphicsContext3D::uniformMatrix4fv):
        (WebCore::GraphicsContext3D::vertexAttrib1f):
        (WebCore::GraphicsContext3D::vertexAttrib1fv):
        (WebCore::GraphicsContext3D::vertexAttrib2f):
        (WebCore::GraphicsContext3D::vertexAttrib2fv):
        (WebCore::GraphicsContext3D::vertexAttrib3f):
        (WebCore::GraphicsContext3D::vertexAttrib3fv):
        (WebCore::GraphicsContext3D::vertexAttrib4f):
        (WebCore::GraphicsContext3D::vertexAttrib4fv):
        (WebCore::GraphicsContext3D::vertexAttribPointer):
        (WebCore::GraphicsContext3D::getBoolean):
        (WebCore::GraphicsContext3D::getBooleanv):
        (WebCore::GraphicsContext3D::getFloat):
        (WebCore::GraphicsContext3D::getFloatv):
        (WebCore::GraphicsContext3D::getInteger):
        (WebCore::GraphicsContext3D::getIntegerv):
        (WebCore::GraphicsContext3D::getBufferParameteri):
        (WebCore::GraphicsContext3D::getBufferParameteriv):
        (WebCore::GraphicsContext3D::getFramebufferAttachmentParameteri):
        (WebCore::GraphicsContext3D::getFramebufferAttachmentParameteriv):
        (WebCore::GraphicsContext3D::getProgrami):
        (WebCore::GraphicsContext3D::getProgramiv):
        (WebCore::GraphicsContext3D::getRenderbufferParameteri):
        (WebCore::GraphicsContext3D::getRenderbufferParameteriv):
        (WebCore::GraphicsContext3D::getShaderi):
        (WebCore::GraphicsContext3D::getShaderiv):
        (WebCore::GraphicsContext3D::getTexParameterf):
        (WebCore::GraphicsContext3D::getTexParameterfv):
        (WebCore::GraphicsContext3D::getTexParameteri):
        (WebCore::GraphicsContext3D::getTexParameteriv):
        (WebCore::GraphicsContext3D::getUniformf):
        (WebCore::GraphicsContext3D::getUniformfv):
        (WebCore::GraphicsContext3D::getUniformi):
        (WebCore::GraphicsContext3D::getUniformiv):
        (WebCore::GraphicsContext3D::getVertexAttribf):
        (WebCore::GraphicsContext3D::getVertexAttribfv):
        (WebCore::GraphicsContext3D::getVertexAttribi):
        (WebCore::GraphicsContext3D::getVertexAttribiv):
        (WebCore::GraphicsContext3D::getVertexAttribOffset):
        (WebCore::GraphicsContext3D::texImage2D):
        (WebCore::GraphicsContext3D::texSubImage2D):
        (WebCore::GraphicsContext3D::sizeInBytes):

2009-09-08  Jocelyn Turcotte  <jocelyn.turcotte@nokia.com>

        Reviewed by Timothy Hatcher.

        Make m_windowVisible more consistent with the actual visibility of the inspector.

        * inspector/InspectorController.cpp:
        (WebCore::InspectorController::setWindowVisible):

2009-09-07  Adam Barth  <abarth@webkit.org>

        Unreviewed speculative build fix for Snow Leopard.

        * platform/GeolocationService.cpp:
        (WebCore::createGeolocationServiceNull):

2009-09-07  Steve Block  <steveblock@google.com>

        Reviewed by Adam Barth.

        Adds a mock Geolocation service. This will be used to provide predictable behavior of the
        Geolocation API for use in LayoutTests. Later changes will integrate the the mock
        Geolocation service with DumpRenderTree.
        https://bugs.webkit.org/show_bug.cgi?id=28264

        The mock Geolocation service returns a fixed position or error. This position or error can be
        set through static methods on the GeolocationService class. The position or error is shared
        between all instances of the mock Geolocation service.

        Implementation details.
        The GeolocationService object maintains a pointer to a factory function which it uses to create
        Geolocation service instances. Each platform implementing Geolocation sets this pointer
        to the factory function for their platform's implementation. When the mock Geolocation service
        is activated, the factory function pointer is reset to the factory function for the mock service.

        Test: fast/dom/Geolocation/error.html

        * WebCore.base.exp: Modified. Exports GeolocationServiceMock methods.
        * GNUMakefile.am: Modified. Added GeolocationServiceMock files.
        * WebCore.gypi: Modified. Added GeolocationServiceMock files.
        * WebCore.pro: Modified. Added GeolocationServiceMock files.
        * WebCore.vcproj/WebCore.vcproj: Modified. Added GeolocationServiceMock files.
        * WebCore.vcproj/WebCoreCommon.vsprops: Modified. Added mock directory to includes.
        * WebCore.xcodeproj/project.pbxproj: Modified. Added GeolocationServiceMock files and exports some headers.
        * WebCoreSources.bkl: Modified. Added GeolocationServiceMock files.
        * page/ChromeClient.h: Modified. Fixed comment.
        * page/Geolocation.cpp: Modified.
        (WebCore::Geolocation::setIsAllowed): Modified. Fixed error string.
        * platform/GeolocationService.cpp: Modified.
        (WebCore::createGeolocationServiceNull): Added. Returns null in place of a Geolocation service. Used to avoid link errors on platforms where Geolocation is not implemented.
        (WebCore::GeolocationService::create): Added. Uses the factory function pointer to create a Geolocation service implementation.
        (WebCore::GeolocationService::useMock): Added. Configures the GeolocationServie to use the mock implementation.
        * platform/GeolocationService.h: Modified.
        * platform/mock: Added.
        * platform/mock/GeolocationServiceMock.cpp: Added.
        (WebCore::GeolocationServiceMock::create): Added. Creates a GeolocationServiceMock object.
        (WebCore::GeolocationServiceMock::GeolocationServiceMock): Added. Constructor.
        (WebCore::GeolocationServiceMock::~GeolocationServiceMock): Added. Destructor.
        (WebCore::GeolocationServiceMock::setPosition): Added. Sets the position that will be returned by the object.
        (WebCore::GeolocationServiceMock::setError): Added. Sets the error that will be returned by the object.
        (WebCore::GeolocationServiceMock::startUpdating): Added. GeolocationService implementation. Starts the service.
        (WebCore::GeolocationServiceMock::stopUpdating): Added. GeolocationService implementation. Stops the service.
        (WebCore::GeolocationServiceMock::timerFired): Added. Used to provide an asynchronous callback when the service is started.
        (WebCore::GeolocationServiceMock::makeGeolocationCallbackFromAllInstances): Added. Used to call back when the position or error is updated.
        (WebCore::GeolocationServiceMock::makeGeolocationCallback): Added. Used to call back when the service starts.
        (WebCore::GeolocationServiceMock::initStatics): Added. Initializes statics members with constructors.
        (WebCore::GeolocationServiceMock::cleanUpStatics): Added. Cleans up static members with constructors.
        * platform/mock/GeolocationServiceMock.h: Added.
        (WebCore::GeolocationServiceMock::lastPosition): Added. Returns the fixed position.
        (WebCore::GeolocationServiceMock::lastError): Added. Returns the fixed error.
        * platform/gtk/GeolocationServiceGtk.cpp: Modified.
        (WebCore::GeolocationServiceGtk::create): Added. Creates an instance of GeolocationServiceGtk.
        * platform/gtk/GeolocationServiceGtk.h: Modified.
        * platform/mac/GeolocationServiceMac.h: Modified.
        * platform/mac/GeolocationServiceMac.mm: Modified.
        (WebCore::GeolocationServiceMac::create): Added. Creates an instance of GeolocationServiceMac.

2009-09-07  Adam Barth  <abarth@webkit.org>

        Reviewed by Dimitri Glazkov.

        https://bugs.webkit.org/show_bug.cgi?id=28985

        We need to be slightly more careful about how we pick up a script
        execution context.  In particular, we were getting the wrong document
        for frames that had been navigated somewhere else.

        In the long term, we should think about a better algorithm for
        computing the script context.

        Fixes LayoutTests/http/tests/xmlhttprequest/detaching-frame-2.html

        * bindings/v8/V8Proxy.cpp:
        (WebCore::V8Proxy::retrieveFrame):

2009-09-07  Kevin Ollivier  <kevino@theolliviers.com>

        wx build fix for 2.8 compilation.

        * platform/wx/wxcode/mac/carbon/scrollbar_render.cpp:
        (wxRenderer_DrawScrollbar):

2009-09-07  Drew Wilson  <atwilson@google.com>

        Unreviewed build fix.

        Reverting r48121 to fix Windows build errors.

        * DerivedSources.cpp:
        * GNUmakefile.am:
        * WebCore.xcodeproj/project.pbxproj:
        * bindings/js/JSDOMWindowCustom.cpp:
        * bindings/js/JSEventTarget.cpp:
        (WebCore::toJS):
        (WebCore::toEventTarget):
        * dom/EventTarget.cpp:
        * dom/EventTarget.h:
        * page/DOMWindow.idl:
        * websockets/WebSocket.cpp:
        (WebCore::WebSocket::connect):
        (WebCore::WebSocket::send):
        (WebCore::WebSocket::close):
        (WebCore::WebSocket::bufferedAmount):
        (WebCore::WebSocket::addEventListener):
        (WebCore::WebSocket::removeEventListener):
        (WebCore::WebSocket::dispatchEvent):
        (WebCore::WebSocket::didConnect):
        (WebCore::WebSocket::didReceiveMessage):
        (WebCore::WebSocket::didClose):
        (WebCore::WebSocket::dispatchOpenEvent):
        (WebCore::WebSocket::dispatchMessageEvent):
        (WebCore::WebSocket::dispatchCloseEvent):
        * websockets/WebSocket.h:
        (WebCore::WebSocket::create):
        (WebCore::WebSocket::):
        (WebCore::WebSocket::setOnopen):
        (WebCore::WebSocket::onopen):
        (WebCore::WebSocket::setOnmessage):
        (WebCore::WebSocket::onmessage):
        (WebCore::WebSocket::setOnclose):
        (WebCore::WebSocket::onclose):
        (WebCore::WebSocket::toWebSocket):
        (WebCore::WebSocket::refEventTarget):
        (WebCore::WebSocket::derefEventTarget):
        * websockets/WebSocketChannel.cpp: Removed.
        * websockets/WebSocketChannel.h: Removed.
        * websockets/WebSocketChannelClient.h: Removed.
        * websockets/WebSocketHandshake.cpp: Removed.
        * websockets/WebSocketHandshake.h: Removed.

2009-09-07  Drew Wilson  <atwilson@google.com>

        Unreviewed speculative build fix.

        Reverted previous build fix as it didn't fix the problem.

        * bindings/js/JSEventTarget.cpp:
        (WebCore::toEventTarget):

2009-09-07  Laszlo Gombos  <laszlo.1.gombos@nokia.com>

        Unreviewed, build fix.

        [Qt] Fix build after SHARED_WORKERS are enabled by default (r48131)

        * WebCore.pro:

2009-09-07  Drew Wilson  <atwilson@google.com>

        Unreviewed build fix.

        Temporarily removed depenency between JSEventTarget.cpp and WebSocket.h in an attempt to fix a windows build break.

        * bindings/js/JSEventTarget.cpp:
        (WebCore::toEventTarget):

2009-09-07  Drew Wilson  <atwilson@google.com>

        Reviewed by David Levin.

        Enable SHARED_WORKERS by default.
        https://bugs.webkit.org/show_bug.cgi?id=28959

        Tests (enabled in a separate patch):
               fast/workers/shared-worker-constructor.html
               fast/workers/shared-worker-context-gc.html
               fast/workers/shared-worker-event-listener.html
               fast/workers/shared-worker-exception.html
               fast/workers/shared-worker-frame-lifecycle.html
               fast/workers/shared-worker-gc.html
               fast/workers/shared-worker-lifecycle.html
               fast/workers/shared-worker-load-error.html
               fast/workers/shared-worker-location.html
               fast/workers/shared-worker-navigator.html
               fast/workers/shared-worker-replace-global-constructor.html
               fast/workers/shared-worker-replace-self.html
               fast/workers/shared-worker-shared.html
               fast/workers/shared-worker-simple.html
               http/tests/workers/shared-worker-importScripts.html
               http/tests/workers/shared-worker-redirect.html
               http/tests/xmlhttprequest/workers/shared-worker-close.html
               http/tests/xmlhttprequest/workers/shared-worker-methods-async.html
               http/tests/xmlhttprequest/workers/shared-worker-methods.html
               http/tests/xmlhttprequest/workers/shared-worker-xhr-file-not-found.html

        * config.h: Removed some whitespace/touched the file to force a full rebuild on the build-bots.
        * Configurations/FeatureDefines.xcconfig:
        * WebCore.pro:
        * WebCore.vcproj/WebCoreCommon.vsprops:
        * WebCore.vcproj/build-generated-files.sh:
        * dom/DOMWindow.idl: Removed unnecessary whitespace to force a rebuild on the build-bots to pickup the flag change.
        * workers/DefaultSharedWorkerRepository.cpp:
        (WebCore::SharedWorkerScriptLoader::load):
        Clean up bitrot in SharedWorker code - DenyCrossOriginRedirect is now DenyCrossOriginRequests.
        * workers/SharedWorkerContext.cpp:
        (WebCore::SharedWorkerContext::dispatchConnect):
        Clean up bitrot - updated SharedWorker code to reflect new MessageEvent API.

2009-09-07  Xan Lopez  <xlopez@igalia.com>

        Unreviewed build fix.

        Add new file to sources list.

        * GNUmakefile.am:

2009-09-07  Kevin Ollivier  <kevino@theolliviers.com>

        wx build fixes for wx SVN trunk. 

        * config.h:
        * platform/wx/RenderThemeWx.cpp:
        (WebCore::RenderThemeWx::paintButton):
        * platform/wx/wxcode/mac/carbon/non-kerned-drawing.cpp:
        (WebCore::drawTextWithSpacing):
        * platform/wx/wxcode/mac/carbon/scrollbar_render.cpp:
        (wxRenderer_DrawScrollbar):

2009-09-07  Chris Hills <chaz@chaz6.com>

        Reviewed by Tor Arne Vestbø.

        [Qt] Use direct includes for Phonon, not the pretty ones

        * platform/graphics/qt/MediaPlayerPrivatePhonon.cpp:

2009-09-07  Fumitoshi Ukai  <ukai@chromium.org>

        Reviewed by Alexey Proskuryakov.

        WebSocket API implementation.
        https://bugs.webkit.org/show_bug.cgi?id=28038
        
        Add build systems only for GNUmakefile.am and WebCore.xcodeproj now.
        Other build systems will be updated once the code is functional.
        Tests will be landed once the code is completed and functional.

        * DerivedSources.cpp:
        * GNUmakefile.am:
        * WebCore.xcodeproj/project.pbxproj:
        * bindings/js/JSDOMWindowCustom.cpp:
        (WebCore::JSDOMWindow::webSocket):
        * bindings/js/JSEventTarget.cpp:
        (WebCore::toJS):
        (WebCore::toEventTarget):
        * dom/EventTarget.cpp:
        (WebCore::EventTarget::toWebSocket):
        * dom/EventTarget.h:
        * page/DOMWindow.idl:
        * websockets/WebSocket.cpp:
        (WebCore::ProcessWebSocketEventTask::create):
        (WebCore::ProcessWebSocketEventTask::performTask):
        (WebCore::ProcessWebSocketEventTask::ProcessWebSocketEventTask):
        (WebCore::isValidProtocolString):
        (WebCore::WebSocket::connect):
        (WebCore::WebSocket::send):
        (WebCore::WebSocket::close):
        (WebCore::WebSocket::bufferedAmount):
        (WebCore::WebSocket::addEventListener):
        (WebCore::WebSocket::removeEventListener):
        (WebCore::WebSocket::dispatchEvent):
        (WebCore::WebSocket::didConnect):
        (WebCore::WebSocket::didReceiveMessage):
        (WebCore::WebSocket::didClose):
        (WebCore::WebSocket::dispatchOpenEvent):
        (WebCore::WebSocket::dispatchMessageEvent):
        (WebCore::WebSocket::dispatchCloseEvent):
        * websockets/WebSocket.h:
        (WebCore::WebSocket::create):
        (WebCore::WebSocket::):
        (WebCore::WebSocket::setOnopen):
        (WebCore::WebSocket::onopen):
        (WebCore::WebSocket::setOnmessage):
        (WebCore::WebSocket::onmessage):
        (WebCore::WebSocket::setOnclose):
        (WebCore::WebSocket::onclose):
        (WebCore::WebSocket::toWebSocket):
        (WebCore::WebSocket::eventListeners):
        (WebCore::WebSocket::refEventTarget):
        (WebCore::WebSocket::derefEventTarget):
        * websockets/WebSocketChannel.cpp: Added.
        * websockets/WebSocketChannel.h: Added.
        * websockets/WebSocketChannelClient.h: Added.
        * websockets/WebSocketHandshake.cpp: Added.
        * websockets/WebSocketHandshake.h: Added.

2009-09-07  Gustavo Noronha Silva  <gustavo.noronha@collabora.co.uk>

        Reviewed by Xan Lopez.

        https://bugs.webkit.org/show_bug.cgi?id=26854
        [GTK] Needs API to allow more control over outgoing requests

        Add infrastructure required to provide the new
        WebKitNetworkResponse object in our API.

        * GNUmakefile.am: Add new files to the build.
        * platform/network/soup/ResourceRequestSoup.cpp:
        (WebCore::ResourceRequest::updateFromSoupMessage):
        * platform/network/soup/ResourceResponse.h:
        * platform/network/soup/ResourceResponseSoup.cpp: Added.
        (WebCore::ResourceResponse::toSoupMessage):

2009-09-07  Mads Ager  <ager@chromium.org>

        Reviewed by Adam Barth.

        [V8] Cleanup document/frame null-checking in V8DOMWindowCustom.cpp
        https://bugs.webkit.org/show_bug.cgi?id=29009

        Be consistent in document and frame null checks.

        * bindings/v8/custom/V8DOMWindowCustom.cpp:
        (WebCore::V8Custom::WindowSetTimeoutImpl):
        (WebCore::ACCESSOR_GETTER):
        (WebCore::ACCESSOR_SETTER):
        (WebCore::CALLBACK_FUNC_DECL):
        (WebCore::NAMED_PROPERTY_GETTER):
        (WebCore::V8Custom::ClearTimeoutImpl):

2009-09-07  Xan Lopez  <xlopez@igalia.com>

        Reviewed by Gustavo Noronha.

        [Soup] Limit the number of connections
        https://bugs.webkit.org/show_bug.cgi?id=18431

        Increase the maximum number of per host and total connections to
        similar values than those used by the other modern browsers. Seems
        to significantly improve page loading time in many cases.

        * platform/network/soup/ResourceHandleSoup.cpp:
        (WebCore::ensureSessionIsInitialized):

2009-09-07  Michael Nordman  <michaeln@google.com>

        Reviewed by Darin Fisher.

        Various minor chromium appcache modifications.
        https://bugs.webkit.org/show_bug.cgi?id=28960

        No new tests.

        * bindings/v8/custom/V8DOMApplicationCacheCustom.cpp:
          Fix a null pointer exception.
        (WebCore::ACCESSOR_GETTER):
        * platform/network/chromium/ResourceRequest.h:
          Switch from appCache 'context' to 'host' terminology.
          Note: leaving the old deprecated accessors in place until the matching
          change in chrome is landed to use the new accessors.
        (WebCore::ResourceRequest::ResourceRequest):
        (WebCore::ResourceRequest::appCacheHostID):
        (WebCore::ResourceRequest::setAppCacheHostID):
        (WebCore::ResourceRequest::appCacheContextID):
        (WebCore::ResourceRequest::setAppCacheContextID):
        * platform/network/chromium/ResourceResponse.h:
          Add an appCacheManifestURL getter/setter.
          Drop the 'get' prefix from the appCacheID getter.
          Note: leaving the old deprecated 'get' prefixed accessor in place until the matching
          change in chrome is landed to use the new accessor.
        (WebCore::ResourceResponse::appCacheID):
        (WebCore::ResourceResponse::appCacheManifestURL):
        (WebCore::ResourceResponse::setAppCacheManifestURL):
        (WebCore::ResourceResponse::getAppCacheID):

2009-09-07  Michael Nordman  <michaeln@google.com>

        Reviewed by Alexey Proskuryakov.

        https://bugs.webkit.org/show_bug.cgi?id=28359
        Cleanup: Undo some accidental changes around DOMApplicationCache.
        - Restore support for constructing a DOMApplicationCache object with a null frame ptr.
        - Return a non-null object for window.applicationCache when the feature is disabled.
        - Simplify the swapCache method.

        Test: http/tests/appcache/disabled.html

        * loader/appcache/DOMApplicationCache.cpp:
        (WebCore::DOMApplicationCache::DOMApplicationCache):
        (WebCore::DOMApplicationCache::swapCache):
        (WebCore::DOMApplicationCache::scriptExecutionContext):
        * loader/appcache/DOMApplicationCache.h:
        * page/DOMWindow.cpp:
        (WebCore::DOMWindow::applicationCache):

2009-09-06  Yael Aharon  <yael.aharon@nokia.com>

        Reviewed by Darin Adler.

        hostname and host are mixed up when manipulating anchor elements.
        https://bugs.webkit.org/show_bug.cgi?id=28954

        handle the case of port 0.

        * html/HTMLAnchorElement.cpp:
        (WebCore::HTMLAnchorElement::host):

2009-09-06  Erik Arvidsson  <arv@chromium.org>

        Reviewed by Eric Seidel.

        Make hidden elements not focusable.

        Clean up supportsFocus and isFocusable.
        supportsFocus now strictly means that the node can be focused by default.
        This is true for links, form controls and content editable elements for example.
        isFocusable means that the user can actually focus it.
        All (2) calls to supportsFocus have been updated to take this into account.
        
        Make a elements without href work correctly as well.

        https://bugs.webkit.org/show_bug.cgi?id=27099

        Tests: fast/events/click-focus-anchor.html
               fast/events/tab-focus-anchor.html
               fast/events/tab-focus-hidden.html

        * dom/Element.cpp:
        (WebCore::Element::focus):
        * dom/Node.cpp:
        (WebCore::Node::supportsFocus):
        (WebCore::Node::isFocusable):
        * dom/Node.h:
        * html/HTMLAnchorElement.cpp:
        (WebCore::HTMLAnchorElement::supportsFocus):
        (WebCore::HTMLAnchorElement::isMouseFocusable):
        (WebCore::HTMLAnchorElement::isKeyboardFocusable):
        * html/HTMLAnchorElement.h:
        * html/HTMLAreaElement.cpp:
        (WebCore::HTMLAreaElement::supportsFocus):
        * html/HTMLAreaElement.h:
        * html/HTMLElement.cpp:
        (WebCore::HTMLElement::supportsFocus):
        * html/HTMLElement.h:
        * html/HTMLFieldSetElement.cpp:
        (WebCore::HTMLFieldSetElement::supportsFocus):
        * html/HTMLFieldSetElement.h:
        * html/HTMLFormControlElement.cpp:
        (WebCore::HTMLFormControlElement::supportsFocus):
        (WebCore::HTMLFormControlElement::isFocusable):
        * html/HTMLFrameElementBase.cpp:
        (WebCore::HTMLFrameElementBase::supportsFocus):
        * html/HTMLFrameElementBase.h:
        * html/HTMLLegendElement.cpp:
        (WebCore::HTMLLegendElement::supportsFocus):
        * html/HTMLLegendElement.h:
        * html/HTMLOptGroupElement.cpp:
        (WebCore::HTMLOptGroupElement::supportsFocus):
        (WebCore::HTMLOptGroupElement::isFocusable):
        * html/HTMLOptGroupElement.h:
        * html/HTMLOptionElement.cpp:
        (WebCore::HTMLOptionElement::supportsFocus):
        (WebCore::HTMLOptionElement::isFocusable):
        * html/HTMLOptionElement.h:
        * page/EventHandler.cpp:
        (WebCore::EventHandler::dispatchMouseEvent):
        * page/FocusController.cpp:
        (WebCore::FocusController::advanceFocus):
        * svg/SVGAElement.cpp:
        (WebCore::SVGAElement::supportsFocus):
        (WebCore::SVGAElement::isFocusable):
        * wml/WMLAElement.cpp:
        (WebCore::WMLAElement::supportsFocus):
        * wml/WMLAElement.h:
        * wml/WMLFormControlElement.cpp:
        (WebCore::WMLFormControlElement::supportsFocus):
        (WebCore::WMLFormControlElement::isFocusable):
        * wml/WMLFormControlElement.h:

2009-09-06  Joel Stanley  <joel@jms.id.au>

        Reviewed by Dimitri Glazkov.

        Expose functions to set the caret blink interval for Linux Chromium.
        Default value is set to that of RenderTheme::caretBlankInterval().
        Uses caretBlinkIntervalInternal to avoid overriding
        RenderThemeChromiumSkia::caretBlankInterval to preserve the disabling
        of blinking caret required for layout tests.
        https://bugs.webkit.org/show_bug.cgi?id=28931

        * rendering/RenderThemeChromiumLinux.cpp:
        (WebCore::RenderThemeChromiumLinux::RenderThemeChromiumLinux):
        (WebCore::RenderThemeChromiumLinux::setCaretBlinkInterval):
        (WebCore::RenderThemeChromiumLinux::caretBlinkIntervalInternal):
        * rendering/RenderThemeChromiumLinux.h:

2009-09-06  Ada Chan  <adachan@apple.com>

        Remove an extra </File> in WebCore.vcproj.

        * WebCore.vcproj/WebCore.vcproj:

2009-09-06  Timothy Hatcher  <timothy@apple.com>

        Adds a persistent setting for color format in the Web Inspector.

        https://bugs.webkit.org/show_bug.cgi?id=28889

        Reviewed by Dan Bernstein.

        * English.lproj/localizedStrings.js: New strings.
        * inspector/front-end/Color.js: Minor style fixes.
        (WebInspector.Color.prototype.toString): Added. Replaces the individual
        "toFoo" functions. Takes a optional arguments for the color format to return.
        * inspector/front-end/Images/paneSettingsButtons.png: Added.
        * inspector/front-end/StylesSidebarPane.js:
        (WebInspector.StylesSidebarPane.prototype._changeColorFormat): Update the sections to show
        the new color format.
        (WebInspector.StylePropertyTreeElement.prototype.updateTitle.processColor.changeColorDisplay):
        Use the new toString function on Color.
        (WebInspector.StylePropertyTreeElement.prototype.updateTitle.processColor): Use the persistent setting
        to format colors by default. Add a tooltip for the color swatch.
        * inspector/front-end/inspector.css: New styles for the settings menu.
        * inspector/front-end/inspector.js:
        (WebInspector.loaded): Initilize the colorFormat preference.

2009-09-06  Laszlo Gombos  <laszlo.1.gombos@nokia.com>

        Reviewed by Eric Seidel.

        [Qt] Remove Qt v4.6 check from the prefetchDNS implementation
        https://bugs.webkit.org/show_bug.cgi?id=28993

        * platform/network/qt/DnsPrefetchHelper.cpp:
        * platform/network/qt/DnsPrefetchHelper.h:

2009-09-06  Cameron McCormack  <cam@mcc.id.au>

        Reviewed by Eric Seidel.

        Drop <definition-src> support
        https://bugs.webkit.org/show_bug.cgi?id=28991

        http://dev.w3.org/SVG/profiles/1.1F2/publish/changes.html#FontsChapter

        * DerivedSources.cpp: Remove references to definition-src.
        * DerivedSources.make: Ditto.
        * GNUmakefile.am: Ditto.
        * WebCore.gypi: Ditto.
        * WebCore.pro: Ditto.
        * WebCore.vcproj/WebCore.vcproj: Ditto.
        * WebCore.xcodeproj/project.pbxproj: Ditto.
        * bindings/objc/DOM.mm:
        (WebCore::createElementClassMap): Ditto.
        * bindings/objc/DOMSVG.h: Ditto.
        * bindings/v8/DerivedSourcesAllInOne.cpp: Ditto.
        * bindings/v8/V8DOMWrapper.cpp: Ditto.
        * bindings/v8/V8Index.cpp: Ditto.
        * bindings/v8/V8Index.h: Ditto.
        * svg/SVGAllInOne.cpp: Ditto.
        * svg/SVGDefinitionSrcElement.cpp: Removed.
        * svg/SVGDefinitionSrcElement.h: Removed.
        * svg/SVGDefinitionSrcElement.idl: Removed.
        * svg/SVGFontFaceElement.cpp:
        (WebCore::SVGFontFaceElement::rebuildFontFace): Don't search for
        definition-src child.
        * svg/svgtags.in: Remove definition-src.

2009-09-05  Dimitri Glazkov  <dglazkov@chromium.org>

        Unreviewed, build fix.

        [Chromium] Roll out http://trac.webkit.org/changeset/48094, because the
        logic of retrieving default caret blink interval was incorrect (non-existent)
        and caused layout test flakiness.

        * rendering/RenderThemeChromiumLinux.cpp:
        * rendering/RenderThemeChromiumLinux.h:

2009-09-05  Jian Li  <jianli@chromium.org>

        Reviewed by NOBODY (Chromium reliability build break).

        Back up partial change in r48072 in order to fix chromium reliability build break.

        * bindings/v8/V8AbstractEventListener.cpp:
        (WebCore::V8AbstractEventListener::invokeEventHandler):

2009-09-05  Nicolas Weber  <thakis@chromium.org>

        Reviewed by Darin Fisher.

        https://bugs.webkit.org/show_bug.cgi?id=28975
        Fix file upload on chrome/mac. Images that have "Hide Extension" set,
        such as screenshots by default, can now be uploaded to sites such as
        imgur.com.

        * platform/FileSystem.h:
        Add pathGetDisplayFileName().
        * platform/chromium/FileChooserChromium.cpp:
        (WebCore::FileChooser::basenameForWidth):
        Call pathGetDisplayFileName() instead of pathGetFileName().
        * platform/chromium/FileSystemChromiumLinux.cpp:
        (WebCore::pathGetDisplayFileName):
        Implement pathGetDisplayFileName() by delegating to pathGetFileName().
        * platform/chromium/FileSystemChromiumMac.mm:
        (WebCore::pathGetFileName):
        Now returns a real filename instead of a presentational one, which
        fixes the problem addressed by this change.
        (WebCore::pathGetDisplayFileName):
        New function that returns a presentational filename; does what
        pathGetDisplayFileName() did prior to this patch.
        * platform/chromium/FileSystemChromiumWin.cpp:
        (WebCore::pathGetDisplayFileName):
        Implement pathGetDisplayFileName() by delegating to pathGetFileName().

2009-09-05  Joel Stanley  <joel@jms.id.au>

        Reviewed by David Levin.

        Expose functions to set the caret blink interval for Linux Chromium.
        https://bugs.webkit.org/show_bug.cgi?id=28931

        * rendering/RenderThemeChromiumLinux.cpp:
        (WebCore::RenderThemeChromiumLinux::setCaretBlinkInterval):
        (WebCore::RenderThemeChromiumLinux::caretBlinkInterval):
        * rendering/RenderThemeChromiumLinux.h:

2009-09-04  Dmitry Titov  <dimich@chromium.org>

        Reviewed by David Levin.

        Prevent UI freeze in case when too many timers are in the timer queue.
        https://bugs.webkit.org/show_bug.cgi?id=23865

        The fix measures the elapsed time while executing timers. If we have too many
        timers and it takes significant time to fire, quit the loop and reschedule.
        This lets the run loop process user input (close the window for example).

        * platform/ThreadTimers.h:
        * platform/ThreadTimers.cpp:
        (WebCore::ThreadTimers::sharedTimerFiredInternal):
        (WebCore::ThreadTimers::fireTimersInNestedEventLoop):
        Removed functions and members used before to grab a list of all expired timers.
        Now we fetch one by one, measuring time and quitting the loop if it takes too long.
        * platform/Timer.cpp:
        (WebCore::TimerBase::isActive):
        (WebCore::TimerBase::setNextFireTime):
        Since timers are now fired one by one, there is no need to keep track of updated timers.
        * manual-tests/input-starved-by-timers.html: Manual test that attempts to freeze browser by
        creating of enough timers. It then keeps UI frozen and after 10 seconds starts to drain the timers
        so the browser un-freezes. This is instead of a regular layout test because we don't have a way
        to inject an input events via regular run loop in DRT - instead they are directly dispatched by
        eventSender, which does not reproduce the UI freeze that happens with real input.

2009-09-04  Anders Carlsson  <andersca@apple.com>

        Reviewed by Adele Peterson.

        <rdar://problem/7201063>
        
        Detach any custom scrollbars before detaching the document.
        
        * page/Frame.cpp:
        (WebCore::Frame::setView):

2009-09-04  Laszlo Gombos  <laszlo.1.gombos@nokia.com>

                Unreviewed, build fix.

                Remove remaining references to UserStyleSheetLoader after r48075.

                * WebCore.gypi:
                * WebCore.xcodeproj/project.pbxproj:
                * page/qt/FrameQt.cpp:
                * page/wince/FrameWince.cpp:

2009-09-04  Michelangelo De Simone  <micdesim@gmail.com>

                Reviewed by David Levin.

                https://bugs.webkit.org/show_bug.cgi?id=28988
                Minor fix: "novalidate" attribute renamed in "noValidate", according to
                HTML5 specs:
                http://www.whatwg.org/specs/web-apps/current-work/#dom-fs-novalidate

                * html/HTMLFormElement.cpp:
                (WebCore::HTMLFormElement::noValidate):
                (WebCore::HTMLFormElement::setNoValidate):
                * html/HTMLFormElement.h:
                * html/HTMLFormElement.idl:

2009-09-04  Dmitry Titov  <dimich@chromium.org>

        Reviewed by David Levin.

        Remove unused line of code from WorkerContext
        https://bugs.webkit.org/show_bug.cgi?id=28990

        * workers/WorkerContext.cpp:
        (WebCore::WorkerContext::importScripts):

2009-09-04  Darin Adler  <darin@apple.com>

        Reviewed by Oliver Hunt.

        Fix assertion seen when running buildbot.

        * bindings/js/JSDOMBinding.h:
        (WebCore::DOMObjectWithGlobalPointer::createStructure): Create the structure without
        the HasDefaultMark bit since this has a custom mark function.

2009-09-04  Dave Hyatt  <hyatt@apple.com>

        Reviewed by Adam Roben.

        https://bugs.webkit.org/show_bug.cgi?id=28984, remove the remote stylesheet loader on Mac/Qt.
        Make sure the other code path (now used by everybody) can handle data URLs.

        As per the post on webkit-dev, the ability to work remotely isn't working properly anyway (it doesn't
        hold up the pending sheet count, so you'd just FOUC on every Web page), and it's extremely unlikely
        that anybody is relying on this support.
        
        Tor Arne agreed it was ok to disable (he enabled it on the Qt side), and only Mac/Qt were using this
        code.

        * WebCore.pro:
        * WebCore.xcodeproj/project.pbxproj:
        * dom/Document.cpp:
        (WebCore::Document::userStyleSheet):
        * dom/Document.h:
        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::begin):
        * loader/UserStyleSheetLoader.cpp: Removed.
        * loader/UserStyleSheetLoader.h: Removed.
        * page/Frame.cpp:
        (WebCore::Frame::reapplyStyles):
        * page/Frame.h:
        * page/Page.cpp:
        (WebCore::Page::userStyleSheetLocationChanged):
        (WebCore::Page::userStyleSheet):
        * page/mac/FrameMac.mm:
        * page/qt/FrameQt.cpp:

2009-09-04  Mikhail Naganov  <mnaganov@chromium.org>

        Reviewed by Timothy Hatcher.

        Add "sampling profiler" preference, simplify data display when it's set.

        https://bugs.webkit.org/show_bug.cgi?id=28969

        * inspector/front-end/ProfileDataGridTree.js:
        (WebInspector.ProfileDataGridNode.prototype.get data.formatMilliseconds):
        (WebInspector.ProfileDataGridNode.prototype.get data):
        * inspector/front-end/ProfileView.js:
        (WebInspector.ProfileView):
        * inspector/front-end/inspector.js:

2009-09-04  Jian Li  <jianli@chromium.org>

        Reviewed by Adam Barth.

        [V8] Run-time exception in onmessage handler is not forwarded to the worker object.
        https://bugs.webkit.org/show_bug.cgi?id=28980

        Tested by worker-close.html.

        * bindings/v8/ScriptFunctionCall.cpp:
        * bindings/v8/V8AbstractEventListener.cpp:
        (WebCore::V8AbstractEventListener::invokeEventHandler):
        * bindings/v8/V8Utilities.cpp:
        (WebCore::getScriptExecutionContext):
        (WebCore::reportException):
        * bindings/v8/V8Utilities.h:
        (WebCore::getScriptExecutionContext):
        * bindings/v8/custom/V8MessageChannelConstructor.cpp:
        (WebCore::CALLBACK_FUNC_DECL):
        * bindings/v8/custom/V8SharedWorkerCustom.cpp:
        (WebCore::CALLBACK_FUNC_DECL):
        * bindings/v8/custom/V8WorkerCustom.cpp:
        (WebCore::CALLBACK_FUNC_DECL):
        * bindings/v8/custom/V8XMLHttpRequestConstructor.cpp:
        (WebCore::CALLBACK_FUNC_DECL):
        * bindings/v8/custom/V8XMLHttpRequestCustom.cpp:
        (WebCore::CALLBACK_FUNC_DECL):

2009-09-04  Dave Hyatt  <hyatt@apple.com>

        Reviewed by Anders Carlsson.

        Remove unused m_sheet variable and setCSSStyleSheet methods.

        * dom/Document.cpp:
        * dom/Document.h:

2009-09-04  Anders Carlsson  <andersca@apple.com>

        Reviewed by David Hyatt and Adele Peterson.

        (Based on a patch from Adele).
        
        Fix <rdar://problem/7185875>.
        
        * page/Frame.cpp:
        (WebCore::Frame::setView):
        Detach any custom scroll bars from the old view.
        
        * page/FrameView.cpp:
        (WebCore::FrameView::detachCustomScrollbars):
        Simplify the check (and make it work when body is null) by just checking that the scroll bar owner is
        not a RenderPart object.

        * rendering/RenderObject.cpp:
        (WebCore::RenderObject::destroy):
        ASSERT that frame() is not null here and also add a null check so that release builds won't crash.

2009-09-04  Dave Hyatt  <hyatt@apple.com>

        Reviewed by Adam Roben.

        Make m_userStyleSheetLoader in Frame an OwnPtr.

        * page/Frame.cpp:
        (WebCore::Frame::Frame):
        (WebCore::Frame::~Frame):
        * page/Frame.h:
        * page/mac/FrameMac.mm:
        (WebCore::Frame::setUserStyleSheetLocation):
        (WebCore::Frame::setUserStyleSheet):

2009-09-04  Timothy Hatcher  <timothy@apple.com>

        Show color swatches in the Web Inspector before the color text so clicking them will not
        shift the swatch. Also makes multiple swatches in the single property toggle the color format.

        https://bugs.webkit.org/show_bug.cgi?id=28978

        Reviewed by Darin Adler.

        * inspector/front-end/StylesSidebarPane.js:
        (WebInspector.StylePropertyTreeElement.prototype.updateTitle): Some refactoring to consolidate
        the processing we do on the property value. This eliminated the old nickname code, since the new
        WebInspector.Color class handles this. We could also simplify the color regex since more
        is handled by the Color class. Also no longer uses innerHTML for the linkify code.
        (WebInspector.StylePropertyTreeElement.prototype.updateTitle.processValue): Helper function to
        process a value given a regex and processor functions. 
        (WebInspector.StylePropertyTreeElement.prototype.updateTitle.linkifyURL): Make an anchor for the
        URL with "url()" syntax surrounding it.
        (WebInspector.StylePropertyTreeElement.prototype.updateTitle.processColor): Makes a color, if
        there was an exception just return a text node.
        (WebInspector.StylePropertyTreeElement.prototype.updateTitle.processColor.changeColorDisplay.changeTo):
        Moved from later in the file.
        (WebInspector.StylePropertyTreeElement.prototype.updateTitle.processColor.changeColorDisplay): Ditto.
        * inspector/front-end/inspector.css:

2009-09-04  Mark Mentovai  <mark@chromium.org>

        Reviewed by Dave Hyatt.

        https://bugs.webkit.org/show_bug.cgi?id=28614

        Account for scrollbar state changes that occur during layout.

        * platform/ScrollView.cpp:
        (WebCore::ScrollView::updateScrollbars):

        Perform a layout prior to checking whether the scrollbar modes are
        off, on, or automatic.  The modes may change during layout.

        * WebCore.base.exp:
        * WebCore.order:
        * page/Frame.cpp:
        (WebCore::Frame::createView):
        * page/FrameView.cpp:
        (WebCore::FrameView::FrameView):
        (WebCore::FrameView::resetScrollbars):
        (WebCore::FrameView::layout):
        * page/FrameView.h:
        * platform/ScrollView.h:

        Eliminate duplicated (and incorrect) scrollbar mode tracking between
        FrameView and ScrollView.

2009-09-04  Yael Aharon  <yael.aharon@nokia.com>

        Reviewed by Darin Adler.

        hostname and host are mixed up when manipulating anchor elements.
        https://bugs.webkit.org/show_bug.cgi?id=28954

        Swapped the implementation of host and hostname, and made sure not to return
        the port number if it is default for the given protocol. 
        FireFox also avoids returning the protocol number if it is default.

        Test: fast/dom/Element/hostname-host.html

        * html/HTMLAnchorElement.cpp:
        (WebCore::HTMLAnchorElement::host):
        (WebCore::HTMLAnchorElement::hostname):
        * page/SecurityOrigin.cpp:
        (WebCore::SecurityOrigin::isDefaultPortForProtocol):
        * page/SecurityOrigin.h:

2009-09-04  Anders Carlsson  <andersca@apple.com>

        Reviewed by Darin Adler and Steve Falkenburg.

        Fix <rdar://problem/7192902>.

        Add the necessary plumbing for having QTMovieWin use WebCore timers.
        
        * platform/graphics/win/MediaPlayerPrivateQuickTimeWin.cpp:
        (WebCore::TaskTimer::initialize):
        Create the timer and call QTMovieWin::setTaskTimerFuncs.
        
        (WebCore::TaskTimer::setTaskTimerDelay):
        Start the timer.
        
        (WebCore::TaskTimer::stopTaskTimer):
        Stop the timer.
        
        (WebCore::TaskTimer::fired):
        Call QTMovieWin::taskTimerFired().
        
        (WebCore::MediaPlayerPrivate::load):
        Initialize the Task timer.
        
        * platform/graphics/win/QTMovieWin.cpp:
        (updateTaskTimer):
        Call the global stopTaskTimer function and setTaskTimerDelay.
        
        (QTMovieWin::taskTimerFired):
        Make this a member function.
        
        (QTMovieWin::setTaskTimerFuncs):
        Set the global function pointers.
        
        (QTMovieWin::initializeQuickTime):
        (DllMain):
        No need to use the QT shared timer.
        * platform/graphics/win/QTMovieWin.h:

2009-09-04  Tony Chang  <tony@chromium.org>

        Reviewed by David Levin.

        Fix Chromium Win compile.  Missing return statement in
        WebCore::RenderThemeChromiumSkia::paintSliderThumb.
        https://bugs.webkit.org/show_bug.cgi?id=28974

        No new tests, build fix.

        * rendering/RenderThemeChromiumSkia.cpp:
        (WebCore::RenderThemeChromiumSkia::paintSliderThumb):

2009-09-04  Dimitri Glazkov  <dglazkov@chromium.org>

        Unreviewed, build fix.

        [Chromium] Rolling out http://trac.webkit.org/changeset/48035, because it broke
        the build.
        https://bugs.webkit.org/show_bug.cgi?id=28696

2009-09-04  Anders Carlsson  <andersca@apple.com>

        Fix vcproj file.

        * WebCore.vcproj/WebCore.vcproj:

2009-09-03  Dave Hyatt  <hyatt@apple.com>

        Reviewed by Adam Roben.

        https://bugs.webkit.org/show_bug.cgi?id=28890, make simple user script injection work.
        
        This patch adds new API for adding and removing user scripts from page groups.  User scripts
        are bundled together in isolated worlds (you can have multiple scripts together in the same
        world).

        Added userscripts/ directory for holding new tests (along with a simple test of script injection).

        * WebCore.base.exp:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * bindings/js/ScriptController.cpp:
        (WebCore::ScriptController::evaluateInIsolatedWorld):
        * bindings/js/ScriptController.h:
        * bindings/v8/ScriptController.cpp:
        (WebCore::ScriptController::evaluateInIsolatedWorld):
        * bindings/v8/ScriptController.h:
        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::finishedParsing):
        (WebCore::FrameLoader::dispatchDocumentElementAvailable):
        * page/Frame.cpp:
        (WebCore::Frame::injectUserScripts):
        (WebCore::Frame::injectUserScriptsForWorld):
        * page/Frame.h:
        * page/PageGroup.cpp:
        (WebCore::PageGroup::~PageGroup):
        (WebCore::PageGroup::addUserScript):
        (WebCore::PageGroup::removeUserContentForWorld):
        (WebCore::PageGroup::removeAllUserContent):
        * page/PageGroup.h:
        (WebCore::PageGroup::userScripts):
        * page/UserScript.h: Added.
        (WebCore::UserScript::UserScript):
        (WebCore::UserScript::source):
        (WebCore::UserScript::url):
        (WebCore::UserScript::patterns):
        (WebCore::UserScript::worldID):
        (WebCore::UserScript::injectionTime):
        * page/UserScriptTypes.h: Added.
        (WebCore::):

2009-09-04  Alexey Proskuryakov  <ap@apple.com>

        Reviewed by Eric Seidel.

        https://bugs.webkit.org/show_bug.cgi?id=26402
        Crashes when using a detached DocumentType node

        Test: fast/dom/DOMImplementation/detached-doctype.html

        DocumentType nodes are the only one that can have null document(), and they can never have
        children, so they are a degenerate case for NodeLists.

        * dom/Node.cpp:
        (WebCore::Node::childNodes): Don't try register node list with document if there's no
        document. Since there are no changes possible for a DocumentType's node list, this is not
        necessary.
        (WebCore::Node::registerDynamicNodeList): Ditto.
        (WebCore::Node::unregisterDynamicNodeList): Ditto. I couldn't find a scenario where this
        was invoked for a DocumentType node, but I also couldn't prove that it can't be (the
        de-registration code path that I saw taken was via Node destructor, and that already has
        a null check for document).

        * bindings/js/JSNodeCustom.cpp:
        (WebCore::JSNode::addEventListener): Bail out if there is no document (just as we already do
        if there is no window).
        (WebCore::JSNode::removeEventListener): Ditto.

2009-09-04  Xan Lopez  <xlopez@igalia.com>

        Reviewed by Gustavo Noronha.

        [GTK] loadFinished never emitted
        https://bugs.webkit.org/show_bug.cgi?id=28935

        Do not report errors right away from
        ResourceHandle::start. Instead return true and schedule an error
        to be reported in the handle later. Otherwise WebCore gets
        confused and thinks the resource never finished loading, making it
        not emit the finished status.

        * platform/network/soup/ResourceHandleSoup.cpp:
        (WebCore::startHttp):
        (WebCore::):

2009-09-04  Ben Murdoch  <benm@google.com>

        Reviewed by Eric Seidel.

        [V8] DOM Storage bindings: Event Handler should create StorageEvents
        https://bugs.webkit.org/show_bug.cgi?id=28942
        
        Tests:
        Causes the following tests that were failing with V8 to pass:
        * storage/domstorage/localstorage/onstorage-attribute-setwindow.html
        * storage/domstorage/localstorage/complex-keys.html
        * storage/domstorage/localstorage/onstorage-attribute-markup.html
        * storage/domstorage/localstorage/simple-events.html
        * storage/domstorage/localstorage/onstorage-attribute-set-attribute.html
        * storage/domstorage/localstorage/index-get-and-set.html
        * storage/domstorage/sessionstorage/onstorage-attribute-setwindow.html
        * storage/domstorage/sessionstorage/onstorage-attribute-markup.html
        * storage/domstorage/sessionstorage/simple-events.html
        * storage/domstorage/sessionstorage/onstorage-attribute-set-attribute.html
        * storage/domstorage/sessionstorage/index-get-and-set.html

        Code changes:
        * bindings/v8/V8DOMWrapper.cpp:
        (WebCore::V8DOMWrapper::convertEventToV8Object):  Create StorageEvents.
        * bindings/v8/custom/V8StorageCustom.cpp:
        (WebCore::storageGetter): Check if we are retrieving the length property and return the number of items in the object rather than a property named length when invoking the getItem() member of local/sessionStorage.

2009-09-03  Pavel Feldman  <pfeldman@chromium.org>

        Reviewed by Timothy Hatcher.

        https://bugs.webkit.org/show_bug.cgi?id=28911

        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * inspector/InspectorBackend.cpp:
        (WebCore::InspectorBackend::dispatchOnInjectedScript):
        * inspector/InspectorBackend.h:
        * inspector/InspectorBackend.idl:
        * inspector/front-end/ConsoleView.js:
        (WebInspector.ConsoleView.prototype.doEvalInWindow):
        (WebInspector.ConsoleView.prototype._formatarray):
        (WebInspector.ConsoleView.prototype._formatnode):
        * inspector/front-end/DOMAgent.js:
        * inspector/front-end/ElementsPanel.js:
        (WebInspector.ElementsPanel.this.treeOutline.focusedNodeChanged):
        (WebInspector.ElementsPanel.prototype.searchCanceled):
        (WebInspector.ElementsPanel.prototype.performSearch):
        * inspector/front-end/InjectedScript.js:
        (InjectedScript.dispatch):
        * inspector/front-end/InjectedScriptAccess.js: Added.
        (InjectedScriptAccess._installHandler.InjectedScriptAccess.methodName):
        (InjectedScriptAccess._installHandler):
        * inspector/front-end/MetricsSidebarPane.js:
        (WebInspector.MetricsSidebarPane.prototype.update):
        (WebInspector.MetricsSidebarPane.prototype.editingCommitted):
        * inspector/front-end/ObjectPropertiesSection.js:
        (WebInspector.ObjectPropertiesSection.prototype.update):
        (WebInspector.ObjectPropertyTreeElement.prototype.onpopulate):
        (WebInspector.ObjectPropertyTreeElement.prototype.applyExpression):
        * inspector/front-end/PropertiesSidebarPane.js:
        (WebInspector.PropertiesSidebarPane.prototype.update):
        * inspector/front-end/ResourcesPanel.js:
        (WebInspector.ResourceSidebarTreeElement.prototype.ondblclick):
        * inspector/front-end/ScriptsPanel.js:
        (WebInspector.ScriptsPanel.prototype.doEvalInCallFrame):
        * inspector/front-end/StylesSidebarPane.js:
        (WebInspector.StylesSidebarPane.prototype.update):
        (WebInspector.StylePropertiesSection.prototype.editingSelectorCommitted):
        (WebInspector.BlankStylePropertiesSection.prototype.editingCommitted):
        (WebInspector.StylePropertyTreeElement.prototype):
        * inspector/front-end/inspector.html:

2009-09-04  Tony Chang  <tony@chromium.org>

        Reviewed by Eric Seidel.

        Implement <input type="range"> for Chromium Linux by painting
        the slider and the thumb using skia.
        https://bugs.webkit.org/show_bug.cgi?id=28928

        Covered by existing tests (we're currently hitting an assert for them).

        * rendering/RenderThemeChromiumLinux.cpp:
        (WebCore::RenderThemeChromiumLinux::adjustSliderThumbSize):
        * rendering/RenderThemeChromiumLinux.h:
        * rendering/RenderThemeChromiumSkia.cpp:
        (WebCore::drawVertLine):
        (WebCore::drawHorizLine):
        (WebCore::drawBox):
        (WebCore::RenderThemeChromiumSkia::paintSliderTrack):
        (WebCore::RenderThemeChromiumSkia::paintSliderThumb):
        * rendering/RenderThemeChromiumSkia.h:

2009-09-04  Kent Tamura  <tkent@chromium.org>

        Reviewed by Eric Seidel.

        - Implement <input type=color> as a text field.
        - ValidityState::typeMismatch supports for type=color.
        https://bugs.webkit.org/show_bug.cgi?id=28966

        Tests: fast/forms/ValidityState-patternMismatch-unsupported.html
               fast/forms/ValidityState-typeMismatch-color.html

        * html/HTMLInputElement.cpp:
        (WebCore::HTMLInputElement::valueMissing):
        (WebCore::HTMLInputElement::patternMismatch):
        (WebCore::HTMLInputElement::setInputType):
        (WebCore::HTMLInputElement::formControlType):
        (WebCore::HTMLInputElement::saveFormControlState):
        (WebCore::HTMLInputElement::restoreFormControlState):
        (WebCore::HTMLInputElement::accessKeyAction):
        (WebCore::HTMLInputElement::rendererIsNeeded):
        (WebCore::HTMLInputElement::createRenderer):
        (WebCore::HTMLInputElement::appendFormData):
        (WebCore::HTMLInputElement::valueWithDefault):
        (WebCore::HTMLInputElement::storesValueSeparateFromAttribute):
        (WebCore::HTMLInputElement::defaultEventHandler):
        (WebCore::HTMLInputElement::isRequiredFormControl):
        (WebCore::HTMLInputElement::dataList):
        * html/HTMLInputElement.h:
        (WebCore::HTMLInputElement::):
        (WebCore::HTMLInputElement::isTextField):
        * html/ValidityState.cpp:
        (WebCore::ValidityState::typeMismatch):
        (WebCore::ValidityState::isValidColorString):
        * html/ValidityState.h:

2009-09-04  Mads Ager  <ager@chromium.org>

        Reviewed by David Levin.

        [V8] Crash when updating document cache
        https://bugs.webkit.org/show_bug.cgi?id=28965

        Initialization of a V8 JavaScript context can fail.  When that
        happens, do not attempt to update the document wrapper cache.

        This code path is exercised by http/tests/security/javascriptURL/javascriptURL-in-new-iframe.html.

        * bindings/v8/V8Proxy.cpp:
        (WebCore::V8Proxy::updateDocument):

2009-09-04  Yaar Schnitman  <yaar@chromium.org>

        Reviewed by Eric Seidel.

        Two bugs:

        https://bugs.webkit.org/show_bug.cgi?id=25489
        CSS property background-position is now serialized in shorthand string as
        background-position-x background-position-y, as the specification requires
        (See http://www.w3.org/TR/2008/WD-css3-background-20080910/#the-background-position).
        

        https://bugs.webkit.org/show_bug.cgi?id=26541
        CSS background-color is now be serialized before other background properties, 
        as CSS specification requires (See http://dev.w3.org/csswg/cssom/#css-value).  

        An existing layout test that accepted wrong order and skipped position test 
        had to be modified.

        * css/CSSMutableStyleDeclaration.cpp:
        (WebCore::CSSMutableStyleDeclaration::getPropertyValue):

2009-09-03  Kent Tamura  <tkent@chromium.org>

        Reviewed by David Levin.

        Add support for HTMLTextAreaElement.textLength
        https://bugs.webkit.org/show_bug.cgi?id=28929

        Test: fast/forms/textarea-textlength.html

        * html/HTMLTextAreaElement.h:
        (WebCore::HTMLTextAreaElement::textLength):
        * html/HTMLTextAreaElement.idl:

2009-09-03  Alexey Proskuryakov  <ap@apple.com>

        Reviewed by Darin Adler.

        <rdar://problem/7180197>, https://bugs.webkit.org/show_bug.cgi?id=28822
        REGRESSION(r31231): Creating document with current document's DOCTYPE causes crashes

        Test: fast/dom/DOMImplementation/createDocument-with-used-doctype.html

        * dom/DOMImplementation.cpp: (WebCore::DOMImplementation::createDocument): Even though we
        cannot raise an exception immediately out of fear of breaking Acid3, we shouldn't use a
        DocumentType node in two documents.

2009-09-03  Brady Eidson  <beidson@apple.com>

        Reviewed by Sam Weinig.

        Page Cache should support pages with Frames.
        https://bugs.webkit.org/show_bug.cgi?id=13631

        Tests: fast/events/pageshow-pagehide-on-back-cached-with-frames.html
               fast/loader/frames-with-unload-handlers-in-page-cache.html

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::canCachePageContainingThisFrame):
        (WebCore::FrameLoader::logCanCacheFrameDecision):

2009-09-03  Steve VanDeBogart  <vandebo@chromium.org>

        Reviewed by Eric Seidel.

        Handle middle click in Chromium like QT
        https://bugs.webkit.org/show_bug.cgi?id=28696

        Tested by middle-click-onpaste.html.

        * platform/Pasteboard.h:
        * platform/chromium/ChromiumBridge.h:
        * platform/chromium/ClipboardChromium.cpp:
        (WebCore::ClipboardChromium::getData):
        * platform/chromium/PasteboardChromium.cpp:
        (WebCore::Pasteboard::Pasteboard):
        (WebCore::Pasteboard::isSelectionMode):
        (WebCore::Pasteboard::setSelectionMode):
        (WebCore::Pasteboard::canSmartReplace):
        (WebCore::Pasteboard::plainText):
        (WebCore::Pasteboard::documentFragment):
        * platform/chromium/PasteboardPrivate.h:
        (WebCore::PasteboardPrivate::):

2009-09-03  Brady Eidson  <beidson@apple.com>

        Reviewed by Sam Weinig.

        More partial work towards "Page Cache should support pages with Frames"
        https://bugs.webkit.org/show_bug.cgi?id=13631

        Fix a bug where subframes weren't asked if they were cacheable.

        No new tests, especially since page caching for frames isn't turned on yet.
        A layout test will come in my next patch, which enables frames in the page cache.

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::canCachePageContainingThisFrame):

2009-09-03  Adam Barth  <abarth@webkit.org>

        Reviewed by eric@webkit.org.

        https://bugs.webkit.org/show_bug.cgi?id=24696

        Added mixed content methods to FrameLoaderClient.

        * loader/EmptyClients.h:
        (WebCore::EmptyFrameLoaderClient::didDisplayInsecureContent):
        (WebCore::EmptyFrameLoaderClient::didRunInsecureContent):
        * loader/FrameLoaderClient.h:

2009-09-03  Kevin Watters  <kevinwatters@gmail.com>

        Reviewed by Kevin Ollivier.

        [wx] Frames support
        https://bugs.webkit.org/show_bug.cgi?id=19041

        * page/wx/EventHandlerWx.cpp:
        (WebCore::EventHandler::passMousePressEventToSubframe):
        (WebCore::EventHandler::passMouseMoveEventToSubframe):
        (WebCore::EventHandler::passMouseReleaseEventToSubframe):
        (WebCore::EventHandler::passWheelEventToWidget):
        (WebCore::EventHandler::tabsToAllControls):
        (WebCore::EventHandler::passSubframeEventToSubframe):
        (WebCore::EventHandler::passMouseDownEventToWidget):
        * platform/wx/RenderThemeWx.cpp:
        (WebCore::nativeWindowForRenderObject):
        (WebCore::RenderThemeWx::paintButton):
        (WebCore::RenderThemeWx::paintTextField):
        (WebCore::RenderThemeWx::paintMenuList):
        (WebCore::RenderThemeWx::paintMenuListButton):
        * platform/wx/ScrollbarThemeWx.cpp: Added.
        (WebCore::ScrollbarTheme::nativeTheme):
        (WebCore::ScrollbarThemeWx::~ScrollbarThemeWx):
        (WebCore::ScrollbarThemeWx::scrollbarThickness):
        (WebCore::ScrollbarThemeWx::hasThumb):
        (WebCore::ScrollbarThemeWx::buttonSize):
        (WebCore::ScrollbarThemeWx::backButtonRect):
        (WebCore::ScrollbarThemeWx::forwardButtonRect):
        (WebCore::ScrollbarThemeWx::trackRect):
        (WebCore::ScrollbarThemeWx::paintScrollCorner):
        (WebCore::ScrollbarThemeWx::paint):
        * platform/wx/ScrollbarThemeWx.h: Added.
        (WebCore::ScrollbarThemeWx::hasButtons):
        * platform/wx/TemporaryLinkStubs.cpp:
        * platform/wx/wxcode/gtk/scrollbar_render.cpp: Added.
        (wxStyleForPart):
        (GetButtonWidget):
        (wxGetGdkWindowForDC):
        (wxRenderer_DrawScrollbar):
        * platform/wx/wxcode/mac/carbon/scrollbar_render.cpp: Added.
        (wxScrollbarPartToHIPressedState):
        (wxRenderer_DrawScrollbar):
        * platform/wx/wxcode/scrollbar_render.h: Added.
        (calcThumbStartAndLength):
        * platform/wx/wxcode/win/non-kerned-drawing.cpp:
        (WebCore::drawTextWithSpacing):
        * platform/wx/wxcode/win/scrollbar_render.cpp: Added.
        (GraphicsHDC::GraphicsHDC):
        (GraphicsHDC::~GraphicsHDC):
        (GraphicsHDC::operator HDC):
        (getTSStateForPart):
        (wxRenderer_DrawScrollbar):
        * webcore-wx.bkl:

2009-09-03  Yael Aharon  <yael.aharon@nokia.com>

        Reviewed by Simon Hausmann.

        [Qt] Page content is not displayed in case of HTTP status error
        https://bugs.webkit.org/show_bug.cgi?id=28949

        If the server sent content, show it to the user instead of an error,
        even if the HTTP status code is not success.

        * platform/network/qt/QNetworkReplyHandler.cpp:
        (WebCore::QNetworkReplyHandler::QNetworkReplyHandler):
        (WebCore::QNetworkReplyHandler::finish):
        (WebCore::QNetworkReplyHandler::forwardData):
        (WebCore::QNetworkReplyHandler::resetState):
        * platform/network/qt/QNetworkReplyHandler.h:

2009-09-03  Drew Wilson  <atwilson@google.com>

        Reviewed by Dimitri Glazkov.

        Need to update v8 bindings to support passing multiple ports to postMessage()
        https://bugs.webkit.org/show_bug.cgi?id=28839

        Added support for passing MessagePortArray to v8 bindings.

        New tests that now pass with V8:
               fast/events/message-port-multi.html
               fast/workers/worker-context-multi-port.html
               fast/workers/worker-multi-port.html

        * WebCore.gypi:
        Added V8MessageEventCustom.cpp and V8MessagePortCustom.h
        * bindings/v8/custom/V8CustomBinding.h:
        Added custom postMessage() handlers for various classes.
        * bindings/v8/custom/V8DOMWindowCustom.cpp:
        (WebCore::DOMWindowPostMessage):
        Added custom handler that supports MessagePortArray.
        * bindings/v8/custom/V8DedicatedWorkerContextCustom.cpp:
        (WebCore::DedicatedWorkerContextPostMessage):
        Added custom handler that supports MessagePortArray.
        * bindings/v8/custom/V8MessageEventCustom.cpp: Added.
        (WebCore::MessageEventPorts):
        Added getter for ports attribute.
        (WebCore::MessageEventInitMessageEvent):
        Added custom handler that supports MessagePortArray.
        * bindings/v8/custom/V8MessagePortCustom.cpp:
        (WebCore::MessagePortPostMessage):
        Added custom handler that supports MessagePortArray.
        (WebCore::getMessagePortArray):
        Added helper function that supports converting from a sequence-like object to a MessagePortArray.
        * bindings/v8/custom/V8MessagePortCustom.h: Added.
        Added declaration for getMessagePortArray().
        * bindings/v8/custom/V8WorkerCustom.cpp:
        (WebCore::WorkerPostMessage):
        Added custom handler that supports MessagePortArray.

2009-09-03  Drew Wilson  <atwilson@google.com>

        Reviewed by Sam Weinig.

        Need to update JS bindings and IDL files to support multiple message ports in postMessage()
        https://bugs.webkit.org/show_bug.cgi?id=28460

        Added new toJSSequence() API which validates that a JSValue meets the WebIDL criteria for a sequence.

        Tests: fast/events/message-port-multi.html
               fast/workers/worker-context-multi-port.html
               fast/workers/worker-multi-port.html

        * GNUmakefile.am:
        * WebCore.gypi:
        * WebCore.pro:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * WebCoreSources.bkl:
        Added JSMessagePortCustom.h and JSMessageEventCustom.cpp.
        * bindings/js/JSDOMBinding.cpp:
        (WebCore::toJSSequence):
        Added toJSSequence() API to do validation on sequence-like objects per WebIDL.
        * bindings/js/JSDOMBinding.h:
        * bindings/js/JSDOMWindowCustom.cpp:
        (WebCore::JSDOMWindow::postMessage):
        Added custom handler for postMessage() that handles being passed MessagePortArrays.
        * bindings/js/JSDedicatedWorkerContextCustom.cpp:
        (WebCore::JSDedicatedWorkerContext::postMessage):
        Added custom handler for postMessage() that handles being passed MessagePortArrays.
        * bindings/js/JSMessageEventCustom.cpp: Added.
        (WebCore::JSMessageEvent::ports):
        Added custom ports() getter that converts from MessagePortArray to JSArray.
        (WebCore::JSMessageEvent::initMessageEvent):
        Added support for passing a MessagePortArray.
        * bindings/js/JSMessagePortCustom.cpp:
        (WebCore::JSMessagePort::postMessage):
        Added custom handler for postMessage() that handles being passed MessagePortArray.
        (WebCore::fillMessagePortArray):
        New helper routine that validates/converts from a JS sequence o a WebCore::MessagePortArray.
        * bindings/js/JSMessagePortCustom.h: Added.
        * bindings/js/JSWorkerCustom.cpp:
        (WebCore::JSWorker::postMessage):
        Added custom handler for postMessage() that handles being passed MessagePortArray.
        * dom/MessageEvent.cpp:
        * dom/MessageEvent.h:
        (WebCore::MessageEvent::ports):
        Changed ports() to return a MessagePortArray* since this value can be null.
        * dom/MessageEvent.idl:
        Updated IDL to match HTML5 spec (now accepts MessagePortArrays instead of a solitary MessagePort).
        * dom/MessagePort.cpp:
        * dom/MessagePort.h:
        * dom/MessagePort.idl:
        Updated IDL to match HTML5 spec (postMessage() now accepts MessagePortArrays instead of a solitary MessagePort).
        * page/DOMWindow.h:
        * page/DOMWindow.idl:
        Updated IDL to match HTML5 spec (postMessage() now accepts MessagePortArrays instead of a solitary MessagePort).
        * workers/DedicatedWorkerContext.cpp:
        * workers/DedicatedWorkerContext.h:
        * workers/DedicatedWorkerContext.idl:
        Updated IDL to match HTML5 spec (postMessage() now accepts MessagePortArrays instead of a solitary MessagePort).
        * workers/Worker.cpp:
        * workers/Worker.h:
        * workers/Worker.idl:
        Updated IDL to match HTML5 spec (postMessage() now accepts MessagePortArrays instead of a solitary MessagePort).

2009-09-03  Pavel Feldman  <pfeldman@chromium.org>

        Reviewed by Timothy Hatcher.

        WebInspector: Do not query non-function call frames for function name.

        https://bugs.webkit.org/show_bug.cgi?id=28799

        * inspector/front-end/InjectedScript.js:
        (InjectedScript.CallFrameProxy):
        (InjectedScript.CallFrameProxy.prototype._wrapScopeChain):

2009-09-03  Pavel Feldman  <pfeldman@chromium.org>

        Reviewed by Timothy Hatcher.

        Crash after typing "clear" and pressing return in inspector console.

        https://bugs.webkit.org/show_bug.cgi?id=28684

        * inspector/front-end/InjectedScript.js:
        (InjectedScript._clearConsoleMessages):
        (InjectedScript._inspectObject):
        (InjectedScript._ensureCommandLineAPIInstalled):

2009-09-03  Vitaly Repeshko  <vitalyr@chromium.org>

        Reviewed by Adam Barth.

        [V8] Squeezed out some performance from string conversion.
        https://bugs.webkit.org/show_bug.cgi?id=28945

        * bindings/v8/V8Binding.cpp:
        (WebCore::WebCoreStringResource::WebCoreStringResource):
        (WebCore::WebCoreStringResource::~WebCoreStringResource):
        (WebCore::WebCoreStringResource::data):
        (WebCore::WebCoreStringResource::length):
        (WebCore::WebCoreStringResource::atomicString):
        (WebCore::WebCoreStringResource::string):
        Avoid calling virtual length method. Be more explicit with
        external memory computation. Avoid function calls in data and
        length.
        (WebCore::):
        (WebCore::v8StringToWebCoreString):
        (WebCore::v8StringToAtomicWebCoreString):
        (WebCore::v8NonStringValueToWebCoreString):
        (WebCore::v8NonStringValueToAtomicWebCoreString):
        Avoid extra calls of WebCoreStringResource::toString. When
        AtomicString is computed pass it immediately when constructing
        WebCoreStringResource. Use inline buffer for small strings.
        * bindings/v8/V8Binding.h:
        (WebCore::v8ValueToWebCoreString):
        (WebCore::v8ValueToAtomicWebCoreString):
        (WebCore::toString):
        Inline dispatch of string vs. non-string values.

2009-09-03  Vitaly Repeshko  <vitalyr@chromium.org>

        Reviewed by Adam Barth.

        [V8] Inlined common case of V8IsolatedWorld::getEntered to speed
        up V8Proxy lookup.
        https://bugs.webkit.org/show_bug.cgi?id=28946

        * bindings/v8/V8IsolatedWorld.cpp:
        (WebCore::V8IsolatedWorld::getEnteredImpl):
        * bindings/v8/V8IsolatedWorld.h:
        (WebCore::V8IsolatedWorld::getEntered):

2009-09-03  Kent Tamura  <tkent@chromium.org>

        Reviewed by Eric Seidel.

        Fix a regression bug that maxLength doesn't work for IME input.
        https://bugs.webkit.org/show_bug.cgi?id=25253

        Tests: fast/forms/input-maxlength-ime-completed.html
               fast/forms/input-maxlength-ime-preedit.html

        * dom/InputElement.cpp:
        (WebCore::InputElement::handleBeforeTextInsertedEvent):
        * dom/InputElement.h:
        * html/HTMLInputElement.cpp:
        (WebCore::HTMLInputElement::defaultEventHandler):
        * wml/WMLInputElement.cpp:
        (WebCore::WMLInputElement::defaultEventHandler):

2009-09-03  Cameron McCormack  <cam@mcc.id.au>

        Reviewed by Eric Seidel.

        Make SVGStyleElement title/media/type setters do something
        https://bugs.webkit.org/show_bug.cgi?id=28828

        Test: svg/dom/style-reflect.html

        * svg/SVGStyleElement.cpp:
        (WebCore::SVGStyleElement::setXmlspace): Actually change the attribute.
        (WebCore::SVGStyleElement::setType): Ditto.
        (WebCore::SVGStyleElement::setMedia): Ditto.
        (WebCore::SVGStyleElement::setTitle): Ditto.

2009-09-03  Ben Murdoch  <benm@google.com>

        https://bugs.webkit.org/show_bug.cgi?id=28872
        
        Fixes a bug where handleEvent() in the V8 Custom SQL Statement Error binding would not return the correct result to WebCore after invoking the callback.

        Test: storage/statement-error-callback.html

        * bindings/v8/custom/V8CustomSQLStatementErrorCallback.cpp:
        (WebCore::V8CustomSQLStatementErrorCallback::handleEvent): Return true from handleEvent() if the callback raised an exception or the callback itself returned true.

2009-09-03  Maxime Simon  <simon.maxime@gmail.com>

        Reviewed by Eric Seidel.

        [Haiku] Adding three font-specific files to WebCore:
        FontCustomPlatformData.cpp, FontCustomPlatformData.h,
        and FontPlatformData.h
        https://bugs.webkit.org/show_bug.cgi?id=28131

        * platform/graphics/haiku/FontCustomPlatformData.cpp: Added.
        (WebCore::FontCustomPlatformData::~FontCustomPlatformData):
        (WebCore::FontCustomPlatformData::fontPlatformData):
        (WebCore::createFontCustomPlatformData):
        * platform/graphics/haiku/FontCustomPlatformData.h: Added.
        (WebCore::FontCustomPlatformData::FontCustomPlatformData):
        * platform/graphics/haiku/FontPlatformData.h: Added.
        (WebCore::FontPlatformData::FontPlatformData):
        (WebCore::FontPlatformData::font):
        (WebCore::FontPlatformData::size):
        (WebCore::FontPlatformData::bold):
        (WebCore::FontPlatformData::oblique):
        (WebCore::FontPlatformData::hashTableDeletedFontValue):

2009-09-02  Brady Eidson  <beidson@apple.com>

        Reviewed by Darin Adler.

        More partial work towards "Page Cache should support pages with Frames"
        https://bugs.webkit.org/show_bug.cgi?id=13631

        No new tests. (No change in behavior, current tests pass).

        * loader/DocumentLoader.cpp:
        (WebCore::DocumentLoader::stopLoading): Adopt the new enum form for FrameLoader::stopLoading().

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::stopLoading): Take an enum to decide whether to dispatch no unload events,
          only unload, or unload and pagehide.
        (WebCore::FrameLoader::closeURL):
        (WebCore::FrameLoader::scheduleRedirection):
        (WebCore::FrameLoader::cachePageForHistoryItem): Call pageHidden().
        (WebCore::FrameLoader::pageHidden): Add to dispatch the pagehide event to all frames in the case
          where a page is added to the PageCache.
        * loader/FrameLoader.h:

        * loader/FrameLoaderTypes.h: Add an UnloadEventPolicy enum.

2009-09-02  Brady Eidson  <beidson@apple.com>

        Reviewed by Darin Adler.

        More partial work towards "Page Cache should support pages with Frames"
        https://bugs.webkit.org/show_bug.cgi?id=13631

        - More CachedFrame destruction work.
        - Including related Frame and FrameLoader changes and cleanup.

        No new tests. (No change in behavior, current tests pass).

        * history/CachedFrame.cpp:
        (WebCore::CachedFrameBase::restore): Rebuild up the whole FrameTree when restoring.
        (WebCore::CachedFrame::CachedFrame): Tear down the entire FrameTree when caching.
        (WebCore::CachedFrame::destroy): For child frames that are being destroyed while in
          the PageCache, do lightweight cleanup to:
          A - Prevent referring to a stale Page object.
          B - Prevent World Leaks of WebKit objects.

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::stopAllLoaders): stopAllLoaders() should never be called on Frames that are
          in the PageCache. ASSERT that fact.
        (WebCore::FrameLoader::open): Remove a bogus release-build workaround, as the comment right above it
          explains it is not effective, and it'd be better to see the crash locally instead of downstream.
        (WebCore::FrameLoader::closeAndRemoveChild): Make sure the owner element has a page pointer before
          referencing it.
        (WebCore::FrameLoader::detachFromParent): Use the new detachViewsAndDocumentLoader() call
        (WebCore::FrameLoader::detachViewsAndDocumentLoader): Does lightweight cleanup of client (WebKit) objects.
        * loader/FrameLoader.h:

        * page/Frame.cpp:
        (WebCore::Frame::detachFromPage): Simply clear the Page pointer without doing any other work.
        (WebCore::Frame::pageDestroyed): Use the new detachFromPage().
        * page/Frame.h:

2009-09-02  Jungshik Shin  <jshin@chromium.org>

        Reviewed by Dimitri Glazkov

        [Chromium] Add 'icu::' qualifier in preparation for ICU upgrade to 4.2
        in Chromium. This is to fix a new file added in r28742 since the
        last patch for this issue.

        https://bugs.webkit.org/show_bug.cgi?id=28410

        No change in the test result.

        * platform/graphics/chromium/FontLinux.cpp:
        (WebCore::TextRunWalker::getNormalizedTextRun):

2009-09-02  Dimitri Glazkov  <dglazkov@chromium.org>

        Unreviewed, build fix.

        [Chromium] Correct a typo to fix bustage, caused by r47991.
        https://bugs.webkit.org/show_bug.cgi?id=27933

        * platform/graphics/skia/ImageBufferSkia.cpp: Changed "Unpremultipled" to "Unmultiplied".

2009-09-02  Dimitri Glazkov  <dglazkov@chromium.org>

        Unreviewed, build fix.

        [Chromium] Add a missing include to fix bustage, caused by r47991.
        https://bugs.webkit.org/show_bug.cgi?id=27933

        * platform/graphics/skia/ImageBufferSkia.cpp: Added SkColorPriv include.

2009-09-02  Jian Li  <jianli@chromium.org>

        Reviewed by Dimitri Glazkov.

        [Chromium] Implement file support for DragData.
        https://bugs.webkit.org/show_bug.cgi?id=28896

        * platform/chromium/DragDataChromium.cpp:
        (WebCore::DragData::containsURL):
        (WebCore::DragData::asURL):
        (WebCore::DragData::containsCompatibleContent):

2009-09-02  Kevin Watters  <kevinwatters@gmail.com>

        Reviewed by Kevin Ollivier.

        Protect libcurl shared data with Mutex objects via curl_set_share_opt.
        https://bugs.webkit.org/show_bug.cgi?id=28920

        * platform/network/curl/ResourceHandleManager.cpp:
        (WebCore::sharedResourceMutex):
        (WebCore::curl_lock_callback):
        (WebCore::curl_unlock_callback):
        (WebCore::ResourceHandleManager::ResourceHandleManager):

2009-09-02  Evan Stade  <estade@chromium.org>

        Reviewed by Eric Seidel.

        Expose functions to change the focus ring color for Linux Chromium

        https://bugs.webkit.org/show_bug.cgi?id=28887

        * rendering/RenderThemeChromiumLinux.cpp:
        (WebCore::RenderThemeChromiumLinux::RenderThemeChromiumLinux):
        (WebCore::RenderThemeChromiumLinux::setFocusRingColor):
        (WebCore::RenderThemeChromiumLinux::platformFocusRingColor):
        * rendering/RenderThemeChromiumLinux.h:

2009-09-02  Dirk Schulze  <krit@webkit.org>

        Reviewed by Eric Seidel.

        SVG Filter premultiplied color support for getImageDate/putImageData
        [https://bugs.webkit.org/show_bug.cgi?id=27933]

        Patch to get premultiplied color support for Skia on getImageDate/putImageData.

        * platform/graphics/skia/ImageBufferSkia.cpp:
        (WebCore::getImageData):
        (WebCore::putImageData):

2009-09-02  Brady Eidson  <beidson@apple.com>

        Forget to rename openInFrameloader() to open(), which was requested in Darin's review of my last patch.

        * history/CachedFrame.cpp:
        (WebCore::CachedFrameBase::restore):
        (WebCore::CachedFrame::open):
        * history/CachedFrame.h:
        * history/CachedPage.cpp:
        (WebCore::CachedPage::restore):

2009-09-02  Brady Eidson  <beidson@apple.com>

        Reviewed by Darin Adler.

        In http://trac.webkit.org/changeset/47943 I added new header dependencies to FrameLoader.h.
        Removing them is a little trouble, but worth it going forward.
        The pattern of creating a "CachedFrameBase" as the interface CachedFrame provides to FrameLoader
        was suggested by Darin Adler.

        No new tests. (No change in behavior)

        Make CachedFrame inherit privately from CachedFrameBase, which becomes the interface FrameLoader uses:
        * history/CachedFrame.cpp:
        (WebCore::CachedFrameBase::CachedFrameBase):
        (WebCore::CachedFrameBase::~CachedFrameBase):
        (WebCore::CachedFrameBase::restore):
        (WebCore::CachedFrame::CachedFrame):
        (WebCore::CachedFrame::openInFrameLoader):
        * history/CachedFrame.h:
        (WebCore::CachedFrameBase::document):
        (WebCore::CachedFrameBase::view):
        (WebCore::CachedFrameBase::domWindow):
        (WebCore::CachedFrame::create):
        (WebCore::CachedFrame::documentLoader):
        (WebCore::CachedFrame::mousePressNode):

        Call the new ::openInFrameLoader() method on the CachedFrame, as CachedFrameBase is now the only
        thing capable of interacting with FrameLoader::open(CachedFrameBase):
        * history/CachedPage.cpp:
        (WebCore::CachedPage::restore):
        * history/CachedPage.h:
        (WebCore::CachedPage::documentLoader):

        Make ::open(CachedFrame) public, and change it to ::open(CachedFrameBase):
        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::open):
        * loader/FrameLoader.h:

2009-09-02  Ryosuke Niwa  <rniwa@webkit.org>

        Reviewed by Eric Seidel.

        Cannot pres Enter to escape from bulleted list when <ul> is a child of <li>.
        https://bugs.webkit.org/show_bug.cgi?id=24866

        This patch modifies breakOutOfEmptyListItem to break out of a properly nested list
        (a list to break out of is inside another list item).

        When the empty list item appears at the end of another list item, WebKit breaks out of
        the outer list item, and adds new item below the outer list item.
        Otherwise, WebKit breaks out of the the inner list item and inserts new paragraph.

        Test: editing/execCommand/break-out-of-empty-list-item.html

        * editing/CompositeEditCommand.cpp:
        (WebCore::CompositeEditCommand::breakOutOfEmptyListItem):

2009-09-02  Brady Eidson  <beidson@apple.com>

        Reviewed by Sam Weinig.

        More partial work towards "Page Cache should support pages with Frames"
        https://bugs.webkit.org/show_bug.cgi?id=13631

        This patch is primarily about the "CachedFrame tree" and making slightly different decisions
        based on whether a CachedFrame is the main frame or a subframe.

        - Store whether a CachedFrame represents the main frame or a subframe.
        - "Chop off the frame tree" for the main frame when creating its CachedFrame, as main frames 
          are reused and need to start new page loads with an empty frame tree.
        - Reattach the frame tree to the main frame when restoring it.
        - open() the cached subframes in their respective loaders when restoring.
        - Properly clear() and destroy() cached subframes.
        - When committing to a new page load, and after caching the previous page, only clear the
          FrameView for the main frame.

        Note that all of above will eventually be necessary as I continue to land this work in pieces,
        but doesn't actually change any behavior right now because we still refuse to even *try* to
        cache pages with frames.

        No new tests. No change in behavior, and current tests continue to pass.

        * history/CachedFrame.cpp:
        (WebCore::CachedFrame::CachedFrame):
        (WebCore::CachedFrame::restore):
        (WebCore::CachedFrame::clear):
        (WebCore::CachedFrame::destroy):
        * history/CachedFrame.h:
        (WebCore::CachedFrame::isMainFrame):

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::clear):
        (WebCore::FrameLoader::open):
        * loader/FrameLoader.h:

2009-09-02  Brady Eidson  <beidson@apple.com>

        No review, build fix.

        http://trac.webkit.org/changeset/47976 broke the build.  
        Let's try compiling before we land things, shall we?

        * platform/graphics/SimpleFontData.cpp:
        (WebCore::SimpleFontData::SimpleFontData): Order the initialization list correctly.

2009-09-02  Kevin Ollivier  <kevino@theolliviers.com>

        waf build fixes for Windows/MSVC.

        * wscript:

2009-09-02  Ben Murdoch  <benm@google.com>

        Unreviewed build fix for Chromium.

        Missed #including V8Proxy.h in WebCore/bindings/v8/V8Binding.cpp.

        * bindings/v8/V8Binding.cpp: add V8Proxy.h as an include

2009-09-02  Kevin Ollivier  <kevino@theolliviers.com>

        waf build fix, don't define symbols we now grab from other sources.

        * platform/wx/TemporaryLinkStubs.cpp:

2009-09-02  Kevin Ollivier  <kevino@theolliviers.com>

        Build fixes for PluginViewNone.cpp and a wx build fix for PluginView.cpp.

        * plugins/PluginView.cpp:
        (WebCore::PluginView::stop):
        * plugins/PluginViewNone.cpp:
        (WebCore::PluginView::platformDestroy):

2009-09-02  Charles Wei  <charles.wei@torchmobile.com.cn>

        Reviewed by Eric Seidel.

        Fix the build failure of WebKit for Linux/Qt when WML is enabled

        No test cases needed since this just fixes the build problem.

        * wml/WMLElement.cpp:
        (WebCore::WMLElement::create):
        * wml/WMLTableElement.cpp:
        (WebCore::WMLTableElement::joinSuperflousColumns):
        (WebCore::WMLTableElement::padWithEmptyColumns):

2009-09-02 Yong Li <yong.li@torchmobile.com>

        Reviewed by Adam Barth.

        WINCE PORT: use shared buffer for custom font data
        https://bugs.webkit.org/show_bug.cgi?id=27734

        Refactored by Joe Mason <joe.mason@torchmobile.com>

        * loader/CachedFont.cpp:
        add WINCE to platforms using cached custom data
        * platform/graphics/opentype/OpenTypeUtilities.cpp:
        (WebCore::renameFont): implement for WinCE
        * platform/graphics/opentype/OpenTypeUtilities.h:
        build fixes
        * platform/graphics/wince/FontCustomPlatformData.cpp:
        (WebCore::setCustomFontCache): add accessor
        (WebCore::createFontCustomPlatformData): change param to SharedBuffer
        * platform/graphics/wince/FontCustomPlatformData.h:
        update function signatures 
 
2009-09-02 Yong Li <yong.li@torchmobile.com>

        Reviewed by Adam Barth.

        WINCE PORT: font-related build fixes and minor bugfixes
        https://bugs.webkit.org/show_bug.cgi?id=27734

        * platform/graphics/FontCache.h: declare functions added in https://bugs.webkit.org/show_bug.cgi?id=27509
        * platform/graphics/GlyphPageTreeNode.cpp:
        (WebCore::GlyphPageTreeNode::initializePage): fix ambiguous overload error in min/max on Windows
        * platform/graphics/SimpleFontData.cpp:
        (WebCore::SimpleFontData::SimpleFontData): initialize member vars
        * platform/graphics/SimpleFontData.h: disable unused members on Wince to save space 

2009-09-02  Jeremy Orlow  <jorlow@chromium.org>

        Reviewed by Adam Barth.

        Another pass at releasing the storage mutex.
        https://bugs.webkit.org/show_bug.cgi?id=28904

        Another pass at releasing the storage mutex (when applicable) when we finish
        executing JavaScript.  http://dev.w3.org/html5/spec/Overview.html#storage-mutex
        describes the required behavior.

        As it turns out, https://bugs.webkit.org/show_bug.cgi?id=28789 didn't solve
        the problem correctly.  First of all, I missed that events and timeouts go
        through a different call path.  Second of all, I didn't consider recursion
        correctly.  Third of all, my check to see if LocalStorage is alive actually
        instantiates it if it isn't yet.  Fourth, I forgot DOM_STORAGE guards around
        it.  So I'm reverting that change completely and doing it more cleanly.
        Unfortunately, the solution isn't as portable (and thus I've left out the JSC
        implementation for now).

        NOTE: This change now tracks recursion on function callbacks in V8.  I ran this
        by Mads Ager and Mike Belshe and they seemed to think adding the checks were
        fine.  Most callbacks are asynchronous and thus wouldn't be nested.  The few
        scenareos where you can have nested callbacks probably should have always been
        protected by a recursion guard.

        Unfortunately, this can't be tested without a hook added to the layout test
        controllers since the lock is (by design) not supposed to be observable by
        JavaScript.  https://bugs.webkit.org/show_bug.cgi?id=28906

        * bindings/js/ScriptController.cpp:
        (WebCore::ScriptController::evaluate): revert
        * bindings/v8/ScriptController.cpp:
        (WebCore::ScriptController::evaluate): revert
        * bindings/v8/V8Proxy.cpp:
        (WebCore::V8Proxy::runScript):
            Add releaseStorageMutex call.  A small amount of clean up.
        (WebCore::V8Proxy::callFunction):
            Add releaseStorageMutex call.  A small amount of clean up.
        (WebCore::V8Proxy::releaseStorageMutex):
            Check to see if localStorage has been instantiated.  If so, tell it to
            unlock all storage areas.
        * bindings/v8/V8Proxy.h:
        * page/PageGroup.h:
        (WebCore::PageGroup::hasLocalStorage):  Make hasLocalStorage public.

2009-09-02  Yong Li  <yong.li@torchmobile.com>

        Reviewed by Adam Barth.

        WINCE PORT: Implement ImageBuffer for WINCE
        Implement Image interface with a light class BufferedImage
        for rendering ImageBuffer
        https://bugs.webkit.org/show_bug.cgi?id=28167

        * platform/graphics/wince/ImageBufferData.h: Added.
        * platform/graphics/wince/ImageBufferWince.cpp: Added.

2009-08-31  Tor Arne Vestbø  <tor.arne.vestbo@nokia.com>

        Reviewed by Eric Seidel.

        Join the various PluginView destructors into one shared implementation

        https://bugs.webkit.org/show_bug.cgi?id=27706

        The Qt port used to delete the platform plugin widget as the last step.
        Now this is done before cleaning up the script objects and unloading the
        plugin package, similar to how the Win port does it.

        * plugins/PluginView.cpp:
        * plugins/PluginViewNone.cpp:
        * plugins/gtk/PluginViewGtk.cpp:
        * plugins/mac/PluginViewMac.cpp:
        * plugins/qt/PluginViewQt.cpp:
        * plugins/win/PluginViewWin.cpp:

2009-08-31  Tor Arne Vestbø  <tor.arne.vestbo@nokia.com>

        Reviewed by Eric Seidel.

        Share PluginView::init() between ports

        https://bugs.webkit.org/show_bug.cgi?id=27706

        The port-spesific bits are moved to platformStart(), which now returns
        a bool based on the success of the platformStart.

        m_hasPendingGeometryChange is now initialized in the initializer list
        instead of in PluginViewQt's init()

        PluginViewMac (currently used only by the Qt port) used to manually call
        stop() in the case where an unsupported drawing or event model was detected.
        This was wrong, as the m_status and m_isStarted fields should be used to
        guard against doing operations on a plugin in this intermediate state.

        * plugins/PluginView.cpp:
        * plugins/PluginView.h:
        * plugins/PluginViewNone.cpp:
        * plugins/gtk/PluginViewGtk.cpp:
        * plugins/mac/PluginViewMac.cpp:
        * plugins/qt/PluginViewQt.cpp:
        * plugins/win/PluginViewWin.cpp:

2009-09-02  Ben Murdoch  <benm@google.com>

        https://bugs.webkit.org/show_bug.cgi?id=28737
        
        Update JavaScript bindings in JSC and V8 for SQLTransaction to throw exceptions in the right places.

        * bindings/js/JSSQLTransactionCustom.cpp:
        (WebCore::JSSQLTransaction::executeSql): Throw an exception if no parameters are passed to executeSql().
        * bindings/v8/V8Binding.cpp:
        (WebCore::v8ValueToWebCoreString): Catch an exception if thrown from toString().
        * bindings/v8/custom/V8SQLTransactionCustom.cpp:
        (WebCore::CALLBACK_FUNC_DECL): Allow "arrayish objects" to be passed to executeSql.

2009-09-01  Pavel Feldman  <pfeldman@chromium.org>

        Reviewed by Timothy Hatcher.

        WebInspector: Migrate Databases tab to InjectedScript /
        serialized interaction.

        https://bugs.webkit.org/show_bug.cgi?id=28873

        * inspector/InspectorDOMAgent.cpp:
        (WebCore::InspectorDOMAgent::handleEvent):
        * inspector/front-end/Database.js:
        (WebInspector.Database.prototype.isDB):
        (WebInspector.Database.prototype.runWithTableNames.sortingCallback):
        (WebInspector.Database.prototype.runWithTableNames):
        (WebInspector.Database.prototype.executeSql):
        (WebInspector.Database.prototype.executeSql.errorCallback):
        (WebInspector.Database.prototype.executeSql.queryTransaction):
        * inspector/front-end/DatabaseQueryView.js:
        (WebInspector.DatabaseQueryView.prototype._enterKeyPressed):
        (WebInspector.DatabaseQueryView.prototype._queryFinished):
        * inspector/front-end/DatabaseTableView.js:
        (WebInspector.DatabaseTableView):
        * inspector/front-end/StoragePanel.js:
        (WebInspector.StoragePanel.prototype.selectDatabase):
        (WebInspector.StoragePanel.prototype.updateDatabaseTables.withTableNames):
        (WebInspector.StoragePanel.prototype.updateDatabaseTables):
        (WebInspector.DatabaseSidebarTreeElement.prototype.onpopulate.withTableNames):
        (WebInspector.DatabaseSidebarTreeElement.prototype.onpopulate):

2009-09-02  Pavel Feldman  <pfeldman@chromium.org>

        Not reviewed (trivial followup fix). 
        
        Web Inspector: Trivial follow up fix to r47944.

        https://bugs.webkit.org/show_bug.cgi?id=28800

        * inspector/InspectorBackend.cpp:
        (WebCore::InspectorBackend::nodeForId):

2009-09-01  Brian Weinstein  <bweinstein@apple.com>

        Reviewed by John Sullivan.

        Fixed a bug in handling of isReadOnly, where textareas were casted to HTMLInputElements.

        * accessibility/AccessibilityRenderObject.cpp:
        (WebCore::AccessibilityRenderObject::isReadOnly):

2009-09-01  Patrick Mueller  <Patrick_Mueller@us.ibm.com>

        Reviewed by Timothy Hatcher.

        https://bugs.webkit.org/show_bug.cgi?id=28047
        add utility method to enable logging messages for inspector development

        manual test case added (see below)

        * inspector/front-end/ConsoleView.js:
        (WebInspector.ConsoleMessage.prototype.toMessageElement):
        (WebInspector.ConsoleMessage.prototype.toString):
        * inspector/front-end/inspector.css:
        * inspector/front-end/inspector.js:
        (WebInspector.log):
        * manual-tests/inspector/webinspector-log.html: Added.
        * page/Console.cpp:
        (WebCore::printMessageSourceAndLevelPrefix):
        * page/Console.h:
        (WebCore::):

2009-09-01  Alexey Proskuryakov  <ap@apple.com>

        Reviewed by Darin Adler.

        https://bugs.webkit.org/show_bug.cgi?id=21990
        When a rare EUC-JP character is present, explicitly (and correctly) labelled EUC-JP document
        is mistreated as Shift_JIS

        <rdar://problem/5828506> Safari should not try auto-detecting if charset information exists

        WebKit used to unconditionally auto-detect document encoding if it was one of Japanese ones.
        This didn't really match any browser, and did cause problems on some sites.

        Our detector is very quick to label an EUC-JP page as Shift_JIS if it notices a byte that
        cannot be part of EUC-JP source. However, such bytes do appear in Web pages sometimes,
        especially in comments. Also, some valid EUC-JP sequences are not known to it.

        Some pages that are fixed by this change:

        <rdar://problem/5934750> Encoding in incorrect at http://cocodeparis.blog45.fc2.com/. This
        page has incorrect encoding in title, so no browser displays it 100% fine. We now match
        Firefox and IE.

        <rdar://problem/6007713> The web page http://www.sf.us.emb-japan.go.jp/top.htm is garbled
        in Safari. There is a stray byte in comments that was makes charset detector think it can't
        be EUC-JP.

        <rdar://problem/6965711> A Japanese web page www.nippontv.studiolegend.tv is garbled in
        Safari. Many comments on this page are encoded as Shift_JIS - IE magically displays that
        fine in View Source mode (it doesn't seem to have an ability to switch between EUC-JP and
        Shift_JIS in normal HTML view though).

        Test: fast/encoding/japanese-encoding-mix.html

        * loader/TextResourceDecoder.cpp: (WebCore::TextResourceDecoder::decode): Only invoke auto-
        detection if there is no solid charset information yet.

2009-09-01  Jian Li  <jianli@chromium.org>

        Reviewed by Dimitri Glazkov.

        [V8] FileList cannot be accessed via index in Chromium.
        https://bugs.webkit.org/show_bug.cgi?id=28883

        Tested by clipboard-file-access.html.

        * WebCore.gypi:
        * bindings/v8/V8DOMWrapper.cpp:
        (WebCore::V8DOMWrapper::getTemplate):
        * bindings/v8/custom/V8CustomBinding.h:
        * bindings/v8/custom/V8FileListCustom.cpp: Added.

2009-08-31  Jon Honeycutt  <jhoneycutt@apple.com>

        Remove the workaround added in r47316.

        Reviewed by Sam Weinig.

        * accessibility/AXObjectCache.cpp:
        (WebCore::AXObjectCache::AXObjectCache):

        * accessibility/AXObjectCache.h:
        Remove the Document argument to the AXObjectCache constructor and the
        m_document member variable, and replace the no-parameter
        handleFocusedUIElementChanged() with the two-parameter GTK function.
        (WebCore::AXObjectCache::handleFocusedUIElementChanged):

        * accessibility/chromium/AXObjectCacheChromium.cpp:
        (WebCore::AXObjectCache::handleFocusedUIElementChanged):

        * accessibility/gtk/AXObjectCacheAtk.cpp:
        (WebCore::AXObjectCache::handleFocusedUIElementChanged):

        * accessibility/gtk/AccessibilityObjectWrapperAtk.cpp:
        (fallbackObject):
        Don't pass a null Document when constructing the AXObjectCache.

        * accessibility/mac/AXObjectCacheMac.mm:
        (WebCore::AXObjectCache::handleFocusedUIElementChanged):

        * accessibility/win/AXObjectCacheWin.cpp:
        (WebCore::AXObjectCache::handleFocusedUIElementChanged):
        Get the document from the RenderObject; m_document was removed.

        * dom/Document.cpp:
        (WebCore::Document::axObjectCache):
        Don't pass the Document when constructing the AXObjectCache.
        (WebCore::Document::setFocusedNode):
        Pass the old and new focused RenderObjects when calling
        handleFocusedUIElementChanged().

2009-09-01  Yury Semikhatsky  <yurys@chromium.org>

        Reviewed by Timothy Hatcher.

        Check that InspectorDOMAgent and InspectorFrontend are not null
        before accessing them in InspectorBackend. They may be null if
        InspectorController is closed before an asynchronous operation is
        started.

        https://bugs.webkit.org/show_bug.cgi?id=28800

        * inspector/InspectorBackend.cpp:
        (WebCore::InspectorBackend::getCookies):
        (WebCore::InspectorBackend::getChildNodes):
        (WebCore::InspectorBackend::setAttribute):
        (WebCore::InspectorBackend::removeAttribute):
        (WebCore::InspectorBackend::setTextNodeValue):
        (WebCore::InspectorBackend::highlight):
        (WebCore::InspectorBackend::nodeForId):
        (WebCore::InspectorBackend::pushNodePathToFrontend):
        (WebCore::InspectorBackend::addNodesToSearchResult):
        (WebCore::InspectorBackend::selectDatabase):
        (WebCore::InspectorBackend::selectDOMStorage):
        (WebCore::InspectorBackend::inspectorDOMAgent):
        (WebCore::InspectorBackend::inspectorFrontend):
        * inspector/InspectorBackend.h:

2009-09-01  Brady Eidson  <beidson@apple.com>

        Reviewed by Sam Weinig.

        Page Cache should support pages with frames
        https://bugs.webkit.org/show_bug.cgi?id=13631

        Things learned in the full task that this patch addresses:
        - The notions of clearing a CachedFrame and destroying a CachedFrame were two concepts that 
          needed to be managed separately.
        - Once we start restoring pages with multiple CachedFrames, we'll have to be calling
          FrameLoader::open(CachedFrame&) multiple times with different CachedFrames, and this process
          will be guided by the CachedFrames themselves.

        No new tests. (No change in behavior, current layout tests pass)
        
        * history/CachedFrame.cpp:
        (WebCore::CachedFrame::CachedFrame):
        (WebCore::CachedFrame::~CachedFrame):
        (WebCore::CachedFrame::clear): Only clear pointers out.
        (WebCore::CachedFrame::destroy): Perform the destructive cleanup work here - Things that shouldn't
          occur simply by navigating back to a page with a CachedFrame.
        * history/CachedFrame.h:

        * history/CachedPage.cpp:
        (WebCore::CachedPage::~CachedPage):
        (WebCore::CachedPage::restore): Call clear() after restoring.
        (WebCore::CachedPage::clear):
        (WebCore::CachedPage::destroy):
        * history/CachedPage.h:

        * history/PageCache.cpp:
        (WebCore::PageCache::releaseAutoreleasedPagesNow): destroy() CachedPages that are being pruned,
          instead of clearing them.

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::commitProvisionalLoad): Let the CachedPage clear() itself after restoring.
        (WebCore::FrameLoader::open): Don't ::open() the CachedFrame, as the CachedPage does that now.
        * loader/FrameLoader.h:  Add the friending so CachedPage and CachedFrame can better guide the process.
          Even though CachedFrame::restore() isn't used for now, it will be soon.

2009-09-01  Andrei Popescu  <andreip@google.com>

        Reviewed by David Levin.

        Add a "lowMemoryNotification" method to the V8 ScriptController class.
        This is needed in order to allow the host application (Android Web browser in this case)
        to call the v8::V8::LowMemoryNotification() method added to V8 in
        http://code.google.com/p/v8/source/detail?spec=svn2777&r=2725
        
        https://bugs.webkit.org/show_bug.cgi?id=28776


        * bindings/v8/ScriptController.cpp:
        (WebCore::ScriptController::lowMemoryNotification):
        * bindings/v8/ScriptController.h:

2009-09-01  Fumitoshi Ukai  <ukai@chromium.org>

        Reviewed by Adam Barth.

        V8 Bindings for WebSocket API.
        https://bugs.webkit.org/show_bug.cgi?id=28844

        * bindings/v8/DOMObjectsInclude.h:
        * bindings/v8/DerivedSourcesAllInOne.cpp:
        * bindings/v8/V8DOMWrapper.cpp:
        (WebCore::V8DOMWrapper::getTemplate):
        (WebCore::V8DOMWrapper::convertToV8Object):
        (WebCore::V8DOMWrapper::convertEventTargetToV8Object):
        * bindings/v8/V8DOMWrapper.h:
        * bindings/v8/V8Index.cpp:
        * bindings/v8/V8Index.h:
        * bindings/v8/WorkerContextExecutionProxy.cpp:
        * bindings/v8/custom/V8CustomBinding.h:
        * bindings/v8/custom/V8WebSocketCustom.cpp: Added.

2009-09-01  Peter Kasting  <pkasting@google.com>

        Unreviewed (build fix).

        Missed a "." -> "->" conversion.

        * platform/graphics/qt/ImageDecoderQt.cpp:
        (WebCore::ImageDecoderQt::ReadContext::ReadContext):

2009-09-01  Peter Kasting  <pkasting@google.com>

        Unreviewed (build fix).

        Try to fix Qt build, take 2.  The Qt code had what looks like a
        broken virtual function override.

        * platform/graphics/qt/ImageDecoderQt.cpp:
        (WebCore::ImageDecoderQt::ReadContext::ReadContext):
        (WebCore::ImageDecoderQt::setData):
        * platform/graphics/qt/ImageDecoderQt.h:

2009-09-01  Adam Barth  <abarth@webkit.org>

        Reviewed by Sam Weinig.

        Uninitialized variable in XSSAuditor
        https://bugs.webkit.org/show_bug.cgi?id=28874

        One ought to initialize variables before use even when it doesn't
        matter.  No behavior change.

        * page/XSSAuditor.h:
        (WebCore::XSSAuditor::CachingURLCanonicalizer::CachingURLCanonicalizer):

2009-09-01  Peter Kasting  <pkasting@google.com>

        Unreviewed (build fix).

        Try to fix Qt build.

        * platform/graphics/ImageSource.cpp:

2009-08-28  Peter Kasting  <pkasting@google.com>

        Reviewed by Eric Seidel.

        https://bugs.webkit.org/show_bug.cgi?id=27965
        Eliminate most of ImageSourceQt.cpp in favor of ImageSource.cpp.

        * WebCore.pro:
        * platform/graphics/ImageSource.cpp:
        (WebCore::ImageSource::frameHasAlphaAtIndex):
        * platform/graphics/qt/ImageSourceQt.cpp:
        (WebCore::ImageSource::createFrameAtIndex):
        (WebCore::ImageSource::frameHasAlphaAtIndex):
        (WebCore::ImageSource::frameIsCompleteAtIndex):

2009-09-01  Pavel Feldman  <pfeldman@chromium.org>

        Reviewed by Timothy Hatcher.

        WebInspector: Make InjectedScript self-contained (move necessary
        methods from utilities.js into InjectedScript).

        https://bugs.webkit.org/show_bug.cgi?id=28871

        * inspector/front-end/ElementsPanel.js:
        (WebInspector.ElementsPanel.prototype.generateStylesheet):
        * inspector/front-end/InjectedScript.js:
        (InjectedScript._ensureCommandLineAPIInstalled.inspectObject):
        (InjectedScript._ensureCommandLineAPIInstalled):
        (InjectedScript.pushNodeToFrontend):
        (InjectedScript.createProxyObject):
        (Object.type):
        (Object.hasProperties):
        (Object.className):
        (String.prototype.escapeCharacters):
        * inspector/front-end/utilities.js:

2009-09-01  Pavel Feldman  <pfeldman@chromium.org>

        Reviewed by Timothy Hatcher.

        WebInspector: console log message repeat count double.

        https://bugs.webkit.org/show_bug.cgi?id=28856

        * inspector/front-end/InjectedScript.js:
        (InjectedScript._evaluateOn):

2009-09-01  Jan Michael Alonzo  <jmalonzo@webkit.org>

        Reviewed by Mark Rowe.

        [Gtk] Fix DATALIST build
        https://bugs.webkit.org/show_bug.cgi?id=28826

        Add ENABLE_DATALIST to FEATURE_DEFINES.

        * GNUmakefile.am:

2009-09-01  Cameron McCormack  <cam@mcc.id.au>

        Reviewed by Eric Seidel.

        SVGSVGElement suspend methods argument/return types incorrect
        https://bugs.webkit.org/show_bug.cgi?id=28860

        Also fix the style of the argument names.

        * svg/SVGSVGElement.cpp:
        (WebCore::SVGSVGElement::suspendRedraw):
        (WebCore::SVGSVGElement::unsuspendRedraw):
        * svg/SVGSVGElement.h:

2009-09-01  Roland Steiner  <rolandsteiner@google.com>

        Reviewed by Eric Seidel.

        Fix bug 28808:  [Skia] Fix flaky layout test svg/dynamic-updates/SVGClipPathElement-dom-clipPathUnits-attr.html [DEBUG]
        (https://bugs.webkit.org/show_bug.cgi?id=28808)

        The bug fix adds an explicit check for the validity of the path when it is 
        transformed into local coordinates. 
        This was the most suitable place I could find that didn't cause an inordinate 
        amount of refactoring. Also, it seems pertinent and may also catch other cases 
        that are not limited to clipping paths.

        TEST: existing svg/dynamic-updates/SVGClipPathElement-dom-clipPathUnits-attr.html

        * platform/graphics/skia/GraphicsContextSkia.cpp: make isPathSkiaSafe accessible
        (WebCore::):
        * platform/graphics/skia/PlatformContextSkia.cpp:
        (PlatformContextSkia::currentPathInLocalCoordinates): check Skia safety of path

2009-09-01  Yusuke Sato  <yusukes@chromium.org>

        Reviewed by Eric Seidel.

        [Chromium] Combining Diacritical Marks (U+0300..) are not handled correctly.
        https://bugs.webkit.org/show_bug.cgi?id=28742 

        Normalize (NFC) a TextRun when the run contains combining diacritical marks
        so that Skia can pick a correct glyph without relying on GSUB table in a font.
        This change is for Chromium Linux.

        * platform/graphics/chromium/FontLinux.cpp:
        (WebCore::TextRunWalker::getTextRun): Added.
        (WebCore::TextRunWalker::getNormalizedTextRun): Added.

        This function is called when the run contains U+0300..U+036F and converts characters in
        the run to the combined form (NFC) using ICU.

2009-09-01  Vitaly Repeshko  <vitalyr@chromium.org>

        Reviewed by Dimitri Glazkov.

        [V8] Inlined fast paths of V8DOMWrapper::convertNodeToV8Object and
        V8Proxy::createWrapperFromCache.
        https://bugs.webkit.org/show_bug.cgi?id=28848

        * bindings/v8/V8DOMWrapper.cpp:
        (WebCore::V8DOMWrapper::convertDocumentToV8Object): Special
        function for document wrapping.
        (WebCore::V8DOMWrapper::convertNewNodeToV8Object): Slow case of
        wrapping a new node.
        * bindings/v8/V8DOMWrapper.h:
        (WebCore::V8DOMWrapper::convertNodeToV8Object): Extracted fast
        path from V8DOMWrapper.cpp.
        * bindings/v8/V8Proxy.cpp:
        (WebCore::V8Proxy::createWrapperFromCacheSlowCase):
        * bindings/v8/V8Proxy.h:
        (WebCore::V8Proxy::createWrapperFromCache): Extracted fast path
        from V8Proxy.cpp.

2009-09-01  Eric Seidel  <eric@webkit.org>

        No review, windows build fix only.  Clearly I should have read the patch closer. :(

        Allow excluding certain plugins from loading
        https://bugs.webkit.org/show_bug.cgi?id=28677

        * plugins/PluginDatabase.cpp:
        (WebCore::PluginDatabase::refresh):

2009-09-01  Alexander Pavlov  <apavlov@chromium.org>

        Reviewed by Timothy Hatcher.

        Implement conditional breakpoints in the Web Inspector backend
        and add frontend JavaScript stubs.
        https://bugs.webkit.org/show_bug.cgi?id=28846

        * inspector/InspectorBackend.cpp:
        (WebCore::InspectorBackend::profiles):
        (WebCore::InspectorBackend::addBreakpoint):
        (WebCore::InspectorBackend::updateBreakpoint):
        * inspector/InspectorBackend.h:
        * inspector/InspectorBackend.idl:
        * inspector/JavaScriptDebugServer.cpp:
        (WebCore::JavaScriptDebugServer::BreakpointInfo::condition):
        (WebCore::JavaScriptDebugServer::BreakpointInfo::setCondition):
        (WebCore::JavaScriptDebugServer::addBreakpoint):
        (WebCore::JavaScriptDebugServer::breakpointInfo):
        (WebCore::JavaScriptDebugServer::updateBreakpoint):
        (WebCore::JavaScriptDebugServer::updateBreakpointInfo):
        (WebCore::JavaScriptDebugServer::removeBreakpoint):
        (WebCore::JavaScriptDebugServer::hasBreakpoint):
        (WebCore::JavaScriptDebugServer::clearBreakpoints):
        * inspector/JavaScriptDebugServer.h:
        (WebCore::JavaScriptDebugServer::BreakpointInfo::BreakpointInfo):
        * inspector/front-end/Breakpoint.js:
        (WebInspector.Breakpoint):
        (WebInspector.Breakpoint.prototype.get id):
        (WebInspector.Breakpoint.prototype.get condition):
        (WebInspector.Breakpoint.prototype.set condition):
        * inspector/front-end/BreakpointsSidebarPane.js:
        (WebInspector.BreakpointsSidebarPane.prototype.addBreakpoint):
        (WebInspector.BreakpointsSidebarPane.prototype._breakpointEnableChanged):
        * inspector/front-end/ScriptsPanel.js:
        (WebInspector.ScriptsPanel.prototype.addScript):

2009-09-01  Marius Renn  <damarvy@gmail.com>

        Reviewed by Eric Seidel.

        Added delegate to PluginDatabase to disable loading certain plugins.
        This is useful when you want to load from the standard plugin
        directory, but want to exclude certain plugins. Plugins may be
        excluded early on by name, so that no plugin code is executed (which
        may have caused a crash).

        * plugins/PluginDatabase.cpp:
        (WebCore::PluginDatabase::PluginDatabase):
        (WebCore::PluginDatabase::refresh):
        * plugins/PluginDatabase.h:
        (WebCore::PluginDatabase::setClient):
        * plugins/PluginDatabaseClient.h: Added.
        (WebCore::PluginDatabaseClient::~PluginDatabaseClient):

2009-08-31  Brady Eidson  <beidson@apple.com>

        Rubberstamped by Sam Weinig

        * WebCore.base.exp: Removed an unneeded symbol export.

2009-08-31  Gustavo Noronha Silva  <gustavo.noronha@collabora.co.uk>

        Reviewed by Alexey Proskuryakov.

        https://bugs.webkit.org/show_bug.cgi?id=28466
        When downloading a file, two GET requests are sent to the HTTP server

        Can't think of a way to test this.

        * loader/ResourceLoader.cpp:
        (WebCore::ResourceLoader::releaseResources): only nullify the
        handle's client when it is the ResourceLoader, to support the case
        in which a download API uses a different client

2009-08-31  Brian Weinstein  <bweinstein@apple.com>

        Reviewed by Darin Adler.

        Text Fields and Text Areas are reported as read-only by inspect32.exe.
        https://bugs.webkit.org/show_bug.cgi?id=28854

        Added another case in AcccessibiltyRenderObject::isReadOnly to test if text fields
        and texts areas are read-only.

        * accessibility/AccessibilityRenderObject.cpp:
        (WebCore::AccessibilityRenderObject::isReadOnly):
        (WebCore::AccessibilityRenderObject::canSetValueAttribute):

2009-08-31  Drew Wilson  <atwilson@google.com>

        Reviewed by Alexey Proskuryakov.

        fast/workers/worker-lifecycle.html crashes intermittently on snowleopard
        https://bugs.webkit.org/show_bug.cgi?id=28795

        Changed WorkerContext::close() to no longer stop the worker thread.
        It is now the parent's responsibility to shut down the worker thread when it is notified that the context is closed.

        * workers/AbstractWorker.cpp:
        Updated dispatchScriptErrorEvent to pass-through the "handled" value from dispatchEvent(), to allow event handlers added with addEventListener() to mark events as handled.
        * workers/DefaultSharedWorkerRepository.cpp:
        (WebCore::SharedWorkerProxy::workerContextClosed):
        Now shuts down the worker thread when notified that the context is closed.
        (WebCore::SharedWorkerProxy::close):
        Now handles being invoked when the context is already in the process of shutting down.
        * workers/WorkerContext.cpp:
        (WebCore::WorkerContext::close):
        No longer calls WorkerThread::stop() to avoid race conditions with shutting down the thread while the parent is still interacting with it.
        * workers/WorkerContext.h:
        (WebCore::WorkerContext::isClosing):
        isClosing() is now public so WorkerRunLoop can call it to determine whether to process tasks.
        * workers/WorkerMessagingProxy.cpp:
        (WebCore::WorkerExceptionTask::performTask):
        Error events should still be delivered even if the worker thread is closing.
        Also fixed problem where error events were not dispatched if error handlers were added via addEventListener().
        (WebCore::WorkerTerminateTask::create):
        New task that invokes terminateWorkerContext() on the parent thread when the context is closed.
        (WebCore::WorkerTerminateTask::WorkerTerminateTask):
        (WebCore::WorkerTerminateTask::performTask):
        (WebCore::WorkerMessagingProxy::workerContextClosed):
        Now fires off a WorkerTerminateTask to shut down the thread when the context is closed.
        * workers/WorkerMessagingProxy.h:
        WorkerMessagingProxy now overrides workerContextClosed().
        * workers/WorkerRunLoop.cpp:
        (WebCore::WorkerRunLoop::runInMode):
        Now drops tasks on the floor if the WorkerContext is closing.

2009-08-31  Ojan Vafai  <ojan@chromium.org>

        Not reviewed (build fix)

        Build fix for Chromium to match r49707.

        * bindings/v8/ScriptCallFrame.cpp:
        (WebCore::ScriptCallFrame::ScriptCallFrame):
        * bindings/v8/ScriptSourceCode.h:
        (WebCore::ScriptSourceCode::ScriptSourceCode):
        * platform/KURLGoogle.cpp:
        (WebCore::KURL::KURL):
        (WebCore::blankURL):

2009-08-31  Alexey Proskuryakov  <ap@webkit.org>

        Reviewed by Darin Adler.

        https://bugs.webkit.org/show_bug.cgi?id=28858
        Element.baseURI parses xml:base attribute incorrectly

        Test: fast/dom/base-attribute-parsing.xhtml

        * dom/Element.cpp: (WebCore::Element::baseURI): Avoid assertion failure (no change in
        release mode).

2009-08-31  Dimitri Glazkov  <dglazkov@chromium.org>

        Reverting http://trac.webkit.org/changeset/47904, because it caused
        layout test failure.

        Test: fast/dom/Window/new-window-opener.html

2009-08-31  Alexey Proskuryakov  <ap@webkit.org>

        Reviewed by Darin Adler.

        https://bugs.webkit.org/show_bug.cgi?id=28852
        Rename KURL single argument constructor to avoid confusion

        * platform/KURL.h: The constructor that used to be single argument should now be invoked
        as KURL(ParsedURLString, myString).

        * WebCore.base.exp:
        * bindings/js/JSDOMWindowCustom.cpp:
        (WebCore::createWindow):
        * bindings/js/ScriptCallFrame.cpp:
        (WebCore::ScriptCallFrame::ScriptCallFrame):
        * bindings/v8/NPV8Object.cpp:
        (_NPN_EvaluateHelper):
        * bindings/v8/custom/V8DOMWindowCustom.cpp:
        (WebCore::createWindow):
        * css/CSSCursorImageValue.cpp:
        (WebCore::isSVGCursorIdentifier):
        * css/CSSImageValue.cpp:
        (WebCore::CSSImageValue::cachedImage):
        * css/CSSImportRule.cpp:
        (WebCore::CSSImportRule::insertedIntoParent):
        * css/StyleBase.cpp:
        (WebCore::StyleBase::baseURL):
        * dom/Document.cpp:
        (WebCore::Document::initSecurityContext):
        * dom/Element.cpp:
        (WebCore::Element::baseURI):
        * editing/markup.cpp:
        (WebCore::completeURLs):
        * history/HistoryItem.cpp:
        (WebCore::HistoryItem::url):
        (WebCore::HistoryItem::originalURL):
        * inspector/InspectorController.cpp:
        (WebCore::InspectorController::didLoadResourceFromMemoryCache):
        * inspector/InspectorResource.cpp:
        (WebCore::InspectorResource::createCached):
        * loader/Cache.cpp:
        (WebCore::Cache::revalidateResource):
        * loader/DocLoader.cpp:
        (WebCore::DocLoader::requestResource):
        * loader/DocumentLoader.cpp:
        (WebCore::DocumentLoader::getSubresources):
        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::init):
        (WebCore::FrameLoader::iconURL):
        (WebCore::FrameLoader::scheduleLocationChange):
        (WebCore::FrameLoader::redirectionTimerFired):
        (WebCore::FrameLoader::loadURLIntoChildFrame):
        (WebCore::FrameLoader::startRedirectionTimer):
        * loader/appcache/ApplicationCache.cpp:
        (WebCore::ApplicationCache::resourceForURL):
        * loader/appcache/ApplicationCacheGroup.cpp:
        (WebCore::ApplicationCacheGroup::startLoadingEntry):
        (WebCore::ApplicationCacheGroup::addEntry):
        * loader/appcache/ApplicationCacheStorage.cpp:
        (WebCore::ApplicationCacheStorage::cacheGroupForURL):
        (WebCore::ApplicationCacheStorage::fallbackCacheGroupForURL):
        (WebCore::ApplicationCacheStorage::loadCache):
        (WebCore::ApplicationCacheStorage::manifestURLs):
        * loader/archive/cf/LegacyWebArchive.cpp:
        (WebCore::LegacyWebArchive::createResource):
        (WebCore::LegacyWebArchive::create):
        * loader/loader.cpp:
        (WebCore::Loader::load):
        * notifications/NotificationCenter.h:
        (WebCore::NotificationCenter::createHTMLNotification):
        * platform/KURL.cpp:
        (WebCore::KURL::KURL):
        (WebCore::blankURL):
        * platform/KURLHash.h:
        * platform/chromium/ClipboardChromium.cpp:
        (WebCore::ClipboardChromium::setData):
        * platform/graphics/mac/MediaPlayerPrivateQTKit.mm:
        (WebCore::MediaPlayerPrivate::createQTMovie):
        * platform/network/cf/ResourceErrorCF.cpp:
        (WebCore::ResourceError::operator CFErrorRef):
        * platform/network/cf/ResourceRequest.h:
        (WebCore::ResourceRequest::ResourceRequest):
        * platform/network/chromium/ResourceRequest.h:
        (WebCore::ResourceRequest::ResourceRequest):
        * platform/network/curl/ResourceHandleManager.cpp:
        (WebCore::handleLocalReceiveResponse):
        (WebCore::headerCallback):
        * platform/network/curl/ResourceRequest.h:
        (WebCore::ResourceRequest::ResourceRequest):
        * platform/network/mac/ResourceErrorMac.mm:
        (WebCore::ResourceError::operator NSError*):
        * platform/network/mac/ResourceRequest.h:
        (WebCore::ResourceRequest::ResourceRequest):
        * platform/network/qt/ResourceRequest.h:
        (WebCore::ResourceRequest::ResourceRequest):
        * platform/network/soup/ResourceRequest.h:
        (WebCore::ResourceRequest::ResourceRequest):
        * platform/win/ClipboardWin.cpp:
        (WebCore::filesystemPathFromUrlOrTitle):
        (WebCore::ClipboardWin::setData):
        * svg/graphics/SVGImage.cpp:
        (WebCore::SVGImage::dataChanged):
        * xml/XSLImportRule.cpp:
        (WebCore::XSLImportRule::loadSheet):
        * xml/XSLTProcessor.cpp:
        (WebCore::docLoaderFunc):
        Adapt to the change everywhere the single argument constructor was used. I did a very
        cursory check of whether these locations were using this constructor properly, and didn't
        notice any obvious mistakes. The new explicit name will hopefully suggest checking this
        better when refactoring any such code.

2009-08-31  Beth Dakin  <bdakin@apple.com>

        Reviewed by Darin Adler.

        Fix for https://bugs.webkit.org/show_bug.cgi?id=28635 [CSS3 
        Backgrounds and Borders] Add support for 2-keyword values for 
        background-repeat

        This patch allows background-repeat to take two values by making 
        background-repeat just like background-position internally. There 
        is a little extra legwork for background-repeat because the spec 
        indicates that its computed value should be equivalent to how it 
        was specified. I keep track of the specified thing by setting the 
        implicit flag whenever background-repeat is defined with only one 
        value (since internally, we now store this as 2 values.)
        
        Here we can't access the implicit flag, so for backwards-
        compatibility's sake, we always return one value when that makes 
        sense.
        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::fillRepeatToCSSValue):
        (WebCore::CSSComputedStyleDeclaration::getPropertyCSSValue):

        Here we check for the implicit flag and return one value when it is 
        set.
        * css/CSSMutableStyleDeclaration.cpp:
        (WebCore::CSSMutableStyleDeclaration::getPropertyValue):
        (WebCore::CSSMutableStyleDeclaration::getLayeredShorthandValue):
        (WebCore::CSSMutableStyleDeclaration::cssText):

        Add support for CSSPropertyBackgroundRepeatX and 
        CSSPropertyBackgroundRepeatY
        * css/CSSParser.cpp:
        (WebCore::CSSParser::parseValue):
        (WebCore::CSSParser::parseFillShorthand):
        (WebCore::CSSParser::parseFillRepeat):
        (WebCore::CSSParser::parseFillProperty):
        * css/CSSParser.h:

        Get rid of mappings to RepeatXFill and RepeatYFill since we don't 
        need those parts of the EFillRepeat enum anymore.
        * css/CSSPrimitiveValueMappings.h:
        (WebCore::CSSPrimitiveValue::CSSPrimitiveValue):
        (WebCore::CSSPrimitiveValue::operator EFillRepeat):

        Add CSSPropertyBackgroundRepeatX and CSSPropertyBackgroundRepeatY
        * css/CSSPropertyLonghand.cpp:
        (WebCore::initShorthandMap):

        Add background-repeat-x and -y.
        * css/CSSPropertyNames.in:

        Break repeat into x and y.
        * css/CSSStyleSelector.cpp:
        (WebCore::CSSStyleSelector::applyProperty):
        (WebCore::CSSStyleSelector::mapFillRepeatX):
        (WebCore::CSSStyleSelector::mapFillRepeatY):
        * css/CSSStyleSelector.h:

        There is no more RepeatXFill. Instead, look for 
        fillLayer->repeatX() == RepeatFill
        * rendering/RenderBoxModelObject.cpp:
        (WebCore::RenderBoxModelObject::calculateBackgroundImageGeometry):

        Break m_repeat into m_repeatX and m_repeatY
        * rendering/style/FillLayer.cpp:
        (WebCore::FillLayer::FillLayer):
        (WebCore::FillLayer::operator=):
        (WebCore::FillLayer::operator==):
        (WebCore::FillLayer::fillUnsetProperties):
        (WebCore::FillLayer::cullEmptyLayers):
        * rendering/style/FillLayer.h:
        (WebCore::FillLayer::repeatX):
        (WebCore::FillLayer::repeatY):
        (WebCore::FillLayer::isRepeatXSet):
        (WebCore::FillLayer::isRepeatYSet):
        (WebCore::FillLayer::setRepeatX):
        (WebCore::FillLayer::setRepeatY):
        (WebCore::FillLayer::clearRepeatX):
        (WebCore::FillLayer::clearRepeatY):
        (WebCore::FillLayer::initialFillRepeatX):
        (WebCore::FillLayer::initialFillRepeatY):

        Again, break backgroundRepeat into backgroundRepeatX and 
        backgroundRepeatY
        * rendering/style/RenderStyle.h:
        (WebCore::InheritedFlags::backgroundRepeatX):
        (WebCore::InheritedFlags::backgroundRepeatY):
        (WebCore::InheritedFlags::maskRepeatX):
        (WebCore::InheritedFlags::maskRepeatY):

        We don't need RepeatXFill or RepeatYFill. Now that we store two 
        values, they are represented by Repeat-NoRepeat and NoRepeat-
        Repeat, respectively.
        * rendering/style/RenderStyleConstants.h:
        (WebCore::):

2009-08-31  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Dan Bernstein.

        Compositing layer size needs to take into account software reflections on children.
        https://bugs.webkit.org/show_bug.cgi?id=28837
        
        When computing the bounds of a composited layer, take software-rendered
        reflections into account.

        Test: compositing/reflections/reflection-in-composited.html

        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::calculateCompositedBounds):

2009-08-31  Mark Mentovai  <mark@chromium.org>

        Reviewed by Dave Hyatt.

        https://bugs.webkit.org/show_bug.cgi?id=28614

        Perform a layout prior to checking whether the scrollbar modes are
        off, on, or automatic.  The modes may change during layout.

        * platform/ScrollView.cpp:
        (WebCore::ScrollView::updateScrollbars):

2009-08-31  Patrick Mueller  <Patrick_Mueller@us.ibm.com>

        Reviewed by Timothy Hatcher.

        Inspector Request Headers Should Show Data Sent With Request
        https://bugs.webkit.org/show_bug.cgi?id=22920

        Manual test added - see below.

        * English.lproj/localizedStrings.js:
        * inspector/InspectorResource.cpp:
        (WebCore::InspectorResource::updateRequest):
        (WebCore::InspectorResource::createScriptObject):
        (WebCore::InspectorResource::updateScriptObject):
        * inspector/InspectorResource.h:
        * inspector/front-end/Resource.js:
        (WebInspector.Resource):
        * inspector/front-end/ResourceView.js:
        (WebInspector.ResourceView):
        (WebInspector.ResourceView.prototype._refreshURL):
        (WebInspector.ResourceView.prototype._refreshQueryString):
        (WebInspector.ResourceView.prototype._refreshFormData):
        (WebInspector.ResourceView.prototype._refreshRequestPayload):
        (WebInspector.ResourceView.prototype._refreshParms):
        (WebInspector.ResourceView.prototype._toggleURLdecoding):
        (WebInspector.ResourceView.prototype._getHeaderValue):
        (WebInspector.ResourceView.prototype._refreshRequestHeaders):
        * inspector/front-end/inspector.css:
        * inspector/front-end/inspector.js:
        (WebInspector.addResource):
        (WebInspector.updateResource):
        * manual-tests/inspector/display-form-data.html: Added.

2009-08-31  Pavel Feldman  <pfeldman@chromium.org>

        Reviewed by Timothy Hatcher.

        WebInspector: pass call frames into the frontend as a part of
        pausedScript event.

        https://bugs.webkit.org/show_bug.cgi?id=28847

        * inspector/InspectorController.cpp:
        (WebCore::InspectorController::didPause):
        * inspector/InspectorFrontend.cpp:
        (WebCore::InspectorFrontend::pausedScript):
        * inspector/InspectorFrontend.h:
        * inspector/front-end/ScriptsPanel.js:
        (WebInspector.ScriptsPanel.prototype.debuggerPaused):
        * inspector/front-end/inspector.js:
        (WebInspector.pausedScript):

2009-08-31  Tor Arne Vestbø  <tor.arne.vestbo@nokia.com>

        Reviewed by Ariya Hidayat.

        [Qt] Un-blacklist Silverlight on Mac

        Does not seem to crash anymore, probably due to how we now handle
        drawing and event model handshake better.

        * plugins/mac/PluginPackageMac.cpp:
        (WebCore::PluginPackage::isPluginBlacklisted):

2009-08-31  Cameron McCormack  <cam@mcc.id.au>

        Reviewed by Eric Seidel.

        https://bugs.webkit.org/show_bug.cgi?id=28827
        SVGSVGElement.unsuspendRedraw() shouldn't throw

        * svg/SVGSVGElement.cpp:
        (WebCore::SVGSVGElement::unsuspendRedraw):
        * svg/SVGSVGElement.h:
        * svg/SVGSVGElement.idl:

2009-08-31  Kent Tamura  <tkent@chromium.org>

        Reviewed by Eric Seidel.

        - Change the reutrn type of HTMLInputElement::list so that it
          conforms to the standard.
        - Add HTMLInputElement::dataList()
        https://bugs.webkit.org/show_bug.cgi?id=28769


        * html/HTMLInputElement.cpp:
        (WebCore::HTMLInputElement::list):
        (WebCore::HTMLInputElement::dataList):
        (WebCore::HTMLInputElement::selectedOption):
        * html/HTMLInputElement.h:
        * html/HTMLInputElement.idl:

2009-08-31  Kwang Yul Seo  <skyul@company100.net>

        Reviewed by Eric Seidel.

        Remove ASSERT(frame) in ResourceHandle::start (ResourceHandleCurl.cpp)
        https://bugs.webkit.org/show_bug.cgi?id=28802

        Remove ASSERT because the frame could be null if the
        ResourceHandle is not associated with any frame, e.g. if we are
        downloading a file.
        If the frame is not null but the page is null this must be an
        attempted load from an onUnload handler, so let's just block it.

        * platform/network/curl/ResourceHandleCurl.cpp:
        (WebCore::ResourceHandle::start):

2009-08-31  Maxime Simon  <simon.maxime@gmail.com>

        Reviewed by Eric Seidel.

        Build fix for platforms which don't enable DOM_STORAGE.
        https://bugs.webkit.org/show_bug.cgi?id=28834

        * bindings/js/ScriptController.cpp:
        (WebCore::ScriptController::evaluate):
        * bindings/v8/ScriptController.cpp:
        (WebCore::ScriptController::evaluate):

2009-08-29  Adele Peterson  <adele@apple.com>

        Reviewed by Dan Bernstein.

        Fix for https://bugs.webkit.org/show_bug.cgi?id=28829
        Crash in AccessibilityRenderObject::activeDescendant when trying to set aria-activedescendant to something without a renderer

        Test: accessibility/aria-activedescendant-crash.html

        * accessibility/AccessibilityRenderObject.cpp: (WebCore::AccessibilityRenderObject::activeDescendant): Nil check.

2009-08-28  Jan Michael Alonzo  <jmalonzo@webkit.org>

        Reviewed by Oliver Hunt.

        Gtk Build broken for OSX Quartz
        https://bugs.webkit.org/show_bug.cgi?id=28727

        Check for XP_UNIX instead of GTK or X11 to ease building of the Gtk
        port in Mac and Unix/Linux.

        * plugins/PluginView.cpp:
        (WebCore::PluginView::PluginView):
        * plugins/PluginView.h:
        * plugins/gtk/PluginViewGtk.cpp:
        (WebCore::PluginView::setNPWindowIfNeeded):
        (WebCore::PluginView::getValueStatic):
        (WebCore::PluginView::getValue):
        (WebCore::PluginView::init):

2009-08-28  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Dan Bernstein.

        Fix positioning error when a compositing, absolutely-positioned element has an ancestor with opacity.
        https://bugs.webkit.org/show_bug.cgi?id=28754
        
        For absolutely-positioned layers, convertToLayerCoords() jumps to the positioned
        ancestor, since the layer x and y are relative to that ancestor. However, this could
        skip over the ancestorLayer, thus giving the wrong result.
        
        Fix by duplicating the enclosingPositionedAncestor() logic in convertToLayerCoords(),
        and checking for ancestorLayer along the way. If found, compute offset of both to
        the enclosingPositionedAncestor() and subtract.
        
        This also fixes a positioning bug with abs. positioned elements in reflections,
        so there is a new reflection test with a pixel result.

        Tests: compositing/geometry/abs-position-inside-opacity.html
               fast/reflections/abs-position-in-reflection.html

        * rendering/RenderLayer.cpp:
        (WebCore::isPositionedContainer):
        (WebCore::RenderLayer::enclosingPositionedAncestor):
        (WebCore::RenderLayer::enclosingTransformedAncestor):
        (WebCore::RenderLayer::convertToLayerCoords):

2009-08-28  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by Mark Rowe

        Wrap WebkitCSSTransformValues in the correct class of DOM wrapper.
        https://bugs.webkit.org/show_bug.cgi?id=27727

        When fetching the DOM wrapper for a WebkitCSSTransformValue (which is a kind of 
        CSSValueList), we need to ask the value list whether it's a WebkitCSSTransformValue,
        because there is not a unique enum value for WebkitCSSTransformValue.

        * bindings/objc/DOMCSS.mm:
        (kitClass):

2009-08-28  Peter Kasting  <pkasting@google.com>

        Reviewed by Jan Michael Alonzo.

        https://bugs.webkit.org/show_bug.cgi?id=28308
        Fix some warnings introduced by r47381.

        * platform/image-decoders/jpeg/JPEGImageDecoder.cpp:
        (WebCore::convertCMYKToRGBA):
        (WebCore::convertRGBToRGBA):

2009-08-28  Ada Chan  <adachan@apple.com>

        Reviewed by Adam Roben.

        https://bugs.webkit.org/show_bug.cgi?id=21442
        Make sure filesystemPathFromUrlOrTitle() returns a string with length
        <= MAX_PATH - 1.

        * platform/win/ClipboardWin.cpp:
        (WebCore::filesystemPathFromUrlOrTitle):

2009-08-28  Dumitru Daniliuc  <dumi@chromium.org>

        Reviewed by Dimitri Glazkov.

        Adding Chromium's VFS for Linux and Mac.

        https://bugs.webkit.org/show_bug.cgi?id=28750

        * WebCore.gypi:
        * platform/chromium/ChromiumBridge.h:
        * platform/sql/chromium/SQLiteFileSystemChromium.cpp:
        (WebCore::SQLiteFileSystem::openDatabase):
        (WebCore::SQLiteFileSystem::deleteDatabaseFile):
        * platform/sql/chromium/SQLiteFileSystemChromiumLinux.cpp: Removed.
        * platform/sql/chromium/SQLiteFileSystemChromiumMac.cpp: Removed.
        * platform/sql/chromium/SQLiteFileSystemChromiumPosix.cpp: Added.
        * platform/sql/chromium/SQLiteFileSystemChromiumWin.cpp:

2009-08-28  Vitaly Repeshko  <vitalyr@chromium.org>

        Reviewed by Dimitri Glazkov.

        [V8] Made bindings use Node::setOnEvent functions for Node descendants
        instead of Node::setAttributeEventListener.

        Node::setAttributeEventListener is an internal function and
        doesn't do the forwarding to DOM window that is required for some
        HTML elements.
        https://bugs.webkit.org/show_bug.cgi?id=28709

        Tests added in http://trac.webkit.org/changeset/47326 now pass with V8.

        * bindings/scripts/CodeGeneratorV8.pm:
        Now generates EventListener accessors for Node descendants instead
        of using custom callbacks.
        * bindings/v8/V8DOMWrapper.cpp:
        (WebCore::V8DOMWrapper::getEventListener): Moved from V8NodeCustom.cpp.
        * bindings/v8/V8DOMWrapper.h:
        (WebCore::V8DOMWrapper::convertEventListenerToV8Object): Fixed a bug in
        signature.
        * bindings/v8/V8Utilities.cpp:
        (WebCore::createHiddenDependency):
        (WebCore::removeHiddenDependency):
        Changed signature to accept Handle instead of Local.
        * bindings/v8/V8Utilities.h:
        * bindings/v8/custom/V8CustomBinding.h:
        * bindings/v8/custom/V8NodeCustom.cpp:
        (WebCore::CALLBACK_FUNC_DECL):
        Removed custom callbacks for EventListener accessors.

2009-08-28  Ben Murdoch  <benm@google.com>

        https://bugs.webkit.org/show_bug.cgi?id=28803
        
        Implements V8CustomVoidCallback reporting any exceptions that were thrown from the callback function.

        * bindings/v8/custom/V8CustomVoidCallback.cpp:
        (WebCore::invokeCallback): Checks if the callback raised an exception and reports it to WebCore if so.

2009-08-28  Peter Kasting  <pkasting@google.com>

        Not reviewed (build fix).

        * platform/graphics/qt/ImageDecoderQt.cpp: Accidentally added some spaces.
        (WebCore::ImageDecoder::create):
        (WebCore::ImageDecoderQt::ImageDecoderQt):
        * platform/graphics/qt/ImageDecoderQt.h: Make constructor public so factory function can access it (this seemed better than making ImageDecoder a friend).

2009-08-28  Peter Kasting  <pkasting@google.com>

        Reviewed by Eric Seidel.

        https://bugs.webkit.org/show_bug.cgi?id=27965
        Move ImageDecoder creation function to a factory function on
        ImageDecoder.  This is arguably where it makes the most sense anyway,
        and it will (soon) allow ImageSourceQt.cpp to have one less dedicated
        function.

        * platform/graphics/ImageSource.cpp:
        * platform/graphics/qt/ImageDecoderQt.cpp:
        (WebCore::ImageDecoder::create):
        * platform/graphics/qt/ImageDecoderQt.h:
        * platform/graphics/qt/ImageSourceQt.cpp:
        (WebCore::ImageSource::setData):
        * platform/image-decoders/ImageDecoder.cpp:
        * platform/image-decoders/ImageDecoder.h:

2009-08-28  Peter Kasting  <pkasting@google.com>

        Reviewed by Eric Seidel.

        https://bugs.webkit.org/show_bug.cgi?id=28785
        Combine duplicated code from ImageDecoder*.cpp into the main
        ImageDecoder.cpp.

        * platform/image-decoders/ImageDecoder.cpp:
        (WebCore::RGBA32Buffer::RGBA32Buffer):
        (WebCore::RGBA32Buffer::clear):
        (WebCore::RGBA32Buffer::zeroFill):
        (WebCore::RGBA32Buffer::copyBitmapData):
        (WebCore::RGBA32Buffer::setSize):
        (WebCore::RGBA32Buffer::hasAlpha):
        (WebCore::RGBA32Buffer::setHasAlpha):
        (WebCore::RGBA32Buffer::setStatus):
        (WebCore::RGBA32Buffer::operator=):
        (WebCore::RGBA32Buffer::width):
        (WebCore::RGBA32Buffer::height):
        * platform/image-decoders/cairo/ImageDecoderCairo.cpp:
        * platform/image-decoders/haiku/ImageDecoderHaiku.cpp:
        * platform/image-decoders/wx/ImageDecoderWx.cpp:

2009-08-28  Gustavo Noronha Silva  <gustavo.noronha@collabora.co.uk>

        Reviewed by Holger Freyther.

        https://bugs.webkit.org/show_bug.cgi?id=25889
        [GTK] scrollbar policy for main frame is not implementable

        Override setScrollbarModes to correctly forward scrollbar modes
        policy changes to client code, via a new platform-specific method,
        scrollbarsPolicyDidChange.

        * page/ChromeClient.h:
        (WebCore::ChromeClient::scrollbarsPolicyDidChange):
        * platform/ScrollView.cpp:
        (WebCore::ScrollView::createScrollbar):
        * platform/ScrollView.h:
        * platform/gtk/ScrollViewGtk.cpp:
        (WebCore::ScrollView::setScrollbarModes):

2009-08-28  Cédric Luthi <cedric.luthi@gmail.com>

        Reviewed by Tor Arne Vestbø

        [Qt/Mac] Un-blacklist the QuickTime plugin

        https://bugs.webkit.org/show_bug.cgi?id=28768

        Now that the drawing model is properly negotiated, there is no need the
        blacklist the QuickTime plugin anymore.

        This revealed a bug in PluginView::performRequest: it should not initiate a
        request if the plugin has been stopped, which is what happens when a plugin
        only supports the QuickDraw drawing model.

        * plugins/PluginView.cpp:
        * plugins/mac/PluginPackageMac.cpp:

2009-08-28  Yury Semikhatsky  <yurys@chromium.org>

        Reviewed by Timothy Hatcher.

        Set DOM agent document to 0 in InspectorController::close to
        make DOM agent remove DOM listeners from the inspected document.

        Replace windowVisible checks with m_frontend checks to as inspector
        window lives in a different process in Chromium while frontend proxy
        is in the inspected page process.

        https://bugs.webkit.org/show_bug.cgi?id=28800

        * inspector/InspectorController.cpp:
        (WebCore::InspectorController::inspect):
        (WebCore::InspectorController::addConsoleMessage):
        (WebCore::InspectorController::close):
        (WebCore::InspectorController::pruneResources):
        (WebCore::InspectorController::didCommitLoad):
        (WebCore::InspectorController::didLoadResourceFromMemoryCache):
        (WebCore::InspectorController::identifierForInitialRequest):
        (WebCore::InspectorController::willSendRequest):
        (WebCore::InspectorController::didReceiveResponse):
        (WebCore::InspectorController::didReceiveContentLength):
        (WebCore::InspectorController::didFinishLoading):
        (WebCore::InspectorController::didFailLoading):
        (WebCore::InspectorController::resourceRetrievedByXMLHttpRequest):
        (WebCore::InspectorController::scriptImported):
        (WebCore::InspectorController::didOpenDatabase):
        (WebCore::InspectorController::didUseDOMStorage):
        (WebCore::InspectorController::addProfile):
        * inspector/InspectorController.h:

2009-08-28  Mikhail Naganov  <mnaganov@chromium.org>

        Reviewed by Timothy Hatcher.

        Remove dependency of SummaryBar on WebInspector.resourceCategories.

        https://bugs.webkit.org/show_bug.cgi?id=28801

        * inspector/front-end/ResourcesPanel.js:
        (WebInspector.ResourcesPanel):
        (WebInspector.ResourcesPanel.prototype.toolbarItemClass.get categories):
        * inspector/front-end/SummaryBar.js:
        (WebInspector.SummaryBar):
        (WebInspector.SummaryBar.prototype.update):

2009-08-28  Pavel Feldman  <pfeldman@chromium.org>

        Not reviewed (patching in l18n change that was missing due to
        the git binary diff format).

        https://bugs.webkit.org/show_bug.cgi?id=28429

        * English.lproj/localizedStrings.js:

2009-08-28  Adam Barth  <abarth@webkit.org>

        Reviewed by Eric Seidel.

        Make XSSAuditor go fast
        https://bugs.webkit.org/show_bug.cgi?id=28667

        Make the XSSAuditor go faster by implementing two optimizations:

        1) We avoid canonicalizing scripts that are larger than the page's URL.
           This saves a bunch of time for large inline scripts.

        2) We memoize canonicalizing the page's URL because it's silly to
           canonicalize repeated for each inline event listener.

        These optimizations have a measurable affect on the intl1 page cycler.

        No behavior change.

        * page/XSSAuditor.cpp:
        (WebCore::XSSAuditor::MemoizingURLCanonicalizer::canonicalizeURL):
        (WebCore::XSSAuditor::canEvaluate):
        (WebCore::XSSAuditor::canEvaluateJavaScriptURL):
        (WebCore::XSSAuditor::canCreateInlineEventListener):
        (WebCore::XSSAuditor::canLoadExternalScriptFromSrc):
        (WebCore::XSSAuditor::canLoadObject):
        (WebCore::XSSAuditor::canSetBaseElementURL):
        (WebCore::XSSAuditor::decodeURL):
        (WebCore::XSSAuditor::findInRequest):
        * page/XSSAuditor.h:

2009-08-27  Dimitri Glazkov  <dglazkov@chromium.org>

        Unreviewed, build fix.

        Removed ASSERT_NOT_REACHED, because indeed this ASSERT is reached in
        fast/canvas/change-context.html. And it's alright to reach it.

        * bindings/v8/custom/V8HTMLCanvasElementCustom.cpp:
        (WebCore::CALLBACK_FUNC_DECL): Removed assertion.

2009-08-27  Jeremy Orlow  <jorlow@chromium.org>

        Not reviewed.  Build fix for http://trac.webkit.org/changeset/47840

        Peter's change forgot one m_decoder->

        * platform/graphics/ImageSource.cpp:
        (WebCore::ImageSource::frameSizeAtIndex):

2009-08-27  Dimitri Glazkov  <dglazkov@chromium.org>

        Unreviewed, build fix.

        [V8] Add NULL-check, since the context ain't changeable no more, and
        thus getContext could return 0.

        * bindings/v8/custom/V8HTMLCanvasElementCustom.cpp:
        (WebCore::CALLBACK_FUNC_DECL): Added NULL-check.

2009-08-27  Noel Gordon  <noel.gordon@gmail.com>

        Reviewed by Eric Seidel.

        dataTransfer.types() should include type "Files" when files are present in the clipboard.
        https://bugs.webkit.org/show_bug.cgi?id=28780

        Add dataTransfer type "Files" to the chromium port.  Add eseidel's
        patch for same for the mac port.

        * platform/chromium/ClipboardChromium.cpp:

2009-08-27  Chris Marrin  <cmarrin@apple.com>

        Reviewed by Simon Fraser.

        Removed GL_ from all constants, and gl prefix from all calls
        https://bugs.webkit.org/show_bug.cgi?id=28773

        This was done for the external API in CanvasRenderingContext3D and
        the internal API in GraphicsContext3D.

        * html/canvas/CanvasRenderingContext3D.cpp:
        * html/canvas/CanvasRenderingContext3D.h:
        * bindings/js/JSCanvasRenderingContext3DCustom.cpp:
        * html/canvas/CanvasRenderingContext3D.idl:
        * platform/graphics/GraphicsContext3D.h:
        * platform/graphics/mac/GraphicsContext3DMac.cpp:

2009-08-27  Jan Michael Alonzo  <jmalonzo@webkit.org>

        Qt and Gtk build fixes. Not reviewed.

        Add CanvasRenderingContext3D.idl to the build scripts.

        * GNUmakefile.am:
        * WebCore.pro:

2009-08-27  Jeremy Orlow  <jorlow@chromium.org>

        Reviewed by Darin Fisher.

        Release the storage mutex whenever leaving JavaScript execution.
        https://bugs.webkit.org/show_bug.cgi?id=28789

        http://dev.w3.org/html5/spec/Overview.html#storage-mutex describes the
        required behavior.  After we leave JavaScript, we must be sure the storage
        mutex has been released.  At the end of evaluate(), if localStorage has been
        instantiated, tell it to release any locks that may be applicable.

        * bindings/js/ScriptController.cpp:
        (WebCore::ScriptController::evaluate):
        * bindings/v8/ScriptController.cpp:
        (WebCore::ScriptController::evaluate):

2009-08-27  Alexey Proskuryakov  <ap@apple.com>

        Reviewed by Oliver Hunt.

        https://bugs.webkit.org/show_bug.cgi?id=28753
        <rdar://problem/7173448> Excessive number of threads (and a crash)

        Coalesce DNS prefetch requests to reduce strain on CFHost. Currently, the algorithm is as follows:
        - when resolver is idle, the first few requests are sent immediately (they may or may not
        hit the wire);
        - if there are a few requests in flight already, coalesce all requests for one second;
        - to avoid pathological cases with lots of links to different sites on a page, only ask
        CFHost about a handful of names (dropping the rest).

        Coalescing reduces the number of requests dramatically, as prefetchDNS is called for each
        link, and these tend to have identical host name.

        * platform/network/cf/DNSCFNet.cpp:
        (WebCore::DNSResolveQueue::DNSResolveQueue):
        (WebCore::DNSResolveQueue::shared):
        (WebCore::DNSResolveQueue::add):
        (WebCore::DNSResolveQueue::decrementRequestCount):
        (WebCore::DNSResolveQueue::fired):
        (WebCore::clientCallback):
        (WebCore::DNSResolveQueue::resolve):
        (WebCore::prefetchDNS):

2009-08-27  Chris Marrin  <cmarrin@apple.com>

        Reviewed by Simon Fraser.

        Final patch for Canvas 3D support
        https://bugs.webkit.org/show_bug.cgi?id=28018

        This hooks everything up and provides a working implementation of
        Canvas 3D. I plumb the creation of the 3D canvas down to GraphicsLayer,
        passing the opaque context and texture pointers so a Canvas3DLayer can be
        created (more on that later). It also plumbs changes to the 3D canvas so
        that Canvas3DLayer can recomposite the results.
        
        A 3D Canvas element needs a RenderLayer and compositing layer to render.
        This is because it renders to an off-screen texture in the GPU and then
        hands it to a Canvas3DLayer, which is a subclass of CAOpenGLLayer, to
        render that texture as a 3D quad. This keeps everything in GPU memory to 
        maximize performance. When a CanvasRenderingContext3D is created it 
        forces a style recalc which creates the RenderLayer and compositing 
        layer if needed. 
        
        I repurposed an existing flag which was put in place for animation to accomplish 
        this. This flag is passed to setNeedsStyleRecalc(), and I renamed it from 
        AnimationStyleChange to SyntheticStyleChange. It essentially says that you need
        to do a complete style recalc, even though the style itself has not really
        changed.
        
        This patch also fixes a couple of bugs discovered when testing with 3d-canvas
        turned on. I also added a constructor DOMWindow.idl for CanvasRenderingContext3D.
        This is needed when making a JS wrapper for the object so the prototype 
        property can be set.

        Test: fast/canvas/change-context.html

        * WebCore.xcodeproj/project.pbxproj:
        * bindings/js/JSCanvasRenderingContext3DCustom.cpp:
        (WebCore::JSCanvasRenderingContext3D::glDrawElements):
        * bindings/js/JSCanvasRenderingContextCustom.cpp:
        (WebCore::toJS):
        * dom/Element.cpp:
        (WebCore::Element::recalcStyle):
        * dom/Node.cpp:
        (WebCore::Node::setNeedsStyleRecalc):
        * dom/Node.h:
        (WebCore::):
        * html/HTMLCanvasElement.cpp:
        (WebCore::HTMLCanvasElement::getContext):
        (WebCore::HTMLCanvasElement::is3D):
        * html/HTMLCanvasElement.h:
        * html/canvas/CanvasBuffer.cpp:
        (WebCore::CanvasBuffer::create):
        (WebCore::CanvasBuffer::CanvasBuffer):
        (WebCore::CanvasBuffer::_deleteObject):
        * html/canvas/CanvasBuffer.h:
        * html/canvas/CanvasFramebuffer.cpp:
        (WebCore::CanvasFramebuffer::create):
        (WebCore::CanvasFramebuffer::CanvasFramebuffer):
        (WebCore::CanvasFramebuffer::_deleteObject):
        * html/canvas/CanvasFramebuffer.h:
        * html/canvas/CanvasObject.cpp:
        (WebCore::CanvasObject::CanvasObject):
        (WebCore::CanvasObject::~CanvasObject):
        (WebCore::CanvasObject::deleteObject):
        * html/canvas/CanvasObject.h:
        (WebCore::CanvasObject::context):
        * html/canvas/CanvasProgram.cpp:
        (WebCore::CanvasProgram::create):
        (WebCore::CanvasProgram::CanvasProgram):
        (WebCore::CanvasProgram::_deleteObject):
        * html/canvas/CanvasProgram.h:
        * html/canvas/CanvasRenderbuffer.cpp:
        (WebCore::CanvasRenderbuffer::create):
        (WebCore::CanvasRenderbuffer::CanvasRenderbuffer):
        (WebCore::CanvasRenderbuffer::_deleteObject):
        * html/canvas/CanvasRenderbuffer.h:
        * html/canvas/CanvasRenderingContext3D.cpp:
        (WebCore::CanvasRenderingContext3D::createBuffer):
        (WebCore::CanvasRenderingContext3D::createFramebuffer):
        (WebCore::CanvasRenderingContext3D::createTexture):
        (WebCore::CanvasRenderingContext3D::createProgram):
        (WebCore::CanvasRenderingContext3D::createRenderbuffer):
        (WebCore::CanvasRenderingContext3D::createShader):
        * html/canvas/CanvasRenderingContext3D.h:
        (WebCore::CanvasRenderingContext3D::graphicsContext3D):
        * html/canvas/CanvasShader.cpp:
        (WebCore::CanvasShader::create):
        (WebCore::CanvasShader::CanvasShader):
        (WebCore::CanvasShader::_deleteObject):
        * html/canvas/CanvasShader.h:
        * html/canvas/CanvasTexture.cpp:
        (WebCore::CanvasTexture::create):
        (WebCore::CanvasTexture::CanvasTexture):
        (WebCore::CanvasTexture::_deleteObject):
        * html/canvas/CanvasTexture.h:
        * page/DOMWindow.idl:
        * page/animation/AnimationBase.cpp:
        (WebCore::AnimationBase::setNeedsStyleRecalc):
        * page/animation/AnimationController.cpp:
        (WebCore::AnimationControllerPrivate::updateAnimationTimer):
        (WebCore::AnimationControllerPrivate::updateStyleIfNeededDispatcherFired):
        (WebCore::AnimationControllerPrivate::pauseAnimationAtTime):
        (WebCore::AnimationControllerPrivate::pauseTransitionAtTime):
        (WebCore::AnimationController::cancelAnimations):
        * platform/graphics/GraphicsContext3D.h:
        (WebCore::GraphicsContext3D::platformGraphicsContext3D):
        (WebCore::GraphicsContext3D::platformTexture):
        * platform/graphics/GraphicsLayer.h:
        (WebCore::GraphicsLayer::setContentsToGraphicsContext3D):
        (WebCore::GraphicsLayer::setGraphicsContext3DNeedsDisplay):
        * platform/graphics/mac/GraphicsContext3DMac.cpp:
        (WebCore::GraphicsContext3D::~GraphicsContext3D):
        (WebCore::GraphicsContext3D::reshape):
        * platform/graphics/mac/GraphicsLayerCA.h:
        (WebCore::GraphicsLayerCA::):
        * platform/graphics/mac/GraphicsLayerCA.mm:
        (WebCore::GraphicsLayerCA::GraphicsLayerCA):
        (WebCore::GraphicsLayerCA::commitLayerChanges):
        (WebCore::GraphicsLayerCA::updateContentsGraphicsContext3D):
        (WebCore::GraphicsLayerCA::setContentsToGraphicsContext3D):
        (WebCore::GraphicsLayerCA::setGraphicsContext3DNeedsDisplay):
        * rendering/RenderHTMLCanvas.cpp:
        (WebCore::RenderHTMLCanvas::requiresLayer):
        * rendering/RenderHTMLCanvas.h:
        (WebCore::RenderHTMLCanvas::isCanvas):
        * rendering/RenderLayerBacking.cpp:
        (WebCore::RenderLayerBacking::updateGraphicsLayerConfiguration):
        (WebCore::RenderLayerBacking::canUseDirectCompositing):
        (WebCore::RenderLayerBacking::rendererContentChanged):
        * rendering/RenderLayerCompositor.cpp:
        (WebCore::RenderLayerCompositor::requiresCompositingLayer):
        (WebCore::RenderLayerCompositor::requiresCompositingForCanvas):
        * rendering/RenderLayerCompositor.h:
        * rendering/RenderObject.h:
        (WebCore::RenderObject::isCanvas):

2009-08-27  Peter Kasting  <pkasting@google.com>

        Reviewed by Eric Seidel.

        https://bugs.webkit.org/show_bug.cgi?id=28751
        Clean up ImageDecoder*.cpp a bit.

        * platform/image-decoders/ImageDecoder.cpp: Put functions in the same
          order as in the header file.  Also, since there's already an anonymous
          namespace in this file, use it to enclose the local helper functions.
        (WebCore::):
        (WebCore::ImageDecoder::upperBoundScaledX):
        (WebCore::ImageDecoder::lowerBoundScaledX):
        (WebCore::ImageDecoder::scaledY):
        * platform/image-decoders/cairo/ImageDecoderCairo.cpp:
        (WebCore::RGBA32Buffer::width): Style fix.
        (WebCore::RGBA32Buffer::height): Style fix.
        * platform/image-decoders/haiku/ImageDecoderHaiku.cpp:
        (WebCore::RGBA32Buffer::copyBitmapData): Ensure m_size is set correctly.
        (WebCore::RGBA32Buffer::asNewNativeImage): Remove unneeded temp.
        (WebCore::RGBA32Buffer::operator=): Simplify.
        * platform/image-decoders/wx/ImageDecoderWx.cpp:
        (WebCore::RGBA32Buffer::asNewNativeImage): Try and collect spaced-out temps under loop comment to show they're all related.  Use size_t for iterating over elements of a Vector.
        (WebCore::RGBA32Buffer::width): Style fix.
        (WebCore::RGBA32Buffer::height): Style fix.

2009-08-27  Peter Kasting  <pkasting@google.com>

        Reviewed by Eric Seidel.

        https://bugs.webkit.org/show_bug.cgi?id=28751
        Clean up ImageSource.* in preparation for more fixes on bug 27965.

        * platform/graphics/ImageSource.cpp: Put functions in the same order as in header file.
        (WebCore::ImageSource::isSizeAvailable): Shorten.
        (WebCore::ImageSource::size): Shorten.
        (WebCore::ImageSource::frameSizeAtIndex): Shorten.
        (WebCore::ImageSource::repetitionCount): Shorten.
        (WebCore::ImageSource::frameIsCompleteAtIndex):
        * platform/graphics/ImageSource.h: Shorten #ifdef section a bit by sharing common typedefs.

2009-08-27  Peter Kasting  <pkasting@google.com>

        Reviewed by Eric Seidel.

        https://bugs.webkit.org/show_bug.cgi?id=28785
        Add ImageDecoder.cpp to various build files so platforms will be able to
        use it.  Move an ENABLE to not cover the whole file, in preparation for
        adding a bunch of code.  Simplify #ifdefs in ImageDecoder.h to be "Skia
        vs. everyone else", which also gives new platforms a reasonable default
        behavior.

        * GNUmakefile.am:
        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCoreSources.bkl:
        * platform/image-decoders/ImageDecoder.cpp:
        (WebCore::):
        * platform/image-decoders/ImageDecoder.h:
        (WebCore::RGBA32Buffer::getAddr):

2009-08-27  Antti Koivisto  <antti@apple.com>

        Reviewed by Dave Kilzer.
        
        https://bugs.webkit.org/show_bug.cgi?id=28784
        
        Add an exported method to flush pending repaints.

        * WebCore.base.exp:
        * page/FrameView.cpp:
        (WebCore::FrameView::layoutIfNeededRecursive):
        (WebCore::FrameView::flushDeferredRepaints):
        * page/FrameView.h:

2009-08-27  Noel Gordon  <noel.gordon@gmail.com>

        Reviewed by Eric Seidel.

        [V8] Expose files from the pasteboard in drop events.
        https://bugs.webkit.org/show_bug.cgi?id=28782

        Update chromium port to expose dataTransfer.files() as per
        HTML5 drag drop (Aug 2009 edition).

        * platform/chromium/ClipboardChromium.cpp:

2009-08-27  Yury Semikhatsky  <yurys@chromium.org>

        Reviewed by Dmitry Glazkov.

        ScriptState now keeps explicit Handle of devtools front-end
        utility context instead of trying to retrieve it from inspected
        Frame.

        https://bugs.webkit.org/show_bug.cgi?id=28772

        * bindings/v8/ScriptController.cpp:
        (WebCore::ScriptController::ScriptController):
        * bindings/v8/ScriptController.h:
        * bindings/v8/ScriptObjectQuarantine.cpp:
        (WebCore::getQuarantinedScriptObject):
        * bindings/v8/ScriptScope.cpp:
        (WebCore::ScriptScope::ScriptScope):
        * bindings/v8/ScriptState.cpp:
        (WebCore::ScriptState::ScriptState):
        (WebCore::ScriptState::~ScriptState):
        (WebCore::scriptStateFromPage):
        * bindings/v8/ScriptState.h:
        (WebCore::ScriptState::context):
        * bindings/v8/ScriptValue.h:
        (WebCore::ScriptValue::~ScriptValue):
        * inspector/InspectorController.h:
        (WebCore::InspectorController::frontendScriptState):

2009-08-27  Pavel Feldman  <pfeldman@chromium.org>

        Reviewed by Timothy Hatcher.

        WebInspector: Console won't close.

        https://bugs.webkit.org/show_bug.cgi?id=28778

        * inspector/front-end/ElementsPanel.js:
        (WebInspector.ElementsPanel.prototype._updateModifiedNodes):
        * inspector/front-end/utilities.js:
        (Node.prototype.isAncestor):

2009-08-27  Eric Seidel  <eric@webkit.org>

        Reviewed by Adam Barth.

        Fix a typo in files() causing image drags to have junk file arrays.
        https://bugs.webkit.org/show_bug.cgi?id=28755

        Test: editing/pasteboard/files-during-page-drags.html

        * platform/mac/ClipboardMac.mm:
        (WebCore::ClipboardMac::files):

2009-08-27  Jeremy Orlow  <jorlow@chromium.org>

        Not reviewed.  Build fix for Chromium.

        * bindings/v8/DOMObjectsInclude.h:
        * bindings/v8/DerivedSourcesAllInOne.cpp:
        * bindings/v8/V8Index.cpp:
        * bindings/v8/V8Index.h:

2009-08-27  Alexey Proskuryakov  <ap@apple.com>

        Windows build fix.

        * DerivedSources.cpp: Added JSPageTransitionEvent.cpp to DerivedSources.cpp.

2009-08-26  Alexey Proskuryakov  <ap@apple.com>

        Reviewed by Adele Peterson.

        https://bugs.webkit.org/show_bug.cgi?id=28758
        <rdar://problem/6440869> Implement pageshow and pagehide events for b/f cache (28758)

        Tests: fast/events/pageshow-pagehide-on-back-cached.html
               fast/events/pageshow-pagehide-on-back-uncached.html
               fast/events/pageshow-pagehide.html

        * loader/FrameLoader.cpp: (WebCore::FrameLoader::stopLoading): Dispatch pagehide event
        (this function is called both when a document goes away, and when it goes to b/f cache).

        * page/DOMWindow.cpp:
        (WebCore::DOMWindow::dispatchAllPendingUnloadEvents): Dispatch pagehide right before unload.
        (WebCore::DOMWindow::dispatchPageTransitionEvent): Do what it takes to add a new event handler
        that can be installed on Window object.
        (WebCore::DOMWindow::onpagehide): Ditto.
        (WebCore::DOMWindow::setOnpagehide): Ditto.
        (WebCore::DOMWindow::onpageshow): Ditto.
        (WebCore::DOMWindow::setOnpageshow): Ditto.

        * history/CachedFrame.cpp: (WebCore::CachedFrame::restore): Dispatch pageshow for a page
        that isn't being restored from cache.

        * dom/PageTransitionEvent.cpp: Added.
        (WebCore::PageTransitionEvent::PageTransitionEvent):
        (WebCore::PageTransitionEvent::~PageTransitionEvent):
        (WebCore::PageTransitionEvent::initPageTransitionEvent):
        * dom/PageTransitionEvent.h: Added.
        (WebCore::PageTransitionEvent::create):
        (WebCore::PageTransitionEvent::isPageTransitionEvent):
        (WebCore::PageTransitionEvent::persisted):
        * dom/PageTransitionEvent.idl: Added.
        Add event class implementation.

        * html/HTMLBodyElement.cpp: (WebCore::HTMLBodyElement::parseMappedAttribute): Support
        inline listener definition (note that adding listeners to document.body programmatically
        is not supported, matching Firefox).

        * dom/Document.cpp:
        (WebCore::Document::implicitClose): Dispatch pageshow event right before load event.
        (WebCore::Document::dispatchPageTransitionEvent): Do what it takes to add a new event for
        Docuemnt.
        (WebCore::Document::createEvent): Ditto.

        * dom/Document.h: Added dispatchPageTransitionEvent.

        * DerivedSources.make:
        * GNUmakefile.am:
        * WebCore.gypi:
        * WebCore.pro:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * WebCoreSources.bkl:
        * bindings/js/JSEventCustom.cpp: (WebCore::toJS):
        * dom/Event.cpp: (WebCore::Event::isPageTransitionEvent):
        * dom/Event.h:
        * dom/EventNames.h:
        * html/HTMLAttributeNames.in:
        * page/DOMWindow.h:
        * page/DOMWindow.idl:
        Do what it takes to add a new event type.

2009-08-27  Pavel Feldman  <pfeldman@chromium.org>

        Reviewed by NOBODY (build fix).

        Adding missing file from previous commit.

        https://bugs.webkit.org/show_bug.cgi?id=28740

        * inspector/front-end/SummaryBar.js: Added.
        (WebInspector.SummaryBar):
        (WebInspector.SummaryBar.prototype.get calculator):
        (WebInspector.SummaryBar.prototype.set calculator):
        (WebInspector.SummaryBar.prototype.reset):
        (WebInspector.SummaryBar.prototype.update):
        (WebInspector.SummaryBar.prototype._drawSwatch.drawSwatchSquare):
        (WebInspector.SummaryBar.prototype._drawSwatch):
        (WebInspector.SummaryBar.prototype._drawSummaryGraph.var):
        (WebInspector.SummaryBar.prototype._drawSummaryGraph):
        (WebInspector.SummaryBar.prototype._drawSummaryGraph.drawPill):
        (WebInspector.SummaryBar.prototype._fadeOutRect):
        (WebInspector.SummaryBar.prototype._makeLegendElement):

2009-08-27  Mikhail Naganov  <mnaganov@chromium.org>

        Reviewed by Timothy Hatcher.

        Factor out Factor out summary bar from Resources panel.

        https://bugs.webkit.org/show_bug.cgi?id=28740

        * WebCore.gypi:
        * WebCore.vcproj/WebCore.vcproj:
        * inspector/front-end/ResourcesPanel.js:
        (WebInspector.ResourcesPanel.prototype.reset):
        (WebInspector.ResourcesPanel.prototype._updateSummaryGraph):
        (WebInspector.ResourcesPanel.prototype._updateDividersLabelBarPosition):
        (WebInspector.ResourcesPanel.prototype._changeSortingFunction):
        * inspector/front-end/SummaryBar.js: Added.
        (WebInspector.SummaryBar):
        (WebInspector.SummaryBar.prototype.get calculator):
        (WebInspector.SummaryBar.prototype.set calculator):
        (WebInspector.SummaryBar.prototype.reset):
        (WebInspector.SummaryBar.prototype.update):
        (WebInspector.SummaryBar.prototype._drawSwatch.drawSwatchSquare):
        (WebInspector.SummaryBar.prototype._drawSwatch):
        (WebInspector.SummaryBar.prototype._drawSummaryGraph.var):
        (WebInspector.SummaryBar.prototype._drawSummaryGraph):
        (WebInspector.SummaryBar.prototype._drawSummaryGraph.drawPill):
        (WebInspector.SummaryBar.prototype._fadeOutRect):
        (WebInspector.SummaryBar.prototype._makeLegendElement):
        * inspector/front-end/WebKit.qrc:
        * inspector/front-end/inspector.css:
        * inspector/front-end/inspector.html:

2009-08-26  Mikhail Naganov  <mnaganov@chromium.org>

        Reviewed by Timothy Hatcher.

        Start adding heap profiler to Inspector (hidden behind a flag.)

        https://bugs.webkit.org/show_bug.cgi?id=28429

        * English.lproj/localizedStrings.js:
        * inspector/front-end/ProfilesPanel.js:
        (WebInspector.ProfilesPanel):
        (WebInspector.ProfilesPanel.prototype.get statusBarItems):
        (WebInspector.ProfilesPanel.prototype.reset):
        (WebInspector.ProfilesPanel.prototype.addProfile):
        (WebInspector.ProfilesPanel.prototype._updateInterface):
        (WebInspector.ProfilesPanel.prototype._snapshotClicked):
        * inspector/front-end/inspector.css:
        * inspector/front-end/inspector.js: added Preferences.heapProfilerPresent flag.

2009-08-27  Pavel Feldman  <pfeldman@chromium.org>

        Reviewed by Timothy Hatcher.

        WebInspector: Metrics sidebar editing is broken.

        https://bugs.webkit.org/show_bug.cgi?id=28434

        * inspector/front-end/MetricsSidebarPane.js:
        (WebInspector.MetricsSidebarPane.prototype.update):

2009-08-27  Darin Fisher  <darin@chromium.org>

        Reviewed by Dimitri Glazkov.

        https://bugs.webkit.org/show_bug.cgi?id=28767

        Make KURLGoogle.cpp's decodeURLEscapeSequences decode %00 to match
        KURL.cpp.  This makes the XSSAuditor tests pass when using KURLGoogle.

        * platform/KURLGoogle.cpp:
        (WebCore::decodeURLEscapeSequences):

2009-08-27  Ariya Hidayat  <ariya.hidayat@nokia.com>

        Reviewed by Tor Arne Vestbø.

        [Qt] Build fix, missing functions after r47763.

        * platform/qt/Localizations.cpp:
        (WebCore::localizedMediaControlElementString):
        (WebCore::localizedMediaControlElementHelpText):
        (WebCore::localizedMediaTimeDescription):

2009-08-26  Dumitru Daniliuc  <dumi@chromium.org>

        Reviewed by Adam Barth.

        Removing trailing whitespaces from all storage classes.

        https://bugs.webkit.org/show_bug.cgi?id=28075

        * storage/ChangeVersionWrapper.cpp:
        * storage/Database.cpp:
        * storage/Database.h:
        * storage/DatabaseDetails.h:
        * storage/DatabaseThread.cpp:
        * storage/DatabaseTracker.cpp:
        * storage/DatabaseTracker.h:
        * storage/LocalStorageTask.cpp:
        * storage/LocalStorageTask.h:
        * storage/LocalStorageThread.cpp:
        * storage/LocalStorageThread.h:
        * storage/OriginQuotaManager.cpp:
        * storage/OriginUsageRecord.cpp:
        * storage/OriginUsageRecord.h:
        * storage/SQLError.h:
        * storage/SQLResultSetRowList.h:
        * storage/SQLStatement.cpp:
        * storage/SQLStatement.h:
        * storage/SQLStatementCallback.h:
        * storage/SQLStatementErrorCallback.h:
        * storage/SQLTransaction.cpp:
        * storage/SQLTransaction.h:
        * storage/SQLTransactionCallback.h:
        * storage/SQLTransactionErrorCallback.h:
        * storage/Storage.cpp:
        * storage/Storage.h:
        * storage/StorageArea.h:
        * storage/StorageAreaImpl.cpp:
        * storage/StorageAreaImpl.h:
        * storage/StorageAreaSync.cpp:
        * storage/StorageAreaSync.h:
        * storage/StorageEvent.cpp:
        * storage/StorageEvent.h:
        * storage/StorageMap.cpp:
        * storage/StorageMap.h:
        * storage/StorageNamespaceImpl.cpp:
        * storage/StorageSyncManager.cpp:
        * storage/StorageSyncManager.h:

2009-08-26  Dave Hyatt  <hyatt@apple.com>

        Reviewed by Anders Carlsson.

        https://bugs.webkit.org/show_bug.cgi?id=28763, flickering when opacity changes.

        Make opacity changes from < 1 to 1 and from 1 to < 1 cause a relayout to happen.  We need
        to do this in order for overflow information to be properly recomputed.

        * rendering/style/RenderStyle.cpp:
        (WebCore::RenderStyle::diff):

2009-08-26  Eric Carlson  <eric.carlson@apple.com>

        Reviewed by Simon Fraser.

        HTMLMediaElement sometimes loses events
        https://bugs.webkit.org/show_bug.cgi?id=28762
        <rdar://problem/7172437>

        A media element triggers the resource selection algorithm if 
        play() is called when the networkState attribute is NETWORK_EMPTY, but
        it also immediately queues 'play' and either 'waiting' or 'playing' events.
        One of the steps in preparing to load is to flush pending events, so those 
        events were lost if the load timer fired quickly enough. Fixed by deleting
        pending events before scheduling the load timer.

        Test: media/audio-play-event.html

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::scheduleLoad):
            Do nothing if the load timer is already scheduled. Call prepareForLoad so queue of 
            pending events is flushed immediately.
        (WebCore::HTMLMediaElement::scheduleNextSourceChild):
            New, start the load timer without flushing pending events.
        (WebCore::HTMLMediaElement::load):
            Call prepareForLoad();
        (WebCore::HTMLMediaElement::prepareForLoad):
            New, load setup code moved from loadInternal.
        (WebCore::HTMLMediaElement::loadInternal):
            Moved some setup code to prepareForLoad so it can be invoked immediately before
            arming the load timer.
        (WebCore::HTMLMediaElement::setNetworkState):
            Call scheduleNextSourceChild instead of scheduleLoad as the later now clears
            pending events.
        * html/HTMLMediaElement.h:
            Declare scheduleNextSourceChild.

2009-08-26  Peter Kasting  <pkasting@google.com>

        Reviewed by Eric Seidel.

        https://bugs.webkit.org/show_bug.cgi?id=28751
        Switch ICO decoder from a Vector of raw pointers to a Vector of
        OwnPtrs now that that is possible.  Makes code slightly simpler.

        * platform/image-decoders/ico/ICOImageDecoder.cpp:
        (WebCore::ICOImageDecoder::decodeAtIndex):
        (WebCore::ICOImageDecoder::processDirectory):
        * platform/image-decoders/ico/ICOImageDecoder.h:

2009-08-26  Dave Hyatt  <hyatt@apple.com>

        Reviewed by Dan Bernstein.

        https://bugs.webkit.org/show_bug.cgi?id=28718, image inside relpositioned inline doesn't paint.
        Make sure vertical overflow is still computed across self-painting layers, even though it isn't
        propagated to parents.

        Added fast/repaint/rel-positioned-inline-with-overflow.html

        * rendering/InlineFlowBox.cpp:
        (WebCore::InlineFlowBox::computeVerticalOverflow):

2009-08-26  David Levin  <levin@chromium.org>

        Reviewed by Darin Fisher.

        ResourceRequestBase::*[Aa]llowHTTPCookies shouldn't mention http.
        https://bugs.webkit.org/show_bug.cgi?id=28735

        Renaming the method to imply its wider implications of affecting cookies
        over any protocol that supports them.

        No change in functionality so no new tests.

        * WebCore.order:
        * loader/DocumentThreadableLoader.cpp:
        (WebCore::DocumentThreadableLoader::DocumentThreadableLoader):
        (WebCore::DocumentThreadableLoader::makeSimpleCrossOriginAccessRequest):
        (WebCore::DocumentThreadableLoader::makeCrossOriginAccessRequestWithPreflight):
        * platform/network/ResourceRequestBase.cpp:
        (WebCore::ResourceRequestBase::adopt):
        (WebCore::ResourceRequestBase::copyData):
        (WebCore::ResourceRequestBase::allowCookies):
        (WebCore::ResourceRequestBase::setAllowCookies):
        (WebCore::equalIgnoringHeaderFields):
        * platform/network/ResourceRequestBase.h:
        (WebCore::ResourceRequestBase::ResourceRequestBase):
        * platform/network/cf/ResourceRequestCFNet.cpp:
        (WebCore::ResourceRequest::doUpdatePlatformRequest):
        (WebCore::ResourceRequest::doUpdateResourceRequest):
        * platform/network/mac/ResourceRequestMac.mm:
        (WebCore::ResourceRequest::doUpdateResourceRequest):
        (WebCore::ResourceRequest::doUpdatePlatformRequest):
        * platform/network/soup/ResourceRequestSoup.cpp:
        (WebCore::ResourceRequest::updateFromSoupMessage):

2009-08-26  Dan Bernstein  <mitz@apple.com>

        Reviewed by Dave Hyatt.

        Made RenderInline::clippedOverflowRectForRepaint() actually include
        overflow.

        Test: fast/repaint/inline-overflow.html

        * rendering/RenderInline.cpp:
        (WebCore::RenderInline::linesVisibleOverflowBoundingBox): Added. Returns
            the bounding box of all lines’ visible overflow boxes (under the
            assumption that the first and last lines determine the top and
            bottom, respectively).
        (WebCore::RenderInline::clippedOverflowRectForRepaint): Changed to use
            linesVisibleOverflowBoundingBox() instead of linesBoundingBox().
        * rendering/RenderInline.h:

2009-08-26  John Gregg  <johnnyg@google.com>

        Reviewed by David Levin.

        minor style correction and include fix for notifications
        https://bugs.webkit.org/show_bug.cgi?id=28745

        No change in behavior, so no tests.

        * bindings/js/JSDesktopNotificationsCustom.cpp: add include of Error.h
        * notifications/Notification.cpp: change enum style to InterCaps
        (WebCore::Notification::Notification):
        * notifications/NotificationPresenter.h:
        (WebCore::NotificationPresenter::):

2009-08-25  Drew Wilson  <atwilson@google.com>

        Reviewed by David Levin.

        postMessage() spec now supports sending arrays of ports
        https://bugs.webkit.org/show_bug.cgi?id=26902

        Added support for sending multiple ports at once via postMessage(). JS bindings will be updated in an upcoming patch.

        No new tests, since the new functionality is not exposed via new JS bindings yet, so the old tests suffice.

        * WebCore.xcodeproj/project.pbxproj:
        Mark MessagePort.h and MessagePortChannel.h as private since they are used by WebKit now.
        * dom/MessageEvent.cpp:
        Updated APIs to support passing MessagePortArrays.
        (WebCore::MessageEvent::MessageEvent):
        (WebCore::MessageEvent::initMessageEvent):
        (WebCore::MessageEvent::messagePort):
        * dom/MessageEvent.h:
        (WebCore::MessageEvent::create):
        Now accepts a MessagePortArray parameter instead of a single MessagePort.
        (WebCore::MessageEvent::ports):
        * dom/MessagePort.cpp:
        (WebCore::MessagePort::postMessage):
        (WebCore::MessagePort::dispatchMessages):
        (WebCore::MessagePort::disentanglePorts):
        Added new static function to extract a MessagePortChannelArray from a MessagePortArray.
        (WebCore::MessagePort::entanglePorts):
        Added new static function to generate a MessagePortArray (entangled ports) from a MessagePortChannelArray.
        * dom/MessagePort.h:
        * dom/MessagePortChannel.cpp:
        EventData now contains a MessagePortChannelArray field instead of a single MessagePortChannel.
        (WebCore::MessagePortChannel::EventData::create):
        (WebCore::MessagePortChannel::EventData::EventData):
        * dom/MessagePortChannel.h:
        (WebCore::MessagePortChannel::EventData::channels):
        * page/DOMWindow.cpp:
        (WebCore::PostMessageTimer::PostMessageTimer):
        (WebCore::PostMessageTimer::event):
        (WebCore::DOMWindow::postMessage):
        Now accepts a MessagePortArray parameter instead of a single MessagePort.
        * page/DOMWindow.h:
        * workers/DedicatedWorkerContext.cpp:
        (WebCore::DedicatedWorkerContext::postMessage):
        Now accepts a MessagePortArray parameter instead of a single MessagePort.
        (WebCore::DedicatedWorkerContext::dispatchMessage):
        * workers/DedicatedWorkerContext.h:
        * workers/Worker.cpp:
        (WebCore::Worker::postMessage):
        Now accepts a MessagePortArray parameter instead of a single MessagePort.
        (WebCore::Worker::dispatchMessage):
        * workers/Worker.h:
        * workers/WorkerContextProxy.h:
        * workers/WorkerMessagingProxy.cpp:
        Updated WorkerObjectProxy and WorkerContextProxy API implementations to support sending multiple MessagePorts.
        (WebCore::MessageWorkerContextTask::create):
        (WebCore::MessageWorkerContextTask::MessageWorkerContextTask):
        (WebCore::MessageWorkerContextTask::performTask):
        (WebCore::MessageWorkerTask::create):
        (WebCore::MessageWorkerTask::MessageWorkerTask):
        (WebCore::MessageWorkerTask::performTask):
        (WebCore::WorkerMessagingProxy::postMessageToWorkerObject):
        (WebCore::WorkerMessagingProxy::postMessageToWorkerContext):
        * workers/WorkerMessagingProxy.h:
        * workers/WorkerObjectProxy.h:
        Updated WorkerObjectProxy and WorkerContextProxy APIs to support sending multiple MessagePorts.

2009-08-26  Fumitoshi Ukai  <ukai@chromium.org>

        Reviewed by Alexey Proskuryakov.

        SocketStreamHandle interface for WebSocket API
        https://bugs.webkit.org/show_bug.cgi?id=28037

        Add build systems only for GNUmakefile.am and WebCore.xcodeproj.now.
        Other build systems will be updated once the code is functional.
        Tests will be landed once this code is complete and functional.

        * GNUmakefile.am:
        * WebCore.xcodeproj/project.pbxproj:
        * platform/network/SocketStreamErrorBase.cpp: Added.
        * platform/network/SocketStreamErrorBase.h: Added.
        * platform/network/SocketStreamHandleBase.cpp: Added.
        * platform/network/SocketStreamHandleBase.h: Added.
        * platform/network/SocketStreamHandleClient.h: Added.
        * platform/network/cf/SocketStreamError.h: Added.
        * platform/network/cf/SocketStreamHandle.h: Added.
        * platform/network/cf/SocketStreamHandleCFNet.cpp: Added.
        * platform/network/soup/SocketStreamError.h: Added.
        * platform/network/soup/SocketStreamHandle.h: Added.
        * platform/network/soup/SocketStreamHandleSoup.cpp: Added.

2009-08-26  Mads Ager  <ager@chromium.org>

        Reviewed by Dimitri Glazkov.

        [V8] setTimeout does not convert non-string argument to string
        https://bugs.webkit.org/show_bug.cgi?id=28739

        Convert non-string argument to setTimeout to string in the V8
        bindings.

        * bindings/v8/custom/V8DOMWindowCustom.cpp:
        (WebCore::V8Custom::WindowSetTimeoutImpl):

2009-08-25  Oliver Hunt  <oliver@apple.com>

        Reviewed by Gavin Barraclough.

        [ES5] Implement getOwnPropertyDescriptor
        https://bugs.webkit.org/show_bug.cgi?id=28724

        Implement the WebCore side of getOwnPropertyDescriptor.  This
        requires a custom implementation of getOwnPropertyDescriptor
        for every class with a custom implementation of getOwnPropertySlot.

        The bindings generator has been updated to generate appropriate
        versions of getOwnPropertyDescriptor for the general case where
        a custom getOwnPropertyDescriptor is not needed.  ES5 is vague
        about how getOwnPropertyDescriptor should work in the context of
        "host" functions with polymorphic [[GetOwnProperty]], so it seems
        okay that occasionally we "guess" what attributes -- eg. determining
        whether a property is writable.

        Test: fast/js/getOwnPropertyDescriptor.html

        * bindings/js/JSDOMWindowCustom.cpp:
        (WebCore::JSDOMWindow::getOwnPropertyDescriptor):
        * bindings/js/JSDOMWindowShell.cpp:
        (WebCore::JSDOMWindowShell::getOwnPropertyDescriptor):
        * bindings/js/JSDOMWindowShell.h:
        * bindings/js/JSHTMLAppletElementCustom.cpp:
        (WebCore::JSHTMLAppletElement::getOwnPropertyDescriptorDelegate):
        * bindings/js/JSHTMLEmbedElementCustom.cpp:
        (WebCore::JSHTMLEmbedElement::getOwnPropertyDescriptorDelegate):
        * bindings/js/JSHTMLObjectElementCustom.cpp:
        (WebCore::JSHTMLObjectElement::getOwnPropertyDescriptorDelegate):
        * bindings/js/JSHistoryCustom.cpp:
        (WebCore::JSHistory::getOwnPropertyDescriptorDelegate):
        * bindings/js/JSLocationCustom.cpp:
        (WebCore::JSLocation::getOwnPropertyDescriptorDelegate):
        * bindings/js/JSNamedNodesCollection.cpp:
        (WebCore::JSNamedNodesCollection::getOwnPropertyDescriptor):
        * bindings/js/JSNamedNodesCollection.h:
        * bindings/js/JSPluginElementFunctions.cpp:
        (WebCore::runtimeObjectCustomGetOwnPropertyDescriptor):
        * bindings/js/JSPluginElementFunctions.h:
        * bindings/js/JSQuarantinedObjectWrapper.cpp:
        (WebCore::JSQuarantinedObjectWrapper::getOwnPropertyDescriptor):
        * bindings/js/JSQuarantinedObjectWrapper.h:
        * bindings/js/JSWorkerContextCustom.cpp:
        (WebCore::JSWorkerContext::getOwnPropertyDescriptorDelegate):
        * bindings/scripts/CodeGeneratorJS.pm:
        * bridge/objc/objc_runtime.h:
        * bridge/objc/objc_runtime.mm:
        (JSC::Bindings::ObjcFallbackObjectImp::getOwnPropertyDescriptor):
        * bridge/runtime.h:
        (JSC::Bindings::Instance::getOwnPropertyDescriptor):
        * bridge/runtime_array.cpp:
        (JSC::RuntimeArray::getOwnPropertyDescriptor):
        * bridge/runtime_array.h:
        * bridge/runtime_method.cpp:
        (JSC::RuntimeMethod::getOwnPropertyDescriptor):
        * bridge/runtime_method.h:
        * bridge/runtime_object.cpp:
        (JSC::RuntimeObjectImp::getOwnPropertyDescriptor):
        * bridge/runtime_object.h:

2009-08-26  Vincent Untz <vuntz@gnome.org>

        Reviewed by Xan Lopez.

        GObject checks for NULL (and not 0) in g_object_get, so use that
        as we were already doing elsewhere to make the compiler happy.

        * platform/graphics/gtk/MediaPlayerPrivateGStreamer.cpp:
        (WebCore::MediaPlayerPrivate::hasAudio):

2009-08-26  Alpha Lam  <hclam@chromium.org>

        Reviewed by David Levin.

        RenderThemeMac.mm has incorrect casting for media control element.
        https://bugs.webkit.org/show_bug.cgi?id=28730

        MediaControlMuteButtonElement was incorrectly casted to
        MediaControlPlayButtonElement. This is corrected in this patch.

        No new tests because this is code cleanup and is already covered by existing
        media layout tests.

        * rendering/RenderThemeMac.mm:
        (WebCore::RenderThemeMac::paintMediaMuteButton):

2009-08-26  Robert Sesek  <rsesek@chromium.org>

        Reviewed by Eric Seidel.

        [Chromium] Multi-value select boxes cannot do non-contiguous selection on Mac
        https://bugs.webkit.org/show_bug.cgi?id=28670

        Change the condition regarding the key modifier check for non-contiguous
        selection on a multi-value list from just PLATFORM(MAC) to
        PLATFORM(MAC) || (PLATFORM(CHROMIUM) && PLATFORM(DARWIN)).

        No new tests. This patch only changes the condition on which a certain mouse
        event modifier key is used.

        * dom/SelectElement.cpp:
        (WebCore::SelectElement::listBoxDefaultEventHandler):

2009-08-25  Eric Carlson  <eric.carlson@apple.com>

        Reviewed by Dan Bernstein

        r47744 causes media/video-controls-with-mutation-event-handler.html to crash
        https://bugs.webkit.org/show_bug.cgi?id=28732

        * rendering/MediaControlElements.cpp:
        (WebCore::MediaControlVolumeSliderElement::MediaControlVolumeSliderElement):
            Don't call setAttribute from the construtor, any registered mutation event 
            listener will cause a crash.

        * rendering/RenderMedia.cpp:
        (WebCore::RenderMedia::createVolumeSlider):
            Set the maxAttr here instead of in the constructor.

2009-08-25  Dmitry Titov  <dimich@chromium.org>

        Reviewed by Brady Eidson.

        Timers from cached pages fire instantly rather than the after the specified timeout delay
        https://bugs.webkit.org/show_bug.cgi?id=28683

        Test: fast/dom/Window/timer-resume-on-navigation-back.html

        * history/CachedPage.cpp:
        (WebCore::CachedPage::restore): Remove duplicated Frame::restore() call, since
            it should be done only once in FrameLoader::open(cachedFrame)
        * page/DOMTimer.cpp: Added a debug-only flag and ASSERT to catch out-of-order suspense/restore.
        (WebCore::DOMTimer::DOMTimer): Ditto.
        (WebCore::DOMTimer::suspend): Ditto.
        (WebCore::DOMTimer::resume): Ditto.
        * page/DOMTimer.h: Ditto.

2009-08-25  Eric Carlson  <eric.carlson@apple.com>

        Reviewed by Simon Fraser.

        Setting the volume of a media element has no effect if called too early
        https://bugs.webkit.org/show_bug.cgi?id=28731

        * manual-tests/audio-volume.html: 
            Added.

        * platform/graphics/mac/MediaPlayerPrivateQTKit.mm:
        (WebCore::MediaPlayerPrivate::setVolume):
        (WebCore::MediaPlayerPrivate::setRate):
            Don't bail if metadata hasn't been loaded, it is fine to set rate and/or
            volume as soon as the movie has been created.

2009-08-25  David Levin  <levin@chromium.org>

        Reviewed by Maciej Stachowiak.

        DocumentThreadableLoader::getShouldUseCredentialStorage should allow for synchronous callbacks from SubresourceLoader::create.
        https://bugs.webkit.org/show_bug.cgi?id=28728

        Test: This code path is exercised while running xhr layout tests in chromium.

        * loader/DocumentThreadableLoader.cpp:
        (WebCore::DocumentThreadableLoader::getShouldUseCredentialStorage): When called
        back synchronously, the loader is 0, so the assert is changed to allow for that.
        (WebCore::DocumentThreadableLoader::loadRequest): Synchronous callbacks may be
        done before SubresourceLoader::create finishes, so ensure that any previous loader
        -- from a preflight request -- is cleared before calling SubresourceLoader::create.

2009-08-25  Mark Rowe  <mrowe@apple.com>

        Stop installing IDL files in to the framework.

        * WebCore.xcodeproj/project.pbxproj:

2009-08-25  Kent Tamura  <tkent@chromium.org>

        Reviewed by Eric Seidel.

        Support for HTMLInputElement::list and HTMLInputElement::selectedOption.
        https://bugs.webkit.org/show_bug.cgi?id=27756

        Tests: fast/forms/input-list.html
               fast/forms/input-selectedoption.html

        * html/HTMLAttributeNames.in:
        * html/HTMLInputElement.cpp:
        (WebCore::HTMLInputElement::parseMappedAttribute):
        (WebCore::HTMLInputElement::list):
        (WebCore::HTMLInputElement::selectedOption):
        * html/HTMLInputElement.h:
        * html/HTMLInputElement.idl:

2009-08-25  Eric Carlson  <eric.carlson@apple.com>

        Reviewed by Oliver Hunt.

        <video> and <audio> controller should be accessible (edit)
        https://bugs.webkit.org/show_bug.cgi?id=28081

        Test: accessibility/media-element.html

        * GNUmakefile.am:
        * WebCore.gypi:
        * WebCore.pro:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * WebCoreSources.bkl:
            Add AccessibilityMediaControls.cpp/.h

        * accessibility/AXObjectCache.cpp:
        * accessibility/AXObjectCache.h:
        (WebCore::AXObjectCache::getOrCreate):
            Create AccessibilityMediaControl. Update Copyright

        * accessibility/AccessibilityMediaControls.cpp:
        * accessibility/AccessibilityMediaControls.h:
            Added.

        * accessibility/AccessibilityObject.cpp:
        * accessibility/AccessibilityObject.h:
            Add isMediaTimeline. Update Copyright.

        * accessibility/AccessibilitySlider.h:
            Make constructor protected instead of private so AccessibilityMediaTimeline can
            call it.

        * accessibility/mac/AccessibilityObjectWrapper.mm:
        (-[AccessibilityObjectWrapper accessibilityAttributeNames]):
            Add NSAccessibilityValueDescriptionAttribute to range attributes. 
        (-[AccessibilityObjectWrapper subrole]):
            Return NSAccessibilityTimelineSubrole for AccessibilityMediaTimeline.

        * dom/Node.h:
            add isMediaControlElement.

        * page/mac/WebCoreViewFactory.h:
        * platform/LocalizedStrings.h:
        * platform/mac/LocalizedStringsMac.mm:
        (WebCore::localizedMediaControlElementString): 
        (WebCore::localizedMediaControlElementHelpText):
        (WebCore::localizedMediaTimeDescription): 
            New, return localized media controller strings.

        * platform/gtk/LocalizedStringsGtk.cpp:
        (WebCore::mediaElementLoadingStateText):
        (WebCore::mediaElementLiveBroadcastStateText):
            Move inside of "#if ENABLE(VIDEO)"
        (WebCore::localizedMediaControlElementString):
        (WebCore::localizedMediaControlElementHelpText):
        (WebCore::localizedMediaTimeDescription):

        * rendering/MediaControlElements.cpp:
        (WebCore::MediaControlElement::MediaControlElement):
            Initialize m_displayType.
        (WebCore::MediaControlElement::MediaControlElement):
        (WebCore::MediaControlStatusDisplayElement::MediaControlStatusDisplayElement):
            Fix style.
        (WebCore::MediaControlInputElement::MediaControlInputElement):
            Set m_displayType based on pseudo style ID.
        (WebCore::MediaControlInputElement::MediaControlInputElement):
            rename local "o" to "object".
        (WebCore::MediaControlMuteButtonElement::MediaControlMuteButtonElement):
        (WebCore::MediaControlPlayButtonElement::MediaControlPlayButtonElement):
        (WebCore::MediaControlSeekButtonElement::MediaControlSeekButtonElement):
        (WebCore::MediaControlRewindButtonElement::MediaControlRewindButtonElement):
        (WebCore::MediaControlReturnToRealtimeButtonElement::MediaControlReturnToRealtimeButtonElement):
        (WebCore::MediaControlTimelineElement::MediaControlTimelineElement):
        (WebCore::MediaControlFullscreenButtonElement::MediaControlFullscreenButtonElement):
        (WebCore::MediaControlTimelineElement::MediaControlTimelineElement):
        (WebCore::MediaControlTimelineElement::MediaControlTimelineElement):
        (WebCore::MediaControlTimelineElement::MediaControlTimelineElement):
            Update for MediaControlInputElement constructor change.
        (WebCore::MediaControlTimeDisplayElement::formatTime):
            New, moved here from RenderMedia so AccessibilityMediaTimeDisplay can use it.
        (WebCore::MediaControlTimeDisplayElement::setCurrentValue):
            New, set text to current time.
        * rendering/MediaControlElements.h:

        * rendering/RenderMedia.cpp:
        (WebCore::RenderMedia::updateControls):
            Create controls in tab order.
        (WebCore::RenderMedia::formatTime):
            Moved to MediaControlTimeDisplayElement::formatTime.
        (WebCore::RenderMedia::updateTimeDisplay):
            Call MediaControlTimeDisplayElement::setCurrentValue.
        * rendering/RenderMedia.h:

2009-08-25  Jian Li  <jianli@chromium.org>

        Reviewed by David Levin.

        [V8] Fix Canvas layout test failures in Chromium build.
        https://bugs.webkit.org/show_bug.cgi?id=28720

        The previous fix r47757 does not handle the V8 object conversion correctly.

        * bindings/v8/custom/V8DocumentCustom.cpp:
        (WebCore::CALLBACK_FUNC_DECL):
        * bindings/v8/custom/V8HTMLCanvasElementCustom.cpp:
        (WebCore::CALLBACK_FUNC_DECL):

2009-08-25  Jian Li  <jianli@chromium.org>

        Reviewed by David Levin.

        [V8] Fix compiling errors in Chromium build caused by Canvas3D changes from r47752.
        https://bugs.webkit.org/show_bug.cgi?id=28717

        * bindings/v8/DOMObjectsInclude.h:
        * bindings/v8/DerivedSourcesAllInOne.cpp:
        * bindings/v8/V8Index.cpp:
        * bindings/v8/V8Index.h:
        * bindings/v8/custom/V8DocumentCustom.cpp:
        (WebCore::CALLBACK_FUNC_DECL):
        * bindings/v8/custom/V8HTMLCanvasElementCustom.cpp:
        (WebCore::CALLBACK_FUNC_DECL):

2009-08-25  Alpha Lam  <hclam@chromium.org>

        Reviewed by David Levin.

        [chromium] Implement media volume slider for chromium
        https://bugs.webkit.org/show_bug.cgi?id=28715

        Provided the implementation of the volume slider and its container for
        chromium port. With this change there will be a usable volume control
        slider for chromium theme.

        No new tests since this is covered by existing media layout tests.

        * css/mediaControlsChromium.css: CSS style for the volume slider.
        * rendering/RenderThemeChromiumSkia.cpp:
        (WebCore::mediaSliderThumbImage): Returns the image for slider thumb.
        (WebCore::mediaVolumeSliderThumbImage): Returns the image for volume slider thumb.
        (WebCore::RenderThemeChromiumSkia::paintMediaVolumeSliderTrack): Paints the track with one vertical white line.
        (WebCore::RenderThemeChromiumSkia::adjustSliderThumbSize): Adjusts thumb sizes according to the images.
        (WebCore::RenderThemeChromiumSkia::paintMediaSliderThumb): Paints slider thumb image.
        (WebCore::RenderThemeChromiumSkia::paintMediaVolumeSliderThumb): Paints volume slider thumb image.

2009-08-25  Chris Marrin  <cmarrin@apple.com>

        Reviewed by Simon Fraser.

        Missed checking in 2 Canvas3D files
        https://bugs.webkit.org/show_bug.cgi?id=28018

        * bindings/js/JSCanvasRenderingContextCustom.cpp: Implements toJS to do proper subclass binding
        * bindings/js/JSCanvasRenderingContext3DCustom.cpp: Argument marshaling for 3D calls

2009-08-25  Mads Ager  <ager@chromium.org>

        Reviewed by Adam Barth.

        [V8] Exception from JavaScript propagates to main script
        https://bugs.webkit.org/show_bug.cgi?id=26433

        Make sure that exceptions thrown both at compile time and at
        runtime in javascript URLs are isolated from the main script.

        Test: fast/dom/javascript-url-exception-isolation.html

        * bindings/v8/V8Proxy.cpp:
        (WebCore::V8Proxy::evaluate):

2009-08-25  Chris Marrin  <cmarrin@apple.com>

        Reviewed by Simon Fraser.

        Added all new Canvas3D files to the build
        https://bugs.webkit.org/show_bug.cgi?id=28018

        This also hooks up CanvasRenderingContext as the common base class for
        CanvasRenderingContext2D and CanvasRenderingContext3D. And it adds a bit
        of logic throughout to support the new CanvasRenderingContext3D object.
        But nothing is hooked up yet.

        * DerivedSources.make:
        * WebCore.pro:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore/GNUmakefile.am:
        * WebCore/WebCore.gypi:
        * WebCore/WebCoreSources.bkl:
        * WebCore.xcodeproj/project.pbxproj:
        * bindings/js/JSCanvasRenderingContext2DCustom.cpp:
        (WebCore::JSCanvasRenderingContext2D::strokeStyle):
        (WebCore::JSCanvasRenderingContext2D::setStrokeStyle):
        (WebCore::JSCanvasRenderingContext2D::fillStyle):
        (WebCore::JSCanvasRenderingContext2D::setFillStyle):
        (WebCore::JSCanvasRenderingContext2D::setFillColor):
        (WebCore::JSCanvasRenderingContext2D::setStrokeColor):
        (WebCore::JSCanvasRenderingContext2D::strokeRect):
        (WebCore::JSCanvasRenderingContext2D::drawImage):
        (WebCore::JSCanvasRenderingContext2D::drawImageFromRect):
        (WebCore::JSCanvasRenderingContext2D::setShadow):
        (WebCore::JSCanvasRenderingContext2D::createPattern):
        (WebCore::JSCanvasRenderingContext2D::putImageData):
        (WebCore::JSCanvasRenderingContext2D::fillText):
        (WebCore::JSCanvasRenderingContext2D::strokeText):
        * bindings/js/JSDOMBinding.cpp:
        (WebCore::isObservableThroughDOM):
        * bindings/js/JSDocumentCustom.cpp:
        * bindings/js/JSHTMLCanvasElementCustom.cpp:
        (WebCore::JSHTMLCanvasElement::markChildren):
        * dom/Document.cpp:
        (WebCore::Document::getCSSCanvasContext):
        * dom/Document.h:
        * html/HTMLCanvasElement.cpp:
        (WebCore::HTMLCanvasElement::getContext):
        (WebCore::HTMLCanvasElement::willDraw):
        (WebCore::HTMLCanvasElement::reset):
        (WebCore::HTMLCanvasElement::paint):
        (WebCore::HTMLCanvasElement::is3D):
        (WebCore::HTMLCanvasElement::context3D):
        (WebCore::HTMLCanvasElement::texture3D):
        * html/HTMLCanvasElement.h:
        (WebCore::HTMLCanvasElement::renderingContext):
        * html/canvas/CanvasObject.cpp:
        (WebCore::CanvasObject::~CanvasObject):
        * html/canvas/CanvasRenderingContext.idl:
        * html/canvas/CanvasRenderingContext2D.cpp:
        (WebCore::CanvasRenderingContext2D::CanvasRenderingContext2D):
        (WebCore::CanvasRenderingContext2D::~CanvasRenderingContext2D):
        * html/canvas/CanvasRenderingContext2D.h:
        (WebCore::CanvasRenderingContext2D::is2d):
        * html/canvas/CanvasRenderingContext2D.idl:
        * html/canvas/CanvasRenderingContext3D.cpp:
        * html/canvas/CanvasRenderingContext3D.idl:

2009-08-25  Dan Bernstein  <mitz@apple.com>

        Reviewed by Anders Carlsson.

        REGRESSION (r47630): fast/repaint/background-generated.html is failing
        https://bugs.webkit.org/show_bug.cgi?id=28704

        * rendering/RenderBoxModelObject.cpp:
        (WebCore::RenderBoxModelObject::calculateFillTileSize): Handle SizeNone.
        * rendering/style/FillLayer.cpp:
        (WebCore::FillLayer::FillLayer): Initialize the size type to SizeNone.
        * rendering/style/FillLayer.h:
        (WebCore::FillSize::FillSize): Changed assignment to initialization and
            removed redundant assignment to size.

2009-08-25  Yusuke Sato  <yusukes@chromium.org>

        Reviewed by Darin Fisher.

        [Chromium] Complex text doesn't show up with text stroking
        https://bugs.webkit.org/show_bug.cgi?id=28707

        Skip the NULL check of m_hdc if Windows GDI is not in use.

        * platform/graphics/chromium/FontChromiumWin.cpp:
        (WebCore::Font::drawComplexText):

2009-08-25  Alpha Lam  <hclam@chromium.org>

        Reviewed by David Levin.

        Media controls panel does not have a volume control slider
        https://bugs.webkit.org/show_bug.cgi?id=28241

        Introduced "-webkit-media-controls-volume-slider",
        "-webkit-media-controls-volume-slider-container" and the supporting
        implementation. Also added appearances of "media-volume-slider" and
        "media-volume-slider-container".

        The implementation of the controls are in WebCore::MediaControlElements.
        Logic to trigger the display of the volume controls are in WebCore::RenderMedia.

        No new tests since this change doesn't have theme implementation and the
        volume slider is disabled by default.

        * accessibility/AccessibilitySlider.cpp:
        (WebCore::AccessibilitySlider::orientation): Marks that volume slider is vertical.
        * css/CSSPrimitiveValueMappings.h:
        (WebCore::CSSPrimitiveValue::CSSPrimitiveValue): Added corresponding CSS values.
        * css/CSSSelector.cpp:
        (WebCore::CSSSelector::extractPseudoType): ditto.
        * css/CSSSelector.h:
        (WebCore::CSSSelector::): ditto.
        * css/CSSStyleSelector.cpp:
        (WebCore::CSSStyleSelector::SelectorChecker::checkOneSelector): ditto.
        * css/CSSValueKeywords.in: ditto.
        * css/mediaControls.css: Makes the volume slider disabled by default.
        * platform/ThemeTypes.h: Defines theme parts for volume slider and its container.
        (WebCore::):
        * rendering/MediaControlElements.cpp:
        (WebCore::MediaControlVolumeSliderContainerElement::MediaControlVolumeSliderContainerElement):
        (WebCore::MediaControlVolumeSliderContainerElement::styleForElement):
        Adjust the CSS values for "display", "postion", "left" and "top" according to member variables.
        (WebCore::MediaControlVolumeSliderContainerElement::setVisible): Affects the "display" CSS value.
        (WebCore::MediaControlVolumeSliderContainerElement::setPosition): Affects the "left" and "top" CSS values.
        (WebCore::MediaControlVolumeSliderContainerElement::hitTest): Hit testing this element.
        (WebCore::MediaControlVolumeSliderElement::MediaControlVolumeSliderElement):
        (WebCore::MediaControlVolumeSliderElement::defaultEventHandler): Modifies the volume using the slider value, allows dragging.
        * rendering/MediaControlElements.h:
        (WebCore::): Added definition for MediaControlVolumeSliderElement and MediaControlVolumeSliderContainerElement.
        (WebCore::MediaControlVolumeSliderContainerElement::isVisible): Inline getter.
        * rendering/RenderMedia.cpp:
        (WebCore::RenderMedia::styleDidChange): Updates styles for volume container and volume slider.
        (WebCore::RenderMedia::createVolumeSliderContainer): Creates volume slider container and attach to panel.
        (WebCore::RenderMedia::createVolumeSlider): Creates volume slider and attach to volume slider container.
        (WebCore::RenderMedia::updateControls): Updates volume container and volume slider.
        (WebCore::RenderMedia::updateVolumeSliderContainer): Sets the visibility and position of volume slider container and its child.
        (WebCore::RenderMedia::forwardEvent):
        Hit testing the volume slider container and volume slider to toggle the visibility and forward events to slider.
        * rendering/RenderMedia.h:
        Added definition for RenderMedia::updateVolumeSliderContainer().
        * rendering/RenderMediaControls.cpp:
        (WebCore::RenderMediaControls::paintMediaControlsPart): Not implemented.
        * rendering/RenderSlider.cpp:
        (WebCore::RenderSlider::createThumbStyle): Makes volume slider vertical.
        (WebCore::RenderSlider::thumbRect): ditto.
        (WebCore::RenderSlider::mouseEventIsInThumb): ditto.
        (WebCore::RenderSlider::setValueForPosition): ditto.
        (WebCore::RenderSlider::positionForOffset): ditto.
        (WebCore::RenderSlider::currentPosition): ditto.
        (WebCore::RenderSlider::trackSize): ditto.
        * rendering/RenderTheme.cpp:
        (WebCore::RenderTheme::adjustStyle): Adjust style for volume slider thumb.
        (WebCore::RenderTheme::paint): Paints volume control parts using theme.
        * rendering/RenderTheme.h:
        (WebCore::RenderTheme::paintMediaVolumeSliderContainer): Naive implementation to be overridden.
        (WebCore::RenderTheme::paintMediaVolumeSliderTrack): ditto.
        (WebCore::RenderTheme::paintMediaVolumeSliderThumb): ditto.
        * rendering/style/RenderStyleConstants.h:
        (WebCore::): Constants for volume control parts.

2009-08-25  Tor Arne Vestbø  <tor.arne.vestbo@nokia.com>

        Reviewed by Ariya Hidayat.

        [Qt/Mac] Use CONFIG+=build_all only when building libraries

        If no configuration is specified when building WebKit we pass the
        debug_and_release option to QMake which results in Makefiles for
        both configurations being generated.

        Previously we built both of these configurations by default, for
        all targets (both the QtWebKit framework/dyldlib and the various
        executables such as QtLauncher and tests). This makes sense for
        the libraries, which get the _debug suffix and can be loaded on
        demand by setting the DYLD_IMAGE_SUFFIX, but for executables we
        ended up building the same executable twice.

        We now only build one instance of each executable, and since this
        is a developer build we build the debug-version. Passing either
        --debug or --release to build-webkit will override this, and
        even in the default case the release version can still be built
        by running 'make release' in the the build directory of each
        target.

        * WebCore.pro:

2009-08-25  Xan Lopez  <xlopez@igalia.com>

        Reviewed by Jan Alonzo.

        https://bugs.webkit.org/show_bug.cgi?id=28690
        Build failure in webkitgtk+-1.1.3

        Do not use deprecated function to unref a pixbuf.

        * platform/gtk/CursorGtk.cpp:
        (WebCore::Cursor::Cursor):

2009-08-24  Hironori Bono  <hbono@chromium.org>

        Reviewed by Adam Barth.

        Fix Bug 27827 "[Chromium] Functions Keys don't work in google spreadsheet".
        <https://bugs.webkit.org/show_bug.cgi?id=27827>.

        Because of the lack of mappings from GDK key-codes to WebKit key-codes,
        Chromium cannot send valid key-codes to JavaScript when a user types
        function keys. This change just copies the mappings from 'KeyEventGtk.cpp'.

        To write layout tests for this issue, added mappings from function-key
        names to platform-specific key-codes to EventSendingController objects
        so that eventSender.keyDown() can send function-key events without using
        platform-specific key codes. (Unfortunately, this eventSender.keyDown() change
        is only for Mac. So this change adds this new test to Skipped tests for other
        platforms to prevent this change from crashing the build trees.)

        Test: fast/events/keydown-function-keys.html

       * platform/chromium/KeyCodeConversionGtk.cpp: Add mappings from GDK key-codes
        to WebKit key-code for function keys.
        (WebCore::windowsKeyCodeForKeyEvent):

2009-08-24  Antti Koivisto  <antti@apple.com>

        Reviewed by Simon Fraser.
        
        https://bugs.webkit.org/show_bug.cgi?id=28698
        Avoid unnecessary transformations for the window resizer rect.

        * platform/Scrollbar.cpp:
        (WebCore::Scrollbar::setFrameRect):

2009-08-24  Alexey Proskuryakov  <ap@apple.com>

        Reviewed by Anders Carlsson.

        <rdar://problem/7161900> REGRESSION: 100 MB membuster leak on windows due to 47391
        (DNS prefetching support)

        * platform/network/cf/DNSCFNet.cpp: (WebCore::prefetchDNS): Use a run loop from secondary
        thread on Windows, because there isn't one on main one.

2009-08-24  Alexey Proskuryakov  <ap@apple.com>

        Reviewed by Darin Adler.

        https://bugs.webkit.org/show_bug.cgi?id=28374
        Cross-scheme requests should not be blocked by appcache rules

        Test: http/tests/appcache/different-scheme.html

        * loader/appcache/ApplicationCacheHost.cpp:
        (WebCore::ApplicationCacheHost::shouldLoadResourceFromApplicationCache):
        Resources with different schemes can never be loaded from appcache.

2009-08-24  Alexey Proskuryakov  <ap@apple.com>

        Reviewed by Darin Adler and Sam Weinig.

        https://bugs.webkit.org/show_bug.cgi?id=28688
        REGRESSION(r24994): Cannot create a frame with a javascript URL

        Test: http/tests/security/javascriptURL/javascriptURL-in-new-iframe.html

        * bindings/js/JSAttrCustom.cpp: (WebCore::JSAttr::setValue):
        * bindings/js/JSElementCustom.cpp: (WebCore::allowSettingSrcToJavascriptURL):
        * bindings/js/JSHTMLFrameElementCustom.cpp: (WebCore::allowSettingJavascriptURL):
        * bindings/js/JSHTMLIFrameElementCustom.cpp: (WebCore::JSHTMLIFrameElement::setSrc):
        Omit the checks if there is no document in frame yet.

2009-08-24  Nate Chapin  <japhet@chromium.org>

        Reviewed by Eric Seidel.

        Fix crash in fast/css/rem-dynamic-scaling.html due to a freed
        RenderStyle being accessed.

        https://bugs.webkit.org/show_bug.cgi?id=28681

        * dom/Element.cpp:
        (WebCore::Element::recalcStyle): Make currentStyle a RefPtr.

2009-08-24  Dan Bernstein  <mitz@apple.com>

        Reviewed by Simon Fraser.

        <rdar://problem/5743105> Long freezing during loading and selecting text
        of a large table
        https://bugs.webkit.org/show_bug.cgi?id=14918

        * rendering/RenderView.cpp:
        (WebCore::RenderView::setSelection): Added calls to
            beginDeferredRepaints() and endDeferredRepaints() around the
            invalidation of the selection, in order to better coalesce multiple
            invalid rectangles.

2009-08-24  Pavel Feldman  <pfeldman@chromium.org>

        Reviewed by Timothy Hatcher.

        WebInspector: Simplify findTreeElement code, get rid of potential infinite loop.

        https://bugs.webkit.org/show_bug.cgi?id=28680

        * inspector/front-end/ElementsPanel.js:
        (WebInspector.ElementsPanel.prototype.updateBreadcrumb):
        * inspector/front-end/ElementsTreeOutline.js:
        (WebInspector.ElementsTreeOutline.prototype.findTreeElement):
        * inspector/front-end/treeoutline.js:
        (TreeOutline.prototype.getCachedTreeElement):
        (TreeOutline.prototype.findTreeElement):
        * inspector/front-end/utilities.js:
        (isAncestorNode):
        ():

2009-08-24  Pavel Feldman  <pfeldman@chromium.org>

        Reviewed by Timothy Hatcher.

        WebInspector: Do expand local scope when hitting the break

        https://bugs.webkit.org/show_bug.cgi?id=28678

        * inspector/front-end/ScopeChainSidebarPane.js:
        (WebInspector.ScopeChainSidebarPane.prototype.update):

2009-08-24  Ada Chan  <adachan@apple.com>

        Reviewed by Steve Falkenburg.

        Make sure we use the current FrameView's frame rect when
        going back to a cached page.
        
        https://bugs.webkit.org/show_bug.cgi?id=28659

        * loader/FrameLoader.cpp:
        (WebCore::FrameLoader::open):

2009-08-24  Cameron McCormack  <cam@mcc.id.au>

        Reviewed by Darin Adler.

        Modifying <text rotate=""> doesn't clear the corresponding SVGAnimatedNumberList
        https://bugs.webkit.org/show_bug.cgi?id=28673

        Test: svg/dom/text-rotate-live.html

        * svg/SVGNumberList.cpp:
        (WebCore::SVGNumberList::parse): Clear the list before adding the parsed
        numbers.

2009-08-24  Simon Fraser  <simon.fraser@apple.com>

        Reviewed by NOBODY (build fix)

        Turn off ENABLE_3D_CANVAS in the xconfig files.

        * Configurations/FeatureDefines.xcconfig:

2009-08-24  Pavel Feldman  <pfeldman@chromium.org>

        Reviewed by Timothy Hatcher.

        WebInspector: Only expand local scope when hitting the break

        https://bugs.webkit.org/show_bug.cgi?id=28678

        * inspector/front-end/ScopeChainSidebarPane.js:
        (WebInspector.ScopeChainSidebarPane.prototype.update):

2009-08-24  Dan Bernstein  <mitz@apple.com>

        Reviewed by Simon Fraser.

        background-size fails to parse if a single length/percentage/auto is followed by a comma
        https://bugs.webkit.org/show_bug.cgi?id=28674

        * css/CSSParser.cpp:
        (WebCore::CSSParser::parseFillSize): Added an allowComma parameter,
            which is set to false when this method consumes a comma. Moved
            handling of 'contain' and 'cover' from parseFillProperty into this
            method.
        (WebCore::CSSParser::parseFillProperty): Set allowComma to true before
            processing the next value, and pass allowComma to parseFillSize.
        * css/CSSParser.h:

2009-08-17  Martin Robinson  <martin.james.robinson@gmail.com>

        Reviewed by Gustavo Noronha.

        [GTK] Support for cursors that are images
        https://bugs.webkit.org/show_bug.cgi?id=28346

        Added support for cursors which are images for CursorGtk. Added
        a manual test for this.

        * manual-tests/gtk/cursor-image.html: Added.
        * manual-tests/gtk/resources/redcursor.cur: Added.
        * platform/gtk/CursorGtk.cpp:
        (WebCore::Cursor::Cursor):

2009-08-24  Zan Dobersek  <zandobersek@gmail.com>

        Reviewed by Gustavo Noronha.

        [GTK] Integrate GStreamer video with the graphics backend
        https://bugs.webkit.org/show_bug.cgi?id=16356

        Improves GStreamer backend implementation of MediaPlayerPrivate class.

        * platform/graphics/gtk/MediaPlayerPrivateGStreamer.cpp:
        (WebCore::mediaPlayerPrivateErrorCallback): Send proper MediaPlayer
        error for different GStreamer errors to MediaPlayerPrivate.
        (WebCore::MediaPlayerPrivate::MediaPlayerPrivate): Move static
        initialization boolean to a better place.
        (WebCore::MediaPlayerPrivate::play):
        (WebCore::MediaPlayerPrivate::pause):
        (WebCore::MediaPlayerPrivate::duration): Return if error occured, do not
        consider the source as stream if duration query failed.
        (WebCore::MediaPlayerPrivate::currentTime): Return if error occured, use
        an early return.
        (WebCore::MediaPlayerPrivate::seek): Return if error occured.
        (WebCore::MediaPlayerPrivate::setEndTime): Remove implementation since this
        function doesn't seem to be used anywhere in WebCore.
        (WebCore::MediaPlayerPrivate::paused):
        (WebCore::MediaPlayerPrivate::seeking):
        (WebCore::MediaPlayerPrivate::setRate): Seek to current time when rate is set.
        (WebCore::MediaPlayerPrivate::maxTimeBuffered): Return if error occured.
        (WebCore::MediaPlayerPrivate::maxTimeSeekable): Ditto.
        (WebCore::MediaPlayerPrivate::maxTimeLoaded): Ditto.
        (WebCore::MediaPlayerPrivate::bytesLoaded):
        (WebCore::MediaPlayerPrivate::totalBytesKnown):
        (WebCore::MediaPlayerPrivate::totalBytes): Ditto.
        (WebCore::MediaPlayerPrivate::updateStates): Return if error occured, update
        after seek ended with a successful change
        (WebCore::MediaPlayerPrivate::didEnd): Do not pause the playbin when end is reached.
        (WebCore::MediaPlayerPrivate::loadingFailed): Update network state with the given error.
        (WebCore::mimeTypeCache): Gather supported mime types from GStreamer.
        (WebCore::MediaPlayerPrivate::getSupportedTypes):
        (WebCore::MediaPlayerPrivate::supportsType):
        (WebCore::MediaPlayerPrivate::hasSingleSecurityOrigin):
        (WebCore::MediaPlayerPrivate::supportsFullscreen): First step towards fullscreen
        support.
        (WebCore::MediaPlayerPrivate::createGSTPlayBin): Use playbin2 instead of playbin,
        do not set playbin's audio sink.
        * platform/graphics/gtk/MediaPlayerPrivateGStreamer.h:
        * platform/graphics/gtk/VideoSinkGStreamer.cpp:
        (webkit_video_sink_idle_func): Use C++ casts, decrease reference count of async
        queue at the end of the idle function.
        (webkit_video_sink_render): Increase reference count of async queue.
        (webkit_video_sink_stop): Remove any idle functions with the sink as data.

2009-08-23  Chris Marrin  <cmarrin@apple.com>

        Reviewed by Simon Fraser.

        Remaining new files for Canvas3D
        https://bugs.webkit.org/show_bug.cgi?id=28018

        * bindings/js/JSHTMLCanvasElementCustom.cpp: Added Canvas3D method behind an ifdef
        * html/canvas/CanvasByteArray.cpp: Added. Efficient array of bytes for passing to GL functions
        * html/canvas/CanvasByteArray.h: Added.
        * html/canvas/CanvasByteArray.idl: Added.
        * html/canvas/CanvasNumberArray.cpp: Added. Efficient array of 32 bit floats for passing to GL functions
        * html/canvas/CanvasNumberArray.h: Added.
        * html/canvas/CanvasNumberArray.idl: Added.

2009-08-24  Pavel Feldman  <pfeldman@chromium.org>

        Reviewed by Timothy Hatcher.

        WebInspector: Migrate call frames interaction to the InjectedScript-based schema.

        https://bugs.webkit.org/show_bug.cgi?id=28408

        * inspector/front-end/CallStackSidebarPane.js:
        (WebInspector.CallStackSidebarPane.prototype.update):
        * inspector/front-end/ConsoleView.js:
        (WebInspector.ConsoleView.prototype.doEvalInWindow):
        (WebInspector.ConsoleTextMessage):
        * inspector/front-end/DOMAgent.js:
        (WebInspector.DOMAgent.prototype.get domWindow):
        (InspectorController.openInInspectedWindow):
        (InspectorController.getCallFrames):
        (InspectorController.evaluateInCallFrame):
        * inspector/front-end/ElementsPanel.js:
        (WebInspector.ElementsPanel.prototype.reset):
        (WebInspector.ElementsPanel.prototype.generateStylesheet):
        * inspector/front-end/InjectedScript.js:
        (InjectedScript.evaluate):
        (InjectedScript._evaluateOn):
        (InjectedScript.openInInspectedWindow):
        (InjectedScript.getCallFrames):
        (InjectedScript.evaluateInCallFrame):
        (InjectedScript._callFrameForId):
        (InjectedScript._objectForId):
        (InjectedScript.CallFrameProxy):
        (InjectedScript.CallFrameProxy.prototype._wrapScopeChain):
        * inspector/front-end/ObjectPropertiesSection.js:
        (WebInspector.ObjectPropertiesSection.prototype._update):
        * inspector/front-end/ObjectProxy.js:
        (WebInspector.ObjectPropertyProxy):
        * inspector/front-end/ResourcesPanel.js:
        (WebInspector.ResourceSidebarTreeElement.prototype.ondblclick):
        * inspector/front-end/ScopeChainSidebarPane.js:
        (WebInspector.ScopeChainSidebarPane):
        (WebInspector.ScopeChainSidebarPane.prototype.update):
        (WebInspector.ScopeVariableTreeElement.prototype.onattach):
        (WebInspector.ScopeVariableTreeElement.prototype.onexpand):
        (WebInspector.ScopeVariableTreeElement.prototype.oncollapse):
        * inspector/front-end/ScriptsPanel.js:
        (WebInspector.ScriptsPanel.prototype.doEvalInCallFrame):
        (WebInspector.ScriptsPanel.prototype.variablesInSelectedCallFrame):
        (WebInspector.ScriptsPanel.prototype.debuggerPaused.callback):
        (WebInspector.ScriptsPanel.prototype.debuggerPaused):

2009-08-24  Kent Tamura  <tkent@chromium.org>

        Reviewed by Eric Seidel.

        Add support for the placeholder attribute and DOM property of the textarea element.
        https://bugs.webkit.org/show_bug.cgi?id=21248

        A DOM node for an INPUT element doesn't have a flag for placeholder
        visibility anymore.  This patch also fixes a bug that a renderer
        doesn't reflect a corresponding DOM value change.

        Tests: fast/forms/textarea-placeholder-dom-property.html
               fast/forms/textarea-placeholder-pseudo-style.html
               fast/forms/textarea-placeholder-set-attribute.html
               fast/forms/textarea-placeholder-set-value.html

        * css/html.css: Add the default style for placeholder of textarea.
        * dom/InputElement.cpp: Cleanup for m_placeholderShouldBeVisible removal
        (WebCore::InputElement::dispatchFocusEvent):
        (WebCore::InputElement::dispatchBlurEvent):
        (WebCore::InputElement::placeholderShouldBeVisible):
        (WebCore::InputElement::updatePlaceholderVisibility):
        (WebCore::InputElement::setValueFromRenderer):
        (WebCore::InputElementData::InputElementData):
        * dom/InputElement.h:
        * html/HTMLInputElement.cpp:
        (WebCore::HTMLInputElement::dispatchFocusEvent):
        (WebCore::HTMLInputElement::dispatchBlurEvent):
        (WebCore::HTMLInputElement::setValue):
        (WebCore::HTMLInputElement::placeholderShouldBeVisible):
        * html/HTMLInputElement.h:
        (WebCore::HTMLInputElement::updatePlaceholderVisibility):
        * html/HTMLTextAreaElement.cpp:
        (WebCore::HTMLTextAreaElement::parseMappedAttribute):
        (WebCore::HTMLTextAreaElement::setValue):
        (WebCore::HTMLTextAreaElement::placeholderShouldBeVisible):
        (WebCore::HTMLTextAreaElement::updatePlaceholderVisibility):
        (WebCore::HTMLTextAreaElement::dispatchFocusEvent):
        (WebCore::HTMLTextAreaElement::dispatchBlurEvent):
        * html/HTMLTextAreaElement.h:
        * html/HTMLTextAreaElement.idl:
        * rendering/RenderTextControl.cpp:
        (WebCore::RenderTextControl::RenderTextControl):
        (WebCore::RenderTextControl::styleDidChange):
        (WebCore::RenderTextControl::setInnerTextStyle):
        (WebCore::RenderTextControl::updatePlaceholderVisibility):
        * rendering/RenderTextControl.h:
        * rendering/RenderTextControlMultiLine.cpp:
        (WebCore::RenderTextControlMultiLine::RenderTextControlMultiLine):
        (WebCore::RenderTextControlMultiLine::nodeAtPoint):
        (WebCore::RenderTextControlMultiLine::updateFromElement):
        (WebCore::RenderTextControlMultiLine::createInnerTextStyle):
        (WebCore::RenderTextControlMultiLine::textBaseStyle):
        * rendering/RenderTextControlMultiLine.h:
        * rendering/RenderTextControlSingleLine.cpp:
        (WebCore::RenderTextControlSingleLine::RenderTextControlSingleLine):
        (WebCore::RenderTextControlSingleLine::textBaseStyle):
        (WebCore::RenderTextControlSingleLine::updateFromElement):
        (WebCore::RenderTextControlSingleLine::createInnerTextStyle):
        * rendering/RenderTextControlSingleLine.h:
        * wml/WMLInputElement.cpp:
        (WebCore::WMLInputElement::dispatchFocusEvent):
        (WebCore::WMLInputElement::dispatchBlurEvent):
        (WebCore::WMLInputElement::setValue):
        (WebCore::WMLInputElement::placeholderShouldBeVisible):

2009-08-23  Dirk Schulze  <krit@webkit.org>

        Reviewed by Mark Rowe.

        Code clean-up and build fix for filters enabled builds. Moved SVGNames.h
        into #if ENABLE(SVG) for Document.cpp and added SVGNames.h to the other
        files. They are needed there after r47688.

        * dom/Document.cpp:
        * svg/SVGComponentTransferFunctionElement.h:
        * svg/SVGFELightElement.h:
        * svg/SVGFEMergeNodeElement.h:
        * svg/SVGFilterPrimitiveStandardAttributes.h:

2009-08-23  Gustavo Noronha Silva  <gns@gnome.org>

        Unreviewed, build fix for make distcheck on GTK+.

        * GNUmakefile.am: Added files needed for the build.
        * bindings/js/JSDOMWindowCustom.cpp: Protect SharedWorker include
        with #if clause.
        * bindings/js/JSEventTarget.cpp: Dito.
        * dom/Document.cpp: Dito.
        * loader/FrameLoader.cpp: Dito.

2009-08-23  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Timothy Hatcher.

        Inspector: Throws an Error on "null"
        https://bugs.webkit.org/show_bug.cgi?id=28665

        * inspector/front-end/InjectedScript.js:
        (InjectedScript.evaluate):

2009-08-23  Pavel Feldman  <pfeldman@chromium.org>

        Reviewed by Timothy Hatcher.

        Inspector: REGRESSION Formatting Function in Console is Abbreviated Too Often

        https://bugs.webkit.org/show_bug.cgi?id=28666

        * inspector/front-end/InjectedScript.js:
        (InjectedScript.getProperties):
        (InjectedScript.createProxyObject):

2009-08-22  Martin Robinson  <martin.james.robinson@gmail.com>

        Reviewed by Xan Lopez.

        [GTK] BitmapImage::getGdkPixbuf does not handle alpha channels properly
        https://bugs.webkit.org/show_bug.cgi?id=28345

        When doing the conversion between cairo_surface_t* and GdkPixbuf*
        account for the differences in the respective formats' in-memory
        image format.

        * platform/graphics/gtk/ImageGtk.cpp:
        (WebCore::getCairoSurfacePixel):
        (WebCore::getGdkPixbufPixel):
        (WebCore::BitmapImage::getGdkPixbuf):

2009-08-22  Darin Adler  <darin@apple.com>

        Reviewed by Oliver Hunt.

        Make DOM classes start with a reference count of 1, like all other RefCounted
        
        Next step: Element, HTMLElement, HTMLAnchorElement, HTMLAppletElement,
        HTMLAreaElement, HTMLEmbedElement, HTMLFrameElement, HTMLIFrameElement,
        HTMLObjectElement, HTMLPlugInElement, HTMLPlugInImageElement.

        * DerivedSources.make: Fix error seen every time we build by escaping the $
        in the build rule, since you have to use $$ for that in make.

        * WebCore.base.exp: Updated.

        * bindings/objc/DOM.mm:
        Added now-needed include of SVGNames.h.

        * dom/Document.cpp: Added now-needed include of SVGNames.h.
        (WebCore::Document::createElement): Use create instead of new.

        * dom/Element.cpp:
        (WebCore::Element::Element): Added ConstructionType argument so the caller
        can determine whether this starts with a reference count of either 0 or 1.
        Later we will remove this again once they are all 1.
        (WebCore::Element::create): Added.

        * dom/Element.h: Added create and made constructor protected.

        * dom/StyledElement.cpp:
        (WebCore::StyledElement::StyledElement): Added ConstructionType argument.
        * dom/StyledElement.h: Made many functions protected or private, including
        the constructor.

        * dom/make_names.pl: Use create to create the base elements HTMLElement,
        SVGElement, and WMLElement.

        * editing/CreateLinkCommand.cpp:
        (WebCore::CreateLinkCommand::doApply): Use create instead of new.
        * editing/UnlinkCommand.cpp:
        (WebCore::UnlinkCommand::doApply): Ditto.

        * html/HTMLAnchorElement.cpp:
        (WebCore::HTMLAnchorElement::create): Added.
        * html/HTMLAnchorElement.h: Made constructor protected and added create.
        Also made m_rootEditableElementForSelectionOnMouseDown a RefPtr.

        * html/HTMLAppletElement.cpp:
        (WebCore::HTMLAppletElement::create): Added.
        * html/HTMLAppletElement.h: Made constructor private and added create.

        * html/HTMLAreaElement.cpp:
        (WebCore::HTMLAreaElement::create): Added.
        * html/HTMLAreaElement.h: Made constructor private and added create.

        * html/HTMLElement.cpp:
        (WebCore::HTMLElement::create): Added.
        * html/HTMLElement.h: Made constructor protected and added create.
        Made other functions protected and private. Also added inline
        definition of constructor.

        * html/HTMLEmbedElement.cpp:
        (WebCore::HTMLEmbedElement::create): Added.
        * html/HTMLEmbedElement.h: Made constructor private and added create.
        Made other functions private.

        * html/HTMLFrameElement.cpp:
        (WebCore::HTMLFrameElement::create): Added.
        (WebCore::HTMLFrameElement::parseMappedAttribute):
        * html/HTMLFrameElement.h: Made constructor private and added create.
        Made other functions private.

        * html/HTMLFrameElementBase.h: Made functions protected and private.

        * html/HTMLFrameOwnerElement.cpp:
        (WebCore::HTMLFrameOwnerElement::HTMLFrameOwnerElement): Pass
        CreateElement so reference count starts at 1.

        * html/HTMLFrameOwnerElement.h: Made functions protected and private.

        * html/HTMLIFrameElement.cpp:
        (WebCore::HTMLIFrameElement::create): Added.
        * html/HTMLIFrameElement.h: Made constructor private and added create.
        Made other functions private.

        * html/HTMLObjectElement.cpp:
        (WebCore::HTMLObjectElement::create): Added.
        (WebCore::HTMLObjectElement::containsJavaApplet): Changed while loop
        into a for loop and tweaked formatting.

        * html/HTMLObjectElement.h: Made constructor private and added create.
        Made other functions private.

        * html/HTMLPlugInElement.h: Made constructor protected.
        Made other functions protected and private.

        * html/HTMLPlugInImageElement.h: Made constructor and another function
        protected.

        * html/HTMLTagNames.in: Removed createWithNew from all classes that
        now have create functions. Moved conditional noscript to a separate
        paragraph.

        * html/HTMLViewSourceDocument.cpp:
        (WebCore::HTMLViewSourceDocument::addSpanWithClassName): Use create.
        (WebCore::HTMLViewSourceDocument::addLink): Ditto.
        * page/DragController.cpp:
        (WebCore::documentFragmentFromDragData): Ditto.

        * svg/SVGElement.cpp:
        (WebCore::SVGElement::SVGElement): Pass CreateElementZeroRefCount
        so reference count still starts at 0. Will change this class later.
        (WebCore::SVGElement::create): Added.
        * svg/SVGElement.h: Added create, made constructor protected, and
        made other functions protected and private. Removed unneeded
        SVGNames.h include.

        * svg/SVGExternalResourcesRequired.h: Added now-needed SVGNames.h
        include.

        * svg/SVGStopElement.h: Added now-needed SVGNames.h include.
        Made functions private.

        * wml/WMLElement.cpp:
        (WebCore::WMLElement::WMLElement): Pass CreateElementZeroRefCount
        so reference count still starts at 0. Will change this class later.
        (WebCore::WMLElement::create): Added.
        * wml/WMLElement.h: Added create and made constructor protected.

        * wml/WMLTagNames.in: Removed createWithNew from WMLElement.

2009-08-22  Adele Peterson  <adele@apple.com>

        Reviewed by Anders Carlsson.

        Fix for <rdar://problem/7161656> Crash in RenderObject::destroy when using custom scrollbars

        Custom scrollbars normally get detached when a document gets detached.  In this case, a crash was happening when the document had gone into the page cache 
        and then was getting destroyed without proper scrollbar teardown.  This change makes custom scrollbars get detached when the document enters the cache.

        I couldn't figure out a way to reliably cause this to happen in DRT, since the reproducible case relies on the cache being purged at a particular time.

        * history/CachedFrame.cpp: (WebCore::CachedFrame::CachedFrame): Detach custom scrollbars when the CachedFrame is created.  
          They'll get reattached when the document comes out of the page cache.
        * page/FrameView.cpp: (WebCore::FrameView::~FrameView): Added some asserts to catch this problem earlier in debug builds.

2009-08-22  David Hyatt  <hyatt@apple.com>

        Reviewed by Dan Bernstein.

        Make sure self-collapsing blocks that clear floats are still able to collapse their bottom margins with
        the bottom of their parent blocks.  The old code prevented all collapsing, but all CSS2.1 states is that:
        "An element that has had clearance applied to it never collapses its top margin with its parent block's bottom margin."
        
        The implication is that the bottom margin can still collapse, and the block-inside-inline form of
        fast/block/margin-collapse/025.html (added as fast/block/margin-collapse/block-inside-inline/025.html) depends
        on it to get comparable results.

        Added block-inside-inline tests (a whole slew of them) in fast/block/margin-collapse/block-inside-inline/

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::MarginInfo::MarginInfo):
        (WebCore::RenderBlock::collapseMargins):
        (WebCore::RenderBlock::clearFloatsIfNeeded):
        (WebCore::RenderBlock::handleBottomOfBlock):
        * rendering/RenderBlock.h:
        (WebCore::RenderBlock::MarginInfo::clearMargin):
        (WebCore::RenderBlock::MarginInfo::canCollapseBottomWithChildren):

2009-08-22  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by Darin Adler.

        Need to implement ARIA role="listitem" and role="list"
        https://bugs.webkit.org/show_bug.cgi?id=28606

        Test: platform/mac-snowleopard/accessibility/aria-list-and-listitem.html

        * accessibility/AXObjectCache.cpp:
        (WebCore::AXObjectCache::getOrCreate):
        * accessibility/AccessibilityList.cpp:
        (WebCore::AccessibilityList::isUnorderedList):
        * accessibility/AccessibilityRenderObject.cpp:
        (WebCore::RoleEntry::):

2009-08-21  Dan Bernstein  <mitz@apple.com>

        Reviewed by Darin Adler.

        Clean up fill image geometry calculation
        https://bugs.webkit.org/show_bug.cgi?id=28652

        * rendering/RenderBoxModelObject.cpp:
        (WebCore::RenderBoxModelObject::calculateFillTileSize): Renamed
            calculateBackgroundSize() to this. Replaced separate scaledWidth and
            scaledHeight parameters with a single scaledSize parameter. Renamed
            parameters and local variables.
        (WebCore::RenderBoxModelObject::calculateBackgroundImageGeometry): Changed
            to use CSS3 Backgrounds and Borders terminology in comments and
            local variable names. Renamed, clarified and consolidated some local
            variables.
        * rendering/RenderBoxModelObject.h: Made calculateFillTileSize() private.

2009-08-22  Chris Marrin  <cmarrin@apple.com>

        Unreviewed, build fix.

        Backing out http://trac.webkit.org/changeset/47669

        * html/canvas/CanvasRenderingContext2D.cpp:
        * html/canvas/CanvasRenderingContext2D.h:

2009-08-22  Dimitri Glazkov  <dglazkov@chromium.org>

        Unreviewed, build fix.

        Backing out http://trac.webkit.org/changeset/47671 in preparation of
        rolling out http://trac.webkit.org/changeset/47669.

2009-08-22  Dimitri Glazkov  <dglazkov@chromium.org>

        Reviewed by Anders Carlsson.

        Build fix, add CanvasRenderingContext to build systems.
        https://bugs.webkit.org/show_bug.cgi?id=28018

        * DerivedSources.make: Added CanvasRenderinContext.
        * GNUmakefile.am: Ditto.
        * WebCore.gypi: Ditto.
        * WebCore.pro: Ditto.
        * WebCore.xcodeproj/project.pbxproj: Ditto.
        * WebCoreSources.bkl: Ditto.

2009-08-21  Chris Marrin  <cmarrin@apple.com>

        Reviewed by Oliver Hunt.

        New files implementing GL buffer wrappers, and support to make them platform independent
        https://bugs.webkit.org/show_bug.cgi?id=28018

        * html/canvas/CanvasBuffer.cpp: Added. Wrapper around GL Buffer object
        * html/canvas/CanvasBuffer.h: Added.
        * html/canvas/CanvasBuffer.idl: Added.
        * html/canvas/CanvasFramebuffer.cpp: Added. Wrapper around GL Framebuffer object
        * html/canvas/CanvasFramebuffer.h: Added.
        * html/canvas/CanvasFramebuffer.idl: Added.
        * html/canvas/CanvasObject.h: Expose m_context
        * html/canvas/CanvasProgram.cpp: Added. Wrapper around GL Program object
        * html/canvas/CanvasProgram.h: Added.
        * html/canvas/CanvasProgram.idl: Added.
        * html/canvas/CanvasRenderbuffer.cpp: Added. Wrapper around GL Renderbuffer object
        * html/canvas/CanvasRenderbuffer.h: Added.
        * html/canvas/CanvasRenderbuffer.idl: Added.
        * html/canvas/CanvasRenderingContext3D.cpp: Move m_objects hash table from GraphicsContext3D to here
        * html/canvas/CanvasRenderingContext3D.h:
        * html/canvas/CanvasShader.cpp: Added. Wrapper around GL Shader object
        * html/canvas/CanvasShader.h: Added.
        * html/canvas/CanvasShader.idl: Added.
        * html/canvas/CanvasTexture.cpp: Added. Wrapper around GL Texture object
        * html/canvas/CanvasTexture.h: Added.
        * html/canvas/CanvasTexture.idl: Added.
        * platform/graphics/GraphicsContext3D.cpp: Removed.
        * platform/graphics/GraphicsContext3D.h: Move m_objects hash table from here to CanvasRenderingContext3D
        * platform/graphics/mac/GraphicsContext3DMac.cpp: Implement platform dependent code for GL object creation/destruction

2009-08-21  Darin Adler  <darin@apple.com>

        * WebCore.vcproj/build-generated-files.sh:
        * make-generated-sources.sh:
        Removed obsolete code to set up CREATE_HASH_TABLE.

2009-08-21  Adele Peterson  <adele@apple.com>

        Reviewed by Mark Rowe.

        <rdar://problem/7162322> Custom style sheet ignored if UAC is enabled 

        * platform/win/SharedBufferWin.cpp: (WebCore::SharedBuffer::createWithContentsOfFile): 
        No need to open the file with write access.  Only read access is needed.

2009-08-21  Alexey Proskuryakov  <ap@apple.com>

        Reviewed by Darin Adler.

        <rdar://problem/7161454> Leaks seen during http/tests/xmlhttprequest/cross-origin-no-authorization.html

        Also fixes leaks seen on appcache tests.

        * platform/network/mac/ResourceHandleMac.mm: (WebCore::ResourceHandle::cancel): Work around
        something that's likely a CFNetwork issue. Note that on Windows, there is no matching API
        to call, and we do not think that the leak occurs there anyway.

2009-08-21  Dmitry Titov  <dimich@chromium.org>

        Reviewed by David Levin.

        https://bugs.webkit.org/show_bug.cgi?id=28650
        Remove cross-thread code from CrossOriginPreflightResultCache.
        Removed mutexes, atomic initializer and string copy.

        No new tests, the worker tests cover this.

        * loader/CrossOriginPreflightResultCache.cpp:
        (WebCore::addToAccessControlAllowList):
        (WebCore::CrossOriginPreflightResultCache::shared):
        (WebCore::CrossOriginPreflightResultCache::appendEntry):
        (WebCore::CrossOriginPreflightResultCache::canSkipPreflight):
        (WebCore::CrossOriginPreflightResultCache::empty):
        * loader/CrossOriginPreflightResultCache.h:

2009-08-21  Michelangelo De Simone  <micdesim@gmail.com>

        Reviewed by Jan Alonzo.

        Buildfix after http://trac.webkit.org/changeset/47655.

        * html/HTMLFormControlElement.h:

2009-08-19  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Timothy Hatcher.

        Inspector: Improve Cookie DataGrid to Show Hidden Data
        https://bugs.webkit.org/show_bug.cgi?id=28269

          Removed Custom Bindings

        * bindings/js/JSInspectorBackendCustom.cpp:
        * bindings/v8/custom/V8CustomBinding.h:
        * bindings/v8/custom/V8InspectorBackendCustom.cpp:
        * inspector/InspectorBackend.cpp:

          Made Non-Custom Bindings in the Backend

        (WebCore::InspectorBackend::getCookies):
        (WebCore::InspectorBackend::deleteCookie):
        * inspector/InspectorBackend.h:
        * inspector/InspectorBackend.idl:
        * inspector/InspectorController.cpp:
        (WebCore::InspectorController::deleteCookie):
        * inspector/InspectorController.h:

          Build the Cookie ScriptObjects, handles using document.cookie in
          case the platform hasn't implemented raw cookie access.

        * inspector/InspectorDOMAgent.cpp:
        (WebCore::InspectorDOMAgent::getCookies):
        (WebCore::InspectorDOMAgent::buildObjectForCookie):
        (WebCore::InspectorDOMAgent::buildArrayForCookies):
        * inspector/InspectorDOMAgent.h:

          Complete the Asynchronous Calls

        * inspector/InspectorFrontend.cpp:
        (WebCore::InspectorFrontend::didGetCookies):
        * inspector/InspectorFrontend.h:

          Asynchronous Functions to get Cookie Data

        * inspector/front-end/DOMAgent.js:
        (WebInspector.Cookies.getCookiesAsync):
        (WebInspector.Cookies.buildCookiesFromString): fallback behavior

          Refactor to use the Asynchronous Functions

        * inspector/front-end/CookieItemsView.js:
        (WebInspector.CookieItemsView):
        (WebInspector.CookieItemsView.prototype.get statusBarItems):
        (WebInspector.CookieItemsView.prototype.update.callback):
        (WebInspector.CookieItemsView.prototype.update):
        (WebInspector.CookieItemsView.prototype.simpleDataGridForCookies):
        (WebInspector.CookieItemsView.prototype._deleteButtonClicked):

          Cleaned/Commented Related Code

        (InspectorController.searchCanceled):
        * inspector/front-end/InjectedScript.js:
        * platform/Cookie.h:
        * English.lproj/localizedStrings.js: the new strings that were supposed to have gone in last time

2009-08-21  Michelangelo De Simone  <micdesim@gmail.com>

        Reviewed by Adele Peterson.

        https://bugs.webkit.org/show_bug.cgi?id=28145
        Add support for novalidate/formnovalidate attribute, from HTML5 specs:
        http://www.whatwg.org/specs/web-apps/current-work/#attr-fs-novalidate

        Tests: fast/forms/formnovalidate-attribute.html
               fast/forms/novalidate-attribute.html

        * html/HTMLAttributeNames.in: added novalidate, formnovalidate
        * html/HTMLButtonElement.idl: formnovalidate attribute exposed
        * html/HTMLFormControlElement.cpp:
        (WebCore::HTMLFormControlElement::formNoValidate): attribute getter
        (WebCore::HTMLFormControlElement::setFormNoValidate): attribute setter
        * html/HTMLFormControlElement.h:
        * html/HTMLFormElement.cpp:
        (WebCore::HTMLFormElement::novalidate): attribute getter
        (WebCore::HTMLFormElement::setNovalidate): attribute setter
        * html/HTMLFormElement.h:
        * html/HTMLFormElement.idl: novalidate attribute exposed
        * html/HTMLInputElement.idl: formNoValidate attribute exposed

2009-08-21  Dan Bernstein  <mitz@apple.com>

        Reviewed by Beth Dakin.

        Rendering changes to complete
        [CSS3 Backgrounds and Borders] Add support for the "contain" value for
        background-size
        https://bugs.webkit.org/show_bug.cgi?id=27573
        and
        [CSS3 Backgrounds and Borders] Add support for the "cover" value for
        background-size
        https://bugs.webkit.org/show_bug.cgi?id=27574

        Test: fast/backgrounds/size/contain-and-cover.html

        * rendering/RenderBoxModelObject.cpp:
        (WebCore::RenderBoxModelObject::calculateBackgroundSize):
        * rendering/RenderObject.cpp:
        (WebCore::mustRepaintFillLayers):

2009-08-21  Michelangelo De Simone  <micdesim@gmail.com>

        Reviewed by Adele Peterson.

        https://bugs.webkit.org/show_bug.cgi?id=27452
        Add support for checkValidity() method and invalid event, from HTML5
        specs:
        http://www.whatwg.org/specs/web-apps/current-work/#dom-form-checkvalidity

        Tests: fast/events/invalid-001.html
               fast/events/invalid-002.html
               fast/events/invalid-003.html
               fast/events/invalid-004.html
               fast/events/invalid-005.html
               fast/forms/checkValidity-001.html
               fast/forms/checkValidity-002.html
               fast/forms/checkValidity-003.html
               fast/forms/checkValidity-004.html

        * dom/Document.idl: oninvalid event handler
        * dom/Element.idl: ditto
        * dom/EventNames.h: added invalid event
        * dom/Node.cpp:
        (WebCore::Node::oninvalid): ditto
        (WebCore::Node::setOninvalid): ditto
        * dom/Node.h: ditto
        * html/HTMLAttributeNames.in: oninvalid attribute
        * html/HTMLButtonElement.idl: added checkValidity() method
        * html/HTMLElement.cpp:
        (WebCore::HTMLElement::parseMappedAttribute): parses oninvalid
        * html/HTMLFieldSetElement.idl: added checkValidity() method
        * html/HTMLFormControlElement.cpp:
        (WebCore::HTMLFormControlElement::checkValidity): checkValidity()
        implementation
        * html/HTMLFormControlElement.h:
        * html/HTMLFormElement.cpp:
        (WebCore::HTMLFormElement::checkValidity): checkValidity() implementation
        for form elements
        * html/HTMLFormElement.h: checkValidity() definition
        * html/HTMLFormElement.idl: added checkValidity() method
        * html/HTMLInputElement.idl: added checkValidity() method
        * html/HTMLSelectElement.idl: added checkValidity() method
        * html/HTMLTextAreaElement.idl: added checkValidity() method
        * page/DOMWindow.cpp:
        (WebCore::DOMWindow::oninvalid): oninvalid event handler
        (WebCore::DOMWindow::setOninvalid): ditto
        * page/DOMWindow.h: ditto
        * page/DOMWindow.idl: ditto

2009-08-21  Beth Dakin  <bdakin@apple.com>

        Reviewed by Dan Bernstein.

        The CSS part of https://bugs.webkit.org/show_bug.cgi?id=27571 [CSS3 
        Backgrounds and Borders] Add support for the "round" value for 
        background-repeat
        -and-
        https://bugs.webkit.org/show_bug.cgi?id=27570 [CSS3 Backgrounds and 
        Borders] Add support for the "space" value for background-repeat

        * css/CSSParser.cpp:
        (WebCore::CSSParser::parseFillProperty):
        * css/CSSPrimitiveValueMappings.h:
        (WebCore::CSSPrimitiveValue::CSSPrimitiveValue):
        (WebCore::CSSPrimitiveValue::operator EFillRepeat):
        * css/CSSValueKeywords.in:
        * rendering/style/FillLayer.h:
        * rendering/style/RenderStyleConstants.h:
        (WebCore::):

2009-08-21  Chris Marrin  <cmarrin@apple.com>

        Reviewed by Oliver Hunt.

        New files for Canvas 3D feature
        https://bugs.webkit.org/show_bug.cgi?id=28018

        This is all the new files for implementing Canvas 3D. None of them are hooked up and
        are not even included in the build yet. This incorporates the reviews from Simon
        and Ollie for these files.

        * bindings/js/JSCanvasNumberArrayCustom.cpp: Added. Custom JS binding to do implicit conversion from JS Array
        * html/CanvasObject.cpp: Added. Base class for all GL object containers
        * html/CanvasObject.h: Added.
        * html/CanvasRenderingContext.cpp: Added. Base class for CanvasRenderingContext2D and CanvasRenderingContext3D
        * html/CanvasRenderingContext.h: Added.
        * html/CanvasRenderingContext.idl: Added.
        * html/CanvasRenderingContext3D.cpp: Added. 3D context returned from Canvas.getContext()
        * html/CanvasRenderingContext3D.h: Added.
        * html/CanvasRenderingContext3D.idl: Added.
        * platform/graphics/GraphicsContext3D.cpp: Added. Platform interface between CanvasRenderingContext3D and 3D graphics engine
        * platform/graphics/GraphicsContext3D.h: Added.
        * platform/graphics/mac/Canvas3DLayer.h: Added. CALayer subclass to composite 3D canvas
        * platform/graphics/mac/Canvas3DLayer.mm: Added.
        * platform/graphics/mac/GraphicsContext3DMac.cpp: Added. Mac specific interface (OpenGL based)

2009-08-21  Ryosuke Niwa  <rniwa@webkit.org>

        No Review.

        Another Windows build fix.

        * editing/ApplyStyleCommand.cpp:
        (WebCore::diffTextDecorations):

2009-08-21  David Hyatt  <hyatt@apple.com>

        Reviewed by Simon Fraser.

        https://bugs.webkit.org/show_bug.cgi?id=28625, focus rings don't respect the non-strict mode
        line box shrinking quirk.  Make sure outlines don't extend outside the lineTop and lineBottom
        of the root line box.

        Covered by existing tests.

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::addFocusRingRects):
        * rendering/RenderInline.cpp:
        (WebCore::RenderInline::addFocusRingRects):
        (WebCore::RenderInline::paintOutline):

2009-08-21  Ryosuke Niwa  <rniwa@webkit.org>

        No Review.

        Windows build fix.

        * editing/ApplyStyleCommand.cpp:
        (WebCore::setTextDecorationProperty): Made it static
        (WebCore::diffTextDecorations): Made it static

2009-08-21  Ryosuke Niwa  <rniwa@webkit.org>

        Reviewed by Eric Seidel.

        execCommand("Underline") uses CSS even when styleWithCSS has been turned off
        https://bugs.webkit.org/show_bug.cgi?id=23892

        This patch adds support for u and s in StyleChange and addInlineStyleIfNeeded so that
        WebKit does not use CSS to decorate texts when styleWithCSS is set to false.

        * css/CSSValueList.cpp:
        (WebCore::CSSValueList::copy): Added.
        * css/CSSValueList.h: Added copy.
        * editing/ApplyStyleCommand.cpp:
        (WebCore::StyleChange::applyUnderline):
        (WebCore::StyleChange::applyLineThrough):
        (WebCore::StyleChange::StyleChange): Added a boolean trimTextDecorations argument.
        (WebCore::StyleChange::init): Ditto.
        (WebCore::StyleChange::extractTextStyles): Handles text decorations.
        (WebCore::getPropertiesNotInComputedStyle): Handles text decorations properly.
        (WebCore::ApplyStyleCommand::addInlineStyleIfNeeded): Adds u and s if needed.

2009-08-21  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Timothy Hatcher.

        Inspector: Rename "Databases" Panel as "Storage"
        https://bugs.webkit.org/show_bug.cgi?id=28620

          Updated enum from "DatabasesPanel" to "StoragePanel" and wherever it was used.

        * inspector/InspectorController.cpp:
        (WebCore::InspectorController::specialPanelForJSName): string to display StoragePanel can be either "databases" or "storage"
        * inspector/InspectorController.h:
        (WebCore::InspectorController::):
        * inspector/InspectorFrontend.cpp:
        (WebCore::InspectorFrontend::showPanel):

          Updated All Direct Access from WebInspector.panels.databases to WebInspector.panels.storage,
          any DatabasesPanel constructors and appropriate function names.

        * inspector/front-end/DOMStorageDataGrid.js:
        (WebInspector.DOMStorageDataGrid.prototype._startEditingColumnOfDataGridNode):
        (WebInspector.DOMStorageDataGrid.prototype._startEditing):
        (WebInspector.DOMStorageDataGrid.prototype._editingCommitted):
        (WebInspector.DOMStorageDataGrid.prototype._editingCancelled):
        (WebInspector.DOMStorageDataGrid.prototype.deleteSelectedRow):
        * inspector/front-end/DOMStorageItemsView.js:
        (WebInspector.DOMStorageItemsView.prototype.update):
        * inspector/front-end/DatabaseQueryView.js:
        (WebInspector.DatabaseQueryView.prototype._queryFinished):
        * inspector/front-end/DatabaseTableView.js:
        (WebInspector.DatabaseTableView.prototype._queryFinished):
        * inspector/front-end/inspector.js:
        (WebInspector._createPanels): updated string that comes from hiddenPanels to be "databases" or "storage"
        (WebInspector.showStoragePanel):
        (WebInspector.selectDatabase):
        (WebInspector.selectDOMStorage):
        (WebInspector.addDatabase):
        (WebInspector.addDOMStorage):

          Renamed some files and Updated Accordingly.

        * inspector/front-end/StoragePanel.js: Renamed from WebCore/inspector/front-end/DatabasesPanel.js.
        * inspector/front-end/Images/storageIcon.png: Renamed from WebCore/inspector/front-end/Images/databasesIcon.png.
        * inspector/front-end/WebKit.qrc: use new file names
        * inspector/front-end/inspector.css: use new images name and class names
        * inspector/front-end/inspector.html: use new file name
        * WebCore.gypi: use new file names

          Miscellaneous Updates.

        * English.lproj/localizedStrings.js: Updated Tooltip from "Databases" to "Storage"

2009-08-21  Maxime Simon  <simon.maxime@gmail.com>

        Reviewed by Oliver Hunt.

        [Haiku] Adding three font-specific files to WebCore:
        FontCacheHaiku.cpp, FontHaiku.cpp, and SimpleFontDataHaiku.cpp
        https://bugs.webkit.org/show_bug.cgi?id=28131

        * platform/graphics/haiku/FontCacheHaiku.cpp: Added.
        (WebCore::FontCache::platformInit):
        (WebCore::FontCache::getFontDataForCharacters):
        (WebCore::FontCache::getSimilarFontPlatformData):
        (WebCore::FontCache::getLastResortFallbackFont):
        (WebCore::FontCache::createFontPlatformData):
        (WebCore::FontCache::getTraitsInFamily):
        * platform/graphics/haiku/FontHaiku.cpp: Added.
        (charUnicodeToUTF8HACK):
        (WebCore::Font::canReturnFallbackFontsForComplexText):
        (WebCore::Font::drawGlyphs):
        (WebCore::Font::drawComplexText):
        (WebCore::Font::floatWidthForComplexText):
        (WebCore::Font::selectionRectForComplexText):
        (WebCore::Font::offsetForPositionForComplexText):
        * platform/graphics/haiku/SimpleFontDataHaiku.cpp: Added.
        (WebCore::SimpleFontData::platformInit):
        (WebCore::SimpleFontData::platformCharWidthInit):
        (WebCore::SimpleFontData::platformDestroy):
        (WebCore::SimpleFontData::smallCapsFontData):
        (WebCore::SimpleFontData::containsCharacters):
        (WebCore::SimpleFontData::determinePitch):
        (WebCore::SimpleFontData::platformWidthForGlyph):

2009-08-21  Philippe Beauchamp  <philippe.beauchamp@gmail.com>

        Reviewed by Adam Roben.

        Middle click panning icon is offset by 3 pixels
        https://bugs.webkit.org/show_bug.cgi?id=28611

        * platform/ScrollView.cpp:
        panIconSizeLength initialized to 20 instead of 16 to match icon dimension (2 pixels offset)
        * platform/win/CursorWin.cpp:
        (WebCore::middlePanningCursor):
        Hotspot initialized to (8,8) instead of (7,7) (one pixel offset)
        
2009-08-21  Laszlo Gombos  <laszlo.1.gombos@nokia.com>

        Reviewed by Eric Seidel.

        [Qt] Remove inspector resources for Symbian
        https://bugs.webkit.org/show_bug.cgi?id=28610

        Based on an idea from Simon Hausmann.

        * WebCore.pro:

2009-08-21  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Eric Seidel.

        Inspector: Remove Unused Variable
        https://bugs.webkit.org/show_bug.cgi?id=28616

        * inspector/front-end/Resource.js:
        (WebInspector.Resource.prototype._checkWarning):

2009-08-21  Joseph Pecoraro  <joepeck@webkit.org>

        Reviewed by Timothy Hatcher.

        Inspector: Console Array Formatter Shows Extra Properties
        https://bugs.webkit.org/show_bug.cgi?id=28615

        * inspector/front-end/ConsoleView.js:
        (WebInspector.ConsoleView.prototype._formatarray): do not ignore hasOwnProperties

2009-08-21  Beth Dakin  <bdakin@apple.com>

        Reviewed by Dan Bernstein.

        The CSS part of https://bugs.webkit.org/show_bug.cgi?id=27574 [CSS3 
        Backgrounds and Borders] Add support for the "contain" value for 
        background-size
        -and-
        https://bugs.webkit.org/show_bug.cgi?id=27573 [CSS3 Backgrounds and 
        Borders] Add support for the "cover" value for background-size

        Return contain or cover when appropriate, and otherwise do what we 
        used to do.
        * css/CSSComputedStyleDeclaration.cpp:
        (WebCore::CSSComputedStyleDeclaration::getPropertyCSSValue):

        Accept contain and cover as valid values for background-size.
        * css/CSSParser.cpp:
        (WebCore::CSSParser::parseFillProperty):

        Handle setting the size and the sizeLength if appropriate.
        * css/CSSStyleSelector.cpp:
        (WebCore::CSSStyleSelector::mapFillSize):

        Added new keywords contain and cover.
        * css/CSSValueKeywords.in:

        Use just sizeLength instead of size to match old behavior.
        * page/animation/AnimationBase.cpp:
        (WebCore::FillLayersPropertyWrapper::FillLayersPropertyWrapper):
        * rendering/RenderBoxModelObject.cpp:
        (WebCore::RenderBoxModelObject::calculateBackgroundSize):
        * rendering/RenderObject.cpp:
        (WebCore::mustRepaintFillLayers):

        The variable m_sizeType is an EBackgroundSize, and m_sizeLength is 
        a LengthSize (the equivalent of what m_size used to be). I got rid 
        of m_sizeSet and made isSizeSet() dynamic. I also defined a new 
        struct, FillSize that can be used to set or get m_size and 
        m_sizeLength both at once. 
        * rendering/style/FillLayer.cpp:
        (WebCore::FillLayer::FillLayer):
        (WebCore::FillLayer::operator=):
        (WebCore::FillLayer::operator==):
        (WebCore::FillLayer::fillUnsetProperties):
        * rendering/style/FillLayer.h:
        (WebCore::FillSize::FillSize):
        (WebCore::FillSize::operator==):
        (WebCore::FillSize::operator!=):
        (WebCore::FillLayer::sizeLength):
        (WebCore::FillLayer::size):
        (WebCore::FillLayer::isSizeSet):
        (WebCore::FillLayer::setSizeType):
        (WebCore::FillLayer::setSizeLength):
        (WebCore::FillLayer::setSize):
        (WebCore::FillLayer::clearSize):
        (WebCore::FillLayer::initialFillSizeType):
        (WebCore::FillLayer::initialFillSizeLength):
        (WebCore::FillLayer::initialFillSize):

        This is all boiler-plate stuff to adjust to the new size() vs. 
        sizeType() vs. sizeLength() distinction.
        * rendering/style/RenderStyle.h:
        (WebCore::InheritedFlags::backgroundSizeType):
        (WebCore::InheritedFlags::backgroundSizeLength):
        (WebCore::InheritedFlags::maskSize):
        (WebCore::InheritedFlags::setBackgroundSize):
        (WebCore::InheritedFlags::setBackgroundSizeLength):
        (WebCore::InheritedFlags::setMaskSize):

        Definition for EBackgroundSizeType.
        * rendering/style/RenderStyleConstants.h:
        (WebCore::):

2009-08-21  Ariya Hidayat  <ariya.hidayat@nokia.com>

        Not reviewed, build fix after r47580.

        [Qt] Adjust the files.

        * inspector/front-end/WebKit.qrc:

2009-08-20  Chris Fleizach  <cfleizach@apple.com>

        Reviewed by Darin Adler.

        Enable various "grouping" ARIA roles
        https://bugs.webkit.org/show_bug.cgi?id=28486

        Test: platform/mac/accessibility/aria-grouping-roles.html

        * accessibility/AccessibilityObject.h:
        * accessibility/AccessibilityRenderObject.cpp:
        * accessibility/mac/AccessibilityObjectWrapper.mm:
        * page/mac/WebCoreViewFactory.h:
        * platform/LocalizedStrings.h:
        * platform/mac/LocalizedStringsMac.mm:

2009-08-20  David Levin  <levin@chromium.org>

        Unreviewed trivial comment fix.

        Update a bug link in a comment due to bugzilla amnesia.

        * loader/CachedResource.cpp:
        (WebCore::CachedResource::setResourceToRevalidate):

2009-08-20  Albert J. Wong  <ajwong@chromium.org>

        Reviewed by David Levin.

        HTML5 media elements do not fire waiting events correctly
        https://bugs.webkit.org/show_bug.cgi?id=28335

        Fire the waiting event before seeking, and fix a case where firing of
        the seeked event is missed when the ready state is changed during
        a seek.

        Added video-waiting-seeking.html into manual tests because not
        all platforms allow seeking into non-buffered ranges.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::setReadyState): add support for
        waiting event when seeking.
        (WebCore::HTMLMediaElement::finishSeek): send seeked event
        whenever seeking finishes.
        (WebCore::HTMLMediaElement::mediaPlayerTimeChanged): dispatch to
        new function.
        * html/HTMLMediaElement.h:
        * manual-tests/video-waiting-seeking.html: Added.

2009-08-20  Dan Bernstein  <mitz@apple.com>

        Reviewed by John Sullivan.

        Fix more cases of
        <rdar://problem/7154521> Lots of "<Error>: doClip: empty path." spew in
        the console with certain content

        If the border box is empty, simply avoid painting instead of trying to
        clip to the empty path.

        * rendering/RenderBoxModelObject.cpp:
        (WebCore::RenderBoxModelObject::paintFillLayerExtended):
        * rendering/RenderReplaced.cpp:
        (WebCore::RenderReplaced::paint):
        * rendering/RenderWidget.cpp:
        (WebCore::RenderWidget::paint):

2009-08-20  Jeremy Orlow  <jorlow@chromium.org>

        Build fix.  Forgot a svn add for a patch I landed.  :-(

        * storage/SQLTransactionClient.cpp: Added.
        (WebCore::SQLTransactionClient::didCommitTransaction):
        (WebCore::SQLTransactionClient::didExecuteStatement):
        (WebCore::SQLTransactionClient::didExceedQuota):
        * storage/SQLTransactionClient.h: Added.

2009-08-20  Dumitru Daniliuc  <dumi@chromium.org>

        Reviewed by Dimitri Glazkov.

        Added a client to SQLTransaction. In addition to being a place to
        get notifications about certain events in a transaction, it is
        also an abstraction layer that allows us to plug in different
        implementations for each port for how transactions interract with
        the main DB. For example, WebCore's default implementation will
        make direct calls to DatabaseTracker's methods. At the same time,
        Chromium's implementation will send IPCs to the browser process
        whenever a transaction needs something from the main DB.

        All storage tests pass.

        https://bugs.webkit.org/show_bug.cgi?id=27967

        * GNUmakefile.am:
        * WebCore.gypi:
        * WebCore.pro:
        * WebCore.vcproj/WebCore.vcproj:
        * WebCore.xcodeproj/project.pbxproj:
        * WebCoreSources.bkl:
        * storage/Database.cpp:
        (WebCore::Database::transactionClient):
        * storage/Database.h:
        * storage/DatabaseThread.cpp:
        (WebCore::DatabaseThread::DatabaseThread):
        * storage/DatabaseThread.h:
        (WebCore::DatabaseThread::transactionClient):
        * storage/SQLTransaction.cpp:
        (WebCore::SQLTransaction::runCurrentStatement):
        (WebCore::SQLTransaction::deliverQuotaIncreaseCallback):
        (WebCore::SQLTransaction::postflightAndCommit):
        * storage/SQLTransactionClient.cpp: Added.
        * storage/SQLTransactionClient.h: Added.

2009-08-20  Brian Weinstein  <bweinstein@apple.com>

        Reviewed by Steve Falkenburg.

        Fix of <https://bugs.webkit.org/show_bug.cgi?id=24793>
        Auto scroll speed is faster than in IE, Firefox.
        
        Changed pan scrolling speed to match Firefox's algorithm.

        * rendering/RenderLayer.cpp:
        (WebCore::adjustedScrollDelta):
        (WebCore::RenderLayer::panScrollFromPoint):

2009-08-20  Stephen White  <senorblanco@chromium.org>

        Reviewed by Eric Seidel.

        Fix for assert in Chromium page cycler:  drawRect() was re-using
        an SkPaint, but not resetting it before calling
        PlatformGraphicsSkia::setupPaintForFilling() a second time.  This
        CL fixes drawRect(), and re-enables the assert.
        http://bugs.webkit.org/show_bug.cgi?id=28172
        http://crbug.com/19797

        Covered by Chromium page cycler tests.

        * platform/graphics/skia/PlatformContextSkia.cpp:
        (PlatformContextSkia::drawRect):
        (PlatformContextSkia::setupPaintCommon):

2009-08-20  Anders Carlsson  <andersca@apple.com>

        Reviewed by Dan Bernstein.

        <rdar://problem/7159016> Popup menus don't disappear when you click outside the window.
        
        Revert r47535 which introduced this.
        
        * platform/win/PopupMenuWin.cpp:
        (WebCore::PopupMenu::show):
        (WebCore::PopupWndProc):

2009-08-20  David Levin  <levin@chromium.org>

        Reviewed by Alexey Proskuryakov.

        Crashes on sites with lots of images
        https://bugs.webkit.org/show_bug.cgi?id=28473

        The problem is that m_resourceToRevalidate::m_isBeingRevalidated is false while
        CachedResource is still referring to it, so it may get deleted before
        Cache::revalidationSucceeded calls CachedResource::clearResourceToRevalidate.

        * loader/Cache.cpp:
        (WebCore::Cache::revalidateResource): Added assert to verify the resource
        being revalidated is physically in the cache.
        (WebCore::Cache::revalidationSucceeded): Changed to do one call to switch from the revalidating
        resource to the revalidated resource.  This allows for proper lifetime management of the
        revalidated resource. Added assert to verify that the revalidatingResource is in the cache.
        (WebCore::Cache::pruneDeadResources): Don't remove items from the cache that are in the
        process of being validated (or else they can get added twice: Once through the normal mechanism
        and then again during revalidateResource).

        * loader/CachedResource.cpp:
        (WebCore::CachedResource::CachedResource):
        (WebCore::CachedResource::isSafeToMakePurgeable):
        Changed m_isBeingRevalidated to m_proxyResource to allow finding out
        who the validating resource (or proxy) is.

        (WebCore::CachedResource::~CachedResource): Removed code to handle m_resourceToRevalidate
        being non-zero because this shouldn't be possible due to checks in canDelete. Added asserts
        as well.
        (WebCore::CachedResource::setResourceToRevalidate): Adjusted for the change to m_proxyResource
        and added a comment about the assert.
        (WebCore::CachedResource::clearResourceToRevalidate):
        Only clean up the resourceToRevalidate if it hasn't gotten a new proxy resource.
        * loader/CachedResource.h:
        (WebCore::CachedResource::setInCache): Don't clear m_proxyResource because the resource
        is still being referred to by it and the code it robust to this being switched to a new proxy
        resource without it being cleared first.
        (WebCore::CachedResource::canDelete): Changed m_isBeingRevalidated to m_proxyResource.

2009-08-20  Xiaomei Ji  <xji@chromium.org>

        Reviewed by Eric Seidel.

        Fix "Chromium RTL autocomplete popup is not layout correctly".
        https://bugs.webkit.org/show_bug.cgi?id=27889

        The complete fix of the issue consists 2 parts: the patch in webkit
        and the patch in Chromium's own code.

        This webkit patch only affects Chromium autofill. It
        1. introduces a new flag in WebCore::PopupContainerSettings to
           distinguish whether the width of the drop-down should be restricted
           or not.
           For autofill, the width of the drop-down is restricted to
           be the same as that of the input field (the new flag is set in
           Chromium's own code). But width is not restricted for <select> (same as before).
        2. introduce a new flag in WebCore::PopContainerSettings to
           indicate what heuristics to use when displaying text in drop-down menu.
           For autofill, use drop-down item's directionality to display drop-down items.
           Previously, drop-down item is displayed in the its first strong
           directional character's directionality.
           (drop-down item's directionality is set in Chromium's own code.
           It is set the same as the directionality of the element. 
           For autofill, it is the same directionality as that of the input field.)
           For <select>, still use the text's first strong directional character's
           directionality to display the text.


        Since the patch only affects the chromium client, not webcore part or
        other clients. No automatic tests is possible.

        * manual-tests/autofill-popup-width-and-item-direction.html: Added.
        * platform/chromium/PopupMenuChromium.cpp:
        (WebCore::):
        (WebCore::PopupListBox::paintRow): If list box width is restricted and 
        an item is longer to fit in a list box, truncate it and draw part of the text and append ellipses.
        (WebCore::PopupListBox::layout): Restrict width of list box if applicable.
        * platform/chromium/PopupMenuChromium.h: 
        (WebCore::PopupItem::PopupItem): style change.
        (WebCore::PopupContainerSettings::): Add 2 new flags in PopupContainerSetting to 
        distinguish whether to restrict width of list box and 
        in what directionality to display the text in drop-down.

2009-08-20  Brian Weinstein  <bweinstein@apple.com>

        Reviewed by Adele Peterson.

        Fix of <https://bugs.webkit.org/show_bug.cgi?id=28504>. 
        Pan Scrolling can scroll while showing the middlePanScroll icon.
        
        Fixed an off by one error between RenderLayer::panScrollFromPoint and EventHandler::updatePanScrollState. 
        In RenderLayer::panScrollFromPoint, we were setting the icon to be an arrow if the difference between the start
        of the pan scroll and the current mouseposition is > 15. However, in EventHandler::updatePanScrollState, we would
        set our amount to scroll to 0 only if the difference in mouse position is < 15. I made this check a <= 15, to fix
        the off by one error.

        * rendering/RenderLayer.cpp:
        (WebCore::RenderLayer::panScrollFromPoint):

2009-08-20  David Hyatt  <hyatt@apple.com>

        Reviewed by Dan Bernstein.

        Pull the code in layoutBlockChildren for handling a normal flow block child into a helper method,
        layoutBlockChild.

        * rendering/RenderBlock.cpp:
        (WebCore::RenderBlock::layoutBlockChildren):
        (WebCore::RenderBlock::layoutBlockChild):
        * rendering/RenderBlock.h:

2009-08-20  Brian Weinstein  <bweinstein@apple.com>

        Reviewed by Adam Roben.

        Made subframeForHitTargetNode a public static method, so WebView can call it
        during hit testing.

        * page/EventHandler.cpp:
        (WebCore::subframeForHitTestResult):
        (WebCore::EventHandler::subframeForTargetNode):
        * page/EventHandler.h:

2009-08-20  Brent Fulgham  <bfulgham@webkit.org>

        Rubberstamped by Kevin Ollivier.

        Check for null bundle before attempting to use it.

        * platform/network/curl/ResourceHandleManager.cpp:
        (WebCore::certificatePath): Add null check on return of
          CFBundleGetBundleWithIdentifier.

2009-08-20  David Hyatt  <hyatt@apple.com>

        Reviewed by Dan Bernstein.

        https://bugs.webkit.org/show_bug.cgi?id=28497, images and inline replaced elements don't propagate overflow properly on a line.

        Added fast/repaint/inline-block-overflow.html and updated another test.

        * rendering/InlineFlowBox.cpp:
        (WebCore::InlineFlowBox::placeBoxesHorizontally):
        (WebCore::InlineFlowBox::computeVerticalOverflow):
        Make sure to still propagate the border box of the replaced element as layout overflow when overflow clip is set on the
        replaced element.  Make sure to use the InlineBox x/y positions instead of the RenderBox x/y, since the position of the
        RenderBox has not been updated to the new values yet.
        
        * rendering/RenderLineBoxList.cpp:
        (WebCore::RenderLineBoxList::paint):
        Don't use the root line box's overflow.  Use the actual line box overflow values instead.  In the case of an inline
        with a layer, our overflow didn't propagate to the root line, so we always need to use our values.

        * rendering/RenderPartObject.cpp:
        (WebCore::RenderPartObject::layout):
        * rendering/RenderReplaced.cpp:
        (WebCore::RenderReplaced::layout):
        Make sure to clear shadow overflow when doing layout of replaced elements, so that we don't leave a stale overflow
        value around if a box-shadow goes away.

2009-08-20  Dmitry Titov  <dimich@chromium.org>

        Another attempt to fix Chromium build.

        * WebCore.gypi: now use the correct name of the image file.

2009-08-20  Dan Bernstein  <mitz@apple.com>

        Make the Windows build even fixeder

        * platform/graphics/win/GraphicsContextCGWin.cpp:
        (WebCore::GraphicsContextPlatformPrivate::flush):

2009-08-20  Dmitry Titov  <dimich@chromium.org>

        Not reviewed, Chromium build fix.

        * WebCore.gypi: add new Webinspector image files (localStorage.png and sessionStorage.png)

2009-08-20  Dan Bernstein  <mitz@apple.com>

        Windows build fix after the last change

        * platform/graphics/win/GraphicsContextCGWin.cpp:
        (WebCore::GraphicsContext::GraphicsContext):
        (WebCore::GraphicsContext::releaseWindowsContext):
        (WebCore::GraphicsContext::drawWindowsBitmap):

2009-08-20  Dan Bernstein  <mitz@apple.com>

        Reviewed by Geoffrey Garen.

        Replace many manually-released CFTypeRefs with RetainPtrs
        https://bugs.webkit.org/show_bug.cgi?id=28498

        * platform/graphics/cg/ColorCG.cpp:
        (WebCore::createCGColor):
        * platform/graphics/cg/GradientCG.cpp:
        (WebCore::Gradient::platformGradient):
        * platform/graphics/cg/GraphicsContextCG.cpp:
        (WebCore::GraphicsContext::platformContext):
        (WebCore::GraphicsContext::applyStrokePattern):
        (WebCore::GraphicsContext::applyFillPattern):
        (WebCore::GraphicsContext::setPlatformShadow):
        (WebCore::GraphicsContext::setURLForRect):
        * platform/graphics/cg/GraphicsContextPlatformPrivateCG.h:
        (WebCore::GraphicsContextPlatformPrivate::GraphicsContextPlatformPrivate):
        (WebCore::GraphicsContextPlatformPrivate::~GraphicsContextPlatformPrivate):
        * platform/graphics/cg/ImageBufferCG.cpp:
        (WebCore::ImageBuffer::ImageBuffer):
        * platform/graphics/cg/ImageCG.cpp:
        (WebCore::BitmapImage::checkForSolidColor):
        (WebCore::Image::drawPattern):
        * platform/graphics/cg/ImageSourceCG.cpp:
        (WebCore::ImageSource::setData):
        (WebCore::ImageSource::isSizeAvailable):
        (WebCore::ImageSource::frameSizeAtIndex):
        (WebCore::ImageSource::repetitionCount):
        (WebCore::ImageSource::createFrameAtIndex):
        (WebCore::ImageSource::frameDurationAtIndex):
        * platform/graphics/cg/PDFDocumentImage.cpp:
        (WebCore::PDFDocumentImage::dataChanged):
        * platform/graphics/cg/PathCG.cpp:
        (WebCore::createScratchContext):
        (WebCore::Path::contains):
        * platform/graphics/mac/FontCustomPlatformData.cpp:
        (WebCore::createFontCustomPlatformData):
        * platform/graphics/mac/GraphicsContextMac.mm:
        (WebCore::GraphicsContext::drawFocusRing):
        * platform/graphics/mac/ImageMac.mm:
        (WebCore::BitmapImage::getTIFFRepresentation):
        * platform/mac/ClipboardMac.mm:
        (WebCore::cocoaTypeFromMIMEType):
        (WebCore::MIMETypeFromCocoaType):
        * platform/mac/WebCoreNSStringExtras.mm:
        (stringEncodingForResource):
        * platform/network/mac/FormDataStreamMac.mm:
        (WebCore::advanceCurrentStream):
        (WebCore::setHTTPBody):
        * platform/text/mac/TextCodecMac.cpp:
        (WebCore::TextCodecMac::encode):

2009-08-20  Shinichiro Hamaji  <hamaji@chromium.org>

        Reviewed by Eric Seidel.

        Output actual values of counters in showTree
        https://bugs.webkit.org/show_bug.cgi?id=28481

        No new tests because this patch just improves debugging outputs.

        * rendering/CounterNode.cpp:
        (WebCore::showTreeAndMark):

2009-08-20  Eric Carlson  <eric.carlson@apple.com>

        Reviewed by NOBODY (build fix).

        Add file missed in last check-in.

        * html/HTMLAttributeNames.in:

2009-08-19  Timothy Hatcher  <timothy@apple.com>

        Adds new icons to the Web Inspector for Local Storage,
        Session Storage and Cookies.

        https://bugs.webkit.org/show_bug.cgi?id=28470

        Reviewed by Eric Seidel.

        * inspector/front-end/DatabasesPanel.js:
        (WebInspector.DatabasesPanel.prototype.addDOMStorage):
        (WebInspector.DOMStorageSidebarTreeElement):
        * inspector/front-end/Images/cookie.png:
        * inspector/front-end/Images/domStorage.png: Removed.
        * inspector/front-end/Images/localStorage.png: Added.
        * inspector/front-end/Images/sessionStorage.png: Added.
        * inspector/front-end/inspector.css:

2009-08-20  Eric Carlson  <eric.carlson@apple.com>

        Reviewed by Anders Carlsson.

        HTML5 media elements must fire 'loadend' progress event
        https://bugs.webkit.org/show_bug.cgi?id=28419

        * dom/EventNames.h:
            Define loadend.

        * html/HTMLMediaElement.cpp:
        (WebCore::HTMLMediaElement::parseMappedAttribute):
            Deal with onloadend.
        (WebCore::HTMLMediaElement::loadInternal):
            Post 'loadend' immediately after 'abort'.
        (WebCore::HTMLMediaElement::noneSupported):
            Post 'loadend' immediately after 'error'.
        (WebCore::HTMLMediaElement::mediaEngineError):
            Ditto.
        (WebCore::HTMLMediaElement::setNetworkState):
            Post 'loadend' immediately after 'load'.
        (WebCore::HTMLMediaElement::userCancelledLoad):
            Post 'loadend' immediately after 'abort'.

2009-08-20  Ryosuke Niwa  <rniwa@webkit.org>

        Reviewed by Darin Adler.

        REGESSION(r45316), Crash: WebKit crashes in Google Sites when indenting a table
        https://bugs.webkit.org/show_bug.cgi?id=28474

        This patch fixes a crash when indenting at right after a table.
        The bug was caused by Node* blockNode = enclosingBlock(endOfCurrentParagraph.deepEquivalent().node());
        where node() is equal to blockNode. Because blockNode is the enclosing block node, this patch changes it to
        enclosingBlock(endOfCurrentParagraph.deepEquivalent().node()->parentNode());

        Test: editing/execCommand/indent-right-after-table.html

        * editing/IndentOutdentCommand.cpp:
        (WebCore::IndentOutdentCommand::indentRegion): Fixed so that blockNode != endOfCurrentParagraph.deepEquivalent().node()

2009-08-20  Andrew Scherkus  <scherkus@chromium.org>

        Reviewed by David Levin.

        Render disabled mute button during an error or if no audio is present.

        https://bugs.webkit.org/show_bug.cgi?id=28475

        Covered by existing layout tests:
        media/video-controls-visible-audio-only.html
        media/video-no-audio.html

        * rendering/RenderThemeChromiumSkia.cpp:
        (WebCore::RenderThemeChromiumSkia::paintMediaMuteButton):

2009-08-20  Dan Bernstein  <mitz@apple.com>

        Reviewed by Darin Adler.

        <rdar://problem/7154605> Loading page with 1px wide <select> makes the
        toolbar go blank
        and
        <rdar://problem/7154521> Lots of "<Error>: doClip: empty path." spew in
        the console with certain content

        * rendering/RenderThemeMac.mm:
        (WebCore::RenderThemeMac::paintMenuListButtonGradients): Return early
        if the rectangle is empty. Use RenderStyle::getBorderRadiiForRect() to
        adjust the radii in case the sides of the rectangle are smaller than sum
        of the radii, so that the gradient background matches the border (which
        already uses getBorderRadiiForRect()). Check if bottomGradient is empty
        to avoid clipping to an empty path.
        (WebCore::RenderThemeMac::paintMenuListButton): Moved a
        GraphicContext::save() down to avoid a save/restore imbalance in the
        early return case.

        * rendering/RenderThemeSafari.cpp: Made the same changes.
        (WebCore::RenderThemeSafari::paintMenuListButtonGradients):
        (WebCore::RenderThemeSafari::paintMenuListButton):

2009-08-20  Jan Michael Alonzo  <jmalonzo@webkit.org>

        Reviewed by Gustavo Noronha.

        [Gtk][REGRESSION] XHR test failures after r45558
        https://bugs.webkit.org/show_bug.cgi?id=27143

        Disable sniffing if it's explicitly requested. Updated patch
        originally by Gustavo Noronha.

        * platform/network/soup/ResourceHandleSoup.cpp:
        (WebCore::statusWillBeHandledBySoup):
        (WebCore::gotHeadersCallback):
        (WebCore::contentSniffedCallback):
        (WebCore::gotChunkCallback):
        (WebCore::startHttp):

2009-08-20  Ariya Hidayat  <ariya.hidayat@nokia.com>

        Reviewed by Simon Hausmann.

        [Qt] Swap the pixels since QImage expect ARGB while ImageData
        stores them as RGBA.

        This fixes the fast/canvas/canvas-copyPixels.html test.

        * platform/graphics/qt/ImageBufferQt.cpp:
        (WebCore::putImageData):

2009-08-20  Christian Plesner Hansen  <christian.plesner.hansen@gmail.com>

        Reviewed by David Levin.

        [v8] Use atomic string caching for createElement
        Extend atomic string caching to createElement.  Fix a bug in idl
        parser that caused incorrect parsing if a function argument
        attribute list contained a c
