2002-12-11  Chris Blumenberg  <cblu@apple.com>

	Fixed: 3118430 - crash / loop trying to copy url of link to clipboard
	Fixed: 3122585 - REGRESSION: dragging links to the desktop or a Finder window does not do anything

        Reviewed by john.

	We were reusing the drag types from the previous drag pasteboard. For example, we would declare image types when dragging URLs. This would confuse the Finder, so location files weren't being created. This would occasional cause us to crash because we weren't providing the declared data. 

        * Misc.subproj/WebNSPasteboardExtras.h:
        * Misc.subproj/WebNSPasteboardExtras.m:
        (+[NSPasteboard _web_dragTypesForURL]): Added more types that we handle
        (-[NSPasteboard _web_writeURL:andTitle:withOwner:declareTypes:]): declares the provided types, writes URL and title
        (-[NSPasteboard _web_writeURL:andTitle:withOwner:]): call _web_writeURL:andTitle:withOwner:types: with _web_dragTypesForURL
        * Misc.subproj/WebNSViewExtras.h:
        * Misc.subproj/WebNSViewExtras.m:
        (-[NSView _web_dragPromisedImage:origin:URL:fileType:title:event:]): call _web_writeURL:andTitle:withOwner: types: plus images types

2002-12-10  Trey Matteson  <trey@apple.com>

	3092966 - going back goes to different page (can't go back to a POST page)

	We will rePOST data upon back/forward/refresh if our caches fail us.  The policy delegate
	gets a crack at confirming this operation.  Latent bugs where the policy delegate was double
	queried are fixed.  A bug in the b/f cursor when a page failed to load is fixed.

        Reviewed by Maciej.

        * English.lproj/StringsNotToBeLocalized.txt:  Usual suspects.
        * History.subproj/WebHistoryItem.h:  Add state for reposting forms.
        * History.subproj/WebHistoryItem.m:  Boilerplate changes for new state.
        (-[WebHistoryItem dealloc]):
        (-[WebHistoryItem setFormData:]):
        (-[WebHistoryItem setFormContentType:]):
        (-[WebHistoryItem formData]):
        (-[WebHistoryItem formContentType]):
        (-[WebHistoryItem description]):
        * WebView.subproj/WebController.m:
        (-[WebController _goToItem:withLoadType:]):  Tighten up an assert as I clarified an
	assumption as I worked through this task.
        * WebView.subproj/WebControllerPolicyDelegate.h:  New WebNavigationType's for back/forward,
	refresh, and repost.
        * WebView.subproj/WebFrame.m:
        (-[WebFrame loadRequest:]):  Eliminate extra copy of a request.
        (-[WebFrame reload]):  Eliminate extra copy of a request.  Setup triggeringAction properly
	if we're about to rePOST.
        * WebView.subproj/WebFramePrivate.h:  Started moving some private methods into the .m file.
        * WebView.subproj/WebFramePrivate.m:
        (-[WebFrame _createItem]):  Save form state with history items.
        (-[WebFrame _isLoadComplete]):  Fix up b/f cursor on page error before commit succeeds.
        (-[WebFrame _loadItem:fromItem:withLoadType:]):  Set up request to rePOST if that's what the
	HistoryItem demands.  Add call to _addExtraFieldsToRequest so we don't do a double
	query of the policy delegate.  Pre-flight the form post vs. WF cache to setup triggering
	action properly.
        (-[WebFrame _actionInformationForLoadType:isFormSubmission:event:originalURL:]):
	New utility method to help build action dict.
        (-[WebFrame _continueAfterNavigationPolicy:]):  Comment only.
        (-[WebFrame _loadURL:loadType:triggeringEvent:isFormSubmission:]):  Call new utility method
	instead (just code factoring).
        (-[WebFrame _postWithURL:data:contentType:triggeringEvent:]):  Call new utility method
	instead (just code factoring).  Add call to _addExtraFieldsToRequest so we don't do a double
	query of the policy delegate.
        (-[WebFrame _reloadAllowingStaleDataWithOverrideEncoding:]):  Whitespace only.
        (-[WebFrame _resetBackForwardListToCurrent]):  Utility routine to fix up b/f cursor on page error.
        (-[WebFrame _continueLoadRequestAfterNavigationPolicy:request:]):  Fix up b/f cursor on page
	error before commit succeeds.

2002-12-10  Darin Adler  <darin@apple.com>

        Reviewed by Maciej.

	- fixed 3124302 -- REGRESSION: Can't use directory.apple.com because
	frame resize bar intercepts mouse clicks

        * WebView.subproj/WebHTMLView.m: (-[WebHTMLView hitTest:]):
	Don't steal clicks for views that are inside nested WebViews.
        This isn't the real fix, but it's good enough for now. The real fix will be in WebCore.

2002-12-10  Darin Adler  <darin@apple.com>

	- fixed fix for 3124081 -- REGRESSION: partial progress is left in address field after download

        Reviewed by Chris.

	Need to move it down one line so the data source is clear before callback.

        * WebView.subproj/WebMainResourceClient.m:
        (-[WebMainResourceClient interruptForPolicyChangeAndKeepLoading:]):
	Do the _clearProvisionalDataSource before the locationChangeDone: callback.

2002-12-10  John Sullivan  <sullivan@apple.com>

	Fixed more "Alexander"s that were lurking in places I forgot 
	to look before.

        Reviewed by Darin

        * Makefile.am:
	"rm -rf $(SYMROOTS)/Safari.app/Frameworks/WebKit.framework"

2002-12-10  Darin Adler  <darin@apple.com>

	- fixed 3124081 -- REGRESSION: partial progress is left in address field after download

        Reviewed by Chris.

        * WebView.subproj/WebMainResourceClient.m:
        (-[WebMainResourceClient interruptForPolicyChangeAndKeepLoading:]):
	Put in code to call the locationChangeDone: method on the location change delegate if
	keepLoading is YES. Since the data source is not finished loading WebFrame won't do it.

2002-12-10  Chris Blumenberg  <cblu@apple.com>

	Fixed: 3124079 - REGRESSION: Downloads never complete

        Reviewed by darin.

        * WebView.subproj/WebMainResourceClient.m:
        (-[WebMainResourceClient handleDidFinishLoading:]): release and set to nil the download handler after calling [super handleDidFinishLoading:h]

2002-12-10  Richard Williamson   <rjw@apple.com>

        Fixed 3115427.  Page now draws instantly instead of 20 seconds.
        I added the substitution font we get from the appkit to the character to glyph
        cache.
        
        Fixed early return optimization from letter forming function.  It was too
        eager to return!
        
        Reviewed by mjs.

        * Misc.subproj/WebUnicode.m:
        (shapedString):
        * WebCoreSupport.subproj/WebTextRenderer.h:
        * WebCoreSupport.subproj/WebTextRenderer.m:
        (glyphForCharacter):
        (glyphForUnicodeCharacter):
        (widthForGlyph):
        (widthForCharacter):
        (_fontContainsString):
        (-[WebTextRenderer substituteFontForString:families:]):
        (-[WebTextRenderer _computeWidthForSpace]):
        (-[WebTextRenderer _floatWidthForCharacters:stringLength:fromCharacterPosition:numberOfCharacters:withPadding:applyRounding:attemptFontSubstitution:widths:fonts:glyphs:numGlyphs:letterSpacing:wordSpacing:fontFamilies:]):
        (-[WebTextRenderer extendUnicodeCharacterToGlyphMapToInclude:]):
        (-[WebTextRenderer updateGlyphEntryForCharacter:glyphID:font:]):
        (-[WebTextRenderer extendCharacterToGlyphMapToInclude:]):
        (-[WebTextRenderer extendGlyphToWidthMapToInclude:]):

2002-12-10  John Sullivan  <sullivan@apple.com>

	- tweaked the API of WebBookmarkImporter while implementing
	real "Import IE Favorites" UI

        Reviewed by Ken

        * Bookmarks.subproj/WebBookmarkImporter.h:
	fixed a typo in a constant
        * Bookmarks.subproj/WebBookmarkImporter.m:
        (-[WebBookmarkImporter initWithPath:]):
	Don't pass a group here. This method now creates the topBookmark
	(as it was doing before) but does not attempt to insert it
	anywhere. It's up to the client to fetch the topBookmark and do
	something with it. Also, don't name the new folder here; leave
	that to the caller also.

        * English.lproj/Localizable.strings:
	kept this file up to date

2002-12-10  Darin Adler  <darin@apple.com>

        Reviewed by John.

	- fixed 3108912 -- onclick handlers not supported on form elements

        * WebView.subproj/WebHTMLView.m: (-[WebHTMLView hitTest:]):
	Take over hit testing so that all clicks on subviews are handled by the WebHTMLView.
	WebCore now handles getting the mouse events to the subviews after passing
	the events through the DOM.

2002-12-09  Maciej Stachowiak  <mjs@apple.com>

        Reviewed by Trey.

	- fixed 3123057 - SJ: DHTML doesn't always work on http://www.pixar.com/howwedoit/
	
        * WebView.subproj/WebFramePrivate.m:
        (-[WebFrame _loadURL:loadType:triggeringEvent:isFormSubmission:]):
	Treat a click on a link to the same URL with an anchor as a scroll
	to anchor, not a same URL load.
        (-[WebFrame _continueFragmentScrollAfterNavigationPolicy:request:]): Avoid
	adding the same anchor URL to the back/forward list many times.

2002-12-09  Darin Adler  <darin@apple.com>

        Reviewed by Maciej.

	- fixed 3028664 -- change user agent string to include application name and version

        * WebView.subproj/WebController.m:
        (-[WebController setApplicationNameForUserAgent:]): Remove locking, unneeded since we changed
	how WebFoundation handles user agent.
        (-[WebController setCustomUserAgent:]): Ditto.
        (-[WebController resetUserAgent]): Ditto.
        (-[WebController userAgentForURL:]): Remove locking. Also add new algorithm for computing the
	user agent which takes the preferred language into account, and incorporates the WebKit version
	and the application name.

        * WebView.subproj/WebControllerPrivate.h: No need for a lock.
        * WebView.subproj/WebControllerPrivate.m:
        (-[WebControllerPrivate init]): Don't create a lock.
        (-[WebControllerPrivate dealloc]): Don't release a lock.

        * WebKit.pbproj/project.pbxproj: Bump versions to 0.8 and 35u.
	* English.lproj/InfoPlist.strings: In here too.

        * English.lproj/StringsNotToBeLocalized.txt: Updated for these and other recent changes.

2002-12-09  Richard Williamson   <rjw@apple.com>

        Many changes for b/f list.
        1.  Always attempt to cache snap back items.
        2.  Lazily release resources from page cache.  This garners gains on the PLT (and presumably iBench) tests, both for uncached.
        3.  Set the page cache size to 4 (+ snap back items).  After releasing resources we hover around 28MB footprint.  Closing windows releases all resources.
        4.  Turn on the back/forward cache by default.  The menu item still allows you to toggle b/f on and off.  Useful when conducting speed comparison in the PLT.
        5.  Addition of lazy update to PLT memory statistics to show footprint after lazy release of page cache resources.
        6.  Delayed to leak detector to account for lazy release of resources.
        7.  A change when saving a page to back/forward cache to clear and restore the documents root renderer.  Without this fix pages would appear to 'flicker' more when content arrived.
        8.  A change to ensure a layout when restoring a page from the b/f cache.  Without this fix scrollbars wouldn't appear correctly.
        9.  A change to ensure that khtmlview layout and paint timers are unscheduled when a page is placed in the b/f cache.
        10.  A fix to decouple of khtmlview from it's part when placed in the b/f cache.  This fixed a crash caused by inappropriate deference of the part when a page cache item was released.
        11.  A comment in KHTMLPageCache.h explaining the that our page cache is not the same as the khtml page cache.  (Their cache just cached the html source.)
        12.  Reapply styles when loading page from cache.  This ensures that visited link get the appropriate style.

        Reviewed by kocienda.

        * History.subproj/WebBackForwardList.m:
        (+[WebBackForwardList pageCacheSize]):
        (+[WebBackForwardList setUsesPageCache:]):
        (+[WebBackForwardList usesPageCache]):
        * History.subproj/WebHistoryItem.h:
        * History.subproj/WebHistoryItem.m:
        (-[WebHistoryItem setAlwaysAttemptToUsePageCache:]):
        (-[WebHistoryItem alwaysAttemptToUsePageCache]):
        (+[WebHistoryItem _invalidateReleaseTimer]):
        (-[WebHistoryItem _scheduleRelease]):
        (+[WebHistoryItem _releaseAllPendingPageCaches]):
        (-[WebHistoryItem _releasePageCache:]):
        (-[WebHistoryItem setHasPageCache:]):
        (-[WebWindowWatcher windowWillClose:]):
        * WebView.subproj/WebDataSourcePrivate.h:
        * WebView.subproj/WebDataSourcePrivate.m:
        (-[WebDataSource _startLoading:]):
        (-[WebDataSource _commitIfReady:]):
        (-[WebDataSource _loadingFromPageCache]):
        * WebView.subproj/WebDynamicScrollBarsView.h:
        * WebView.subproj/WebFramePrivate.h:
        * WebView.subproj/WebFramePrivate.m:
        (-[WebFrame _purgePageCache]):
        (+[WebFrame _timeOfLastCompletedLoad]):
        (-[WebFrame _setState:]):
        (-[WebFrame _opened]):
        (-[WebFrame _continueLoadRequestAfterNavigationPolicy:request:]):
        * WebView.subproj/WebPreferences.m:
        (+[WebPreferences load]):

2002-12-09  Darin Adler  <darin@apple.com>

        Reviewed by Chris.

	- fixed 3122608 -- REGRESSION: Downloads can't be cancelled

	When I fixed the leak for other categories of policy interruption, I messed
	things up for downloads. Added new parameters to handle this right.

        * WebView.subproj/WebBaseResourceHandleDelegate.h: Remove isDownload flag.
        * WebView.subproj/WebBaseResourceHandleDelegate.m:
        (-[WebBaseResourceHandleDelegate isDownload]): Return NO, override in subclass.
        (-[WebBaseResourceHandleDelegate handle:didReceiveResponse:]): Call isDownload
	method instead of looking at flag directly.

        * WebView.subproj/WebControllerPrivate.h: Add complete: parameter to _mainReceivedError:.
        * WebView.subproj/WebControllerPrivate.m:
        (-[WebController _mainReceivedError:fromDataSource:complete:]): If complete is NO, then
	don't mark the primary load as complete.
        * WebView.subproj/WebMainResourceClient.m:
        (-[WebMainResourceClient isDownload]): Added. Returns YES if downloadHandler is non-nil.
        (-[WebMainResourceClient receivedError:complete:]): Added complete parameter. Call the
	_setPrimaryLoadComplete: method in the download case (fixes a possible leak), and pass
	the complete parameter through to the controller.
        (-[WebMainResourceClient cancel]): Pass complete:YES.
        (-[WebMainResourceClient interruptForPolicyChangeAndKeepLoading:]): Added the keepLoading
	flag, and pass complete:!keepLoading.
        (-[WebMainResourceClient stopLoadingForPolicyChange]): Pass keepLoading:NO.
        (-[WebMainResourceClient continueAfterContentPolicy:response:]): Pass keepLoading:YES,
	and remove the call to the now-obsolete setIsDownload:.
        (-[WebMainResourceClient handle:didFailLoadingWithError:]): Pass complete:YES.

2002-12-08  Darin Adler  <darin@apple.com>

        Reviewed by Don and Dave.

	- fixed 3120578 -- REGRESSION: going to about:blank creates null view

	This part of the fix makes sure that a renderer is created, even when there are no bytes
	of data passed through. This makes the empty document about:blank case work just like the
	"document with just whitespace in it case". There's another part of the fix in WebCore that
	takes care of the remaining problem. 

        * WebView.subproj/WebHTMLRepresentation.m:
        (-[WebHTMLRepresentation finishedLoadingWithDataSource:]):
	Call receivedData:withDataSource: on the bridge with nil for the data. It would be even more
	elegant to add a new call for the case where we finish, but it's not necessary, since the
	existing receivedData: call does all the right things if passed nil.

        * WebView.subproj/WebDataSourcePrivate.m: (-[WebDataSource _finishedLoading]):
	Call finishedLoadingWithDataSource: here, to make sure it's done after committing.	
	This parallels what we already do for the didReceiveData call.
        * WebView.subproj/WebMainResourceClient.m: (-[WebMainResourceClient handleDidFinishLoading:]):
	Remove the call to finishedLoadingWithDataSource: because it's handled by _finishedLoading now.
	This parallels what we already do for the didReceiveData call.

	- fixed long standing problem where resizing could make you see a "null view"

        * WebView.subproj/WebView.m:
        (-[WebView drawRect:]): Add a "paint cyan" feature in development builds.
	Null view problems are particularly hard to debug without something like this,
	and we don't care if development builds are slightly slower. No change in deployment.
        (-[WebView setFrameSize:]): Tell the scroll view to draw the background if we are
	resized. We can't do our "let the old bits show through" thing any more if we have to
	redraw because of resizing.

	- other changes

        * WebKit.pbproj/project.pbxproj: Remove the old -DAPPLE_CHANGES and -DHAVE_CONFIG_H that we
        once needed when WebKit used to compile  C++ headers from the KHTML part of WebCore.
        We haven't needed those for ages. Also sort things a bit, using the new Electron feature for
	sorting lists of files alphabetically, and some by hand.

        * English.lproj/StringsNotToBeLocalized.txt: Update for recent changes.

2002-12-08  Chris Blumenberg  <cblu@apple.com>

	Fixed: 3121627 - REGRESSION: partial progress is left in address field after download

        Reviewed by: darin

	In WebMainResourceClient, make sure to always call receivedError before _clearProvisionalDataSource so that
	receivedError works. This is done in multiple places, so I factored this out into one method interuptForPolicyChange.

        * WebView.subproj/WebControllerPrivate.m:
        (-[WebController _mainReceivedError:fromDataSource:]): added asserts for nil error, dataSource and frame
        * WebView.subproj/WebMainResourceClient.m:
        (-[WebMainResourceClient interruptForPolicyChange]): renamed from notifyDelegatesOfInterruptionByPolicyChange because it now also sets the provisionalDataSource on the frame to nil. 
        (-[WebMainResourceClient stopLoadingForPolicyChange]): call interruptForPolicyChange, stop load
        (-[WebMainResourceClient continueAfterContentPolicy:response:]): call interruptForPolicyChange

2002-12-06  Trey Matteson  <trey@apple.com>

	Clean up some printfs.  Use WebKitLogPageCache for page cache info.

        Reviewed by: rjw

        * WebView.subproj/WebFramePrivate.m:
        (-[WebFrame _transitionToCommitted:]):
        (-[WebFrame _purgePageCache]):
        (-[WebFrame _setState:]):
        (-[WebFrame _continueLoadRequestAfterNavigationPolicy:request:]):

2002-12-06  Trey Matteson  <trey@apple.com>

	3118584 - implement desired behavior for load - reload - b/f
	3119241 - page cache needs to be refreshed after reload
	3118096 - isTargetItem:NO saved to disk with every bookmark

	The most noticeable changes are the addition of the "Same" loadType, and that reload
	does not restore form state.  3119241 was noticed in passing, and is related.
	3118096 is a nit with a possible small perf benefit.

        Reviewed by: rjw

        * History.subproj/WebHistoryItem.h:
        * History.subproj/WebHistoryItem.m:
        (-[WebHistoryItem dealloc]):  New originalURL field.
        (-[WebHistoryItem originalURL]):  New getter.
        (-[WebHistoryItem setOriginalURL:]):  New setter.
        (-[WebHistoryItem dictionaryRepresentation]):  Dont save isTarget.
        (-[WebHistoryItem initFromDictionaryRepresentation:]):  Dont save isTarget.
        * WebView.subproj/WebFrame.m:
        (-[WebFrame loadRequest:]):  Test for going to same URL, invoke loadTypeSame case.
        * WebView.subproj/WebFramePrivate.h:  Add loadTypeSame
        * WebView.subproj/WebFramePrivate.m:
        (-[WebFrame _addBackForwardItemClippedAtTarget:]):  Remove a line of dead code.
        (-[WebFrame _createItem]):  Set originalURL when item is created.
        (-[WebFrame _transitionToCommitted:]):  For loadTypeSame, clear page cache
        (-[WebFrame _purgePageCache]):  Added logging.
        (-[WebFrame _setState:]):  Don't add to page cache if doing a reload.
        (-[WebFrame _isLoadComplete]):  LoadTypeSame is a NOP.
        (-[WebFrame _loadItem:fromItem:withLoadType:]):  LoadTypeSame is an ASSERT.
        (-[WebFrame _loadURL:loadType:triggeringEvent:isFormSubmission:]):  In
	the LoadTypeSame case load from origin and never do anchor nav.  If asked to load
	the same URL, invoke LoadTypeSame case.
        (-[WebFrame _loadURL:intoChild:]):  Latent bug: WebFrameLoadTypeReloadAllowingStaleData
	should restore child frame content like reload does.
        (-[WebFrame _itemForRestoringDocState]):  Prevent form state restore on reload and loadSame.
        (-[WebFrame _shouldTreatURLAsSameAsCurrent:]):  New utility function.

2002-12-06  Maciej Stachowiak  <mjs@apple.com>

        Reviewed by: Darin Adler

	- made framework embedding work correctly with buildit

        * WebKit.pbproj/project.pbxproj: Give framework a relative
	install path, don't install it the normal way, and copy it
	manually to /AppleInternal/Library/Frameworks if installing. Also
	look for other frameworks in
	${DSTROOT}/AppleInternal/Library/Frameworks.

2002-12-05  Darin Adler  <darin@apple.com>

        Reviewed by Trey.

	- fixed 3103691 -- assertion in WebHTMLView addMouseMovedObserver at versiontracker

        * WebView.subproj/WebHTMLView.m:
        (-[WebHTMLView addMouseMovedObserver]): Instead of asserting, do the checks here to
	determine if the observer should be installed.
        (-[WebHTMLView viewDidMoveToWindow]): Remove checks, since addMouseMovedObserver now checks.
        (-[WebHTMLView windowDidBecomeMain:]): Remove checks, since addMouseMovedObserver now checks.

2002-12-05  Richard Williamson   <rjw@apple.com>

        Don't ceil spaces if not a fixed pitch font.  This make sites
        that have hard coded block widths have less wrapping beyond what the
        designer expected.  Fixes 3117225.
        
        Reviewed by: mjs

        * WebCoreSupport.subproj/WebTextRenderer.h:
        * WebCoreSupport.subproj/WebTextRenderer.m:
        (widthForGlyph):
        (-[WebTextRenderer _computeWidthForSpace]):
        (-[WebTextRenderer initWithFont:]):
        (-[WebTextRenderer _floatWidthForCharacters:stringLength:fromCharacterPosition:numberOfCharacters:withPadding:applyRounding:attemptFontSubstitution:widths:fonts:glyphs:numGlyphs:letterSpacing:wordSpacing:fontFamilies:]):

2002-12-05  Chris Blumenberg  <cblu@apple.com>

	Added WebDocumentText protocol. Made WebHTMLView and WebTextView implement it.

        Reviewed by: rjw

        * WebView.subproj/WebController.m:
        (-[WebController supportsTextEncoding]): check if protocol is WebDocumentText
        * WebView.subproj/WebDocument.h:
        * WebView.subproj/WebHTMLView.h:
        * WebView.subproj/WebHTMLView.m:
        (-[WebHTMLView hasSelection]): call selectedString
        (-[WebHTMLView takeFindStringFromSelection:]): call selectedString
        (-[WebHTMLView selectAll:]): call selectAll
        (-[WebHTMLView string]): part of WebDocumentText protocol
        (-[WebHTMLView attributedString]): part of WebDocumentText protocol
        (-[WebHTMLView selectedString]): part of WebDocumentText protocol
        (-[WebHTMLView selectedAttributedString]): part of WebDocumentText protocol
        (-[WebHTMLView selectAll]): part of WebDocumentText protocol
        (-[WebHTMLView deselectAll]): part of WebDocumentText protocol
        * WebView.subproj/WebHTMLViewPrivate.m:
        (-[WebHTMLView _writeSelectionToPasteboard:]): call selectedAttributedString
        * WebView.subproj/WebTextView.h:
        * WebView.subproj/WebTextView.m:
        (-[WebTextView string]): part of WebDocumentText protocol
        (-[WebTextView attributedString]): part of WebDocumentText protocol
        (-[WebTextView selectedString]): part of WebDocumentText protocol
        (-[WebTextView selectedAttributedString]): part of WebDocumentText protocol
        (-[WebTextView selectAll]): part of WebDocumentText protocol
        (-[WebTextView deselectAll]): part of WebDocumentText protocol

2002-12-05  Darin Adler  <darin@apple.com>

        Reviewed by Richard.

	- fixed 3107240 -- world leak: reproducible, trying to open TIFF file

        * WebView.subproj/WebMainResourceClient.m:
        (-[WebMainResourceClient notifyDelegatesOfInterruptionByPolicyChange]):
	Send error to the delegate using receivedError: rather than directly.
	This results in the frame properly stopping the load and fixes the leak.

2002-12-05  Darin Adler  <darin@apple.com>

        Reviewed by Chris.

        * Downloads.subproj/WebDownloadHandler.m: (-[WebDownloadHandler initWithDataSource:]):
	Add WebGZipDecoder to the list.

        * Downloads.subproj/WebGZipDecoder.h: Finished this.
        * Downloads.subproj/WebGZipDecoder.m: Finished this.

        * English.lproj/StringsNotToBeLocalized.txt: Updated for recent changes.

2002-12-05  Maciej Stachowiak  <mjs@apple.com>

        Reviewed by: Darin

        * English.lproj/InfoPlist.strings: removed letters from
	CFBundleShortVersionString to make buildit happy.

=== Alexander-35 ===

2002-12-05  Darin Adler  <darin@apple.com>

        Reviewed by Ken.

	- fixed 3118647 -- REGRESSION: click policy no longer works

        * WebView.subproj/WebFramePrivate.m:
        (-[WebFrame _actionInformationForNavigationType:event:originalURL:]):
	Allow mouse up events too. Those are usually the ones that trigger navigation.

2002-12-04  Darin Adler  <darin@apple.com>

        Reviewed by Maciej.

	- fixed assert when you choose an item from a menu, for example, and that navigates

        * WebView.subproj/WebFramePrivate.m:
        (-[WebFrame _actionInformationForNavigationType:event:originalURL:]):
	If the event is over some other element, just don't include the element info.

2002-12-04  Chris Blumenberg  <cblu@apple.com>

	Fixed: 3116294 - Need "Reload" feature in Downloads window

        Reviewed by: rjw

        * WebKit.pbproj/project.pbxproj: made WebFramePrivate.h private so that WebBrowser can call _downloadRequest:toPath:
        * WebView.subproj/WebFramePrivate.m:
        (-[WebFrame _loadDataSource:withLoadType:]): commented out assert that complains about lack of WebView. Long-term solution is to catch this earlier and have a lone datasource download mechanism 3118355.

2002-12-04  Trey Matteson  <trey@apple.com>

	3097585 - Crash in -[WebFrame(WebPrivate) _isLoadComplete] at result of google image search

	The root of this problem was that we would detach child frames by calling detach
	on them all, then clearing the whole array.  This would fail because detaching a
	frame might have to stop a load, which calls checkLoadComplete, which visits the
	entire frame tree.  But if a previously detached child is still sitting in that
	tree, we end up with an assertion failure.  The solution is to remove the kids as
	they are detached.

        Reviewed by: Darin Adler

        * WebView.subproj/WebFramePrivate.m:
        (-[WebFrame _createItem]):   Method rename (a nit I missed from an earlier change)
        (-[WebFrame _createItemTreeWithTargetFrame:clippedAtTarget:]):  Method rename
        (-[WebFrame _detachChildren]):   new method to do detaching right
        (-[WebFrame _detachFromParent]):  call new method
        (-[WebFrame _setDataSource:]):  call new method
        (-[WebFrame _transitionToCommitted:]):    Method rename

2002-12-04  Darin Adler  <darin@apple.com>

        Reviewed by Trey and Maciej.

	- fixed 3117558 -- Assertion failure in KWQKHTMLPart::slotData after typing "amazon.com" twice
	- update NSEvent handling in preparation for NSView mouse event handling going through WebCore

        * WebView.subproj/WebFramePrivate.m:
        (-[WebFrame _loadItem:fromItem:withLoadType:]): Added FIXME comments about matching the _loadURL
	case more closely.
        (-[WebFrame _actionInformationForNavigationType:event:originalURL:]): Only use the event if it's
	a mouse down event. This prevents trouble when we have other kinds of events coming through.
        (-[WebFrame _continueFragmentScrollAfterNavigationPolicy:request:]): Call the new scrollToAnchorWithURL:
	instead of openURL:. This fixes the assertion failure in the bug above.
        (-[WebFrame _loadURL:loadType:triggeringEvent:isFormSubmission:]): Update checks here to more closely
	match the ones in KHTMLPart::openURL that we are replacing. Add more comments.

        * WebView.subproj/WebHTMLView.m: (-[WebHTMLView hitTest:]): Function to intercept all clicks at the
	WebHTMLView level, disabled for now because we are not yet ready.

	- started a gzip download decoder, not yet hooked up

        * Downloads.subproj/WebGZipDecoder.h: Added.
        * Downloads.subproj/WebGZipDecoder.m: Added.
        * WebKit.pbproj/project.pbxproj: Add WebGZipDecoder and zlib.

	- other changes

        * Panels.subproj/WebAuthenticationPanel.m: Fixed screwed-up indentation.

2002-12-04  Richard Williamson   <rjw@apple.com>

        Cache the fallback font in the same way we cache other
        fonts.
        
        Reviewed by: Darin

        * WebCoreSupport.subproj/WebTextRendererFactory.h:
        * WebCoreSupport.subproj/WebTextRendererFactory.m:
        (-[WebTextRendererFactory fallbackFontWithTraits:size:]):
        (-[WebTextRendererFactory fontWithFamilies:traits:size:]):
        (-[WebTextRendererFactory cachedFontFromFamily:traits:size:]):

2002-12-04  Richard Williamson   <rjw@apple.com>

        Fixed massive performance regression.
        We were leaking WebFontCacheKey.
        Added a cache of missing fonts to avoid
        expensive appkit lookup.
        
        Reviewed by: Maciej

        * WebCoreSupport.subproj/WebTextRendererFactory.m:
        (-[WebTextRendererFactory cachedFontFromFamily:traits:size:]):
        (-[WebTextRendererFactory cachedFontFromFamilies:traits:size:]):

2002-12-03  Darin Adler  <darin@apple.com>

	- fixed 3117193 -- REGRESSION: Hang on Hixie's weblog

        Reviewed by Maciej.

        * WebCoreSupport.subproj/WebTextRenderer.m:
        (-[WebTextRenderer substituteFontForString:families:]):
	Do the operation on the whole string at once instead of a character at a time.
        I decided to do this rather than correct the bug in the character-at-a-time version.

== Rolled over to ChangeLog-2002-12-03 ==
