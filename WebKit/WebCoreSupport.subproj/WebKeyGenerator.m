//
//  WebKeyGenerator.m
//  WebKit
//
//  Created by Chris Blumenberg on Thu Nov 20 2003.
//  Copyright (c) 2003 Apple Computer, Inc. All rights reserved.
//

#import <WebKit/WebKeyGenerator.h>

#import <WebKit/WebAssertions.h>
#import <WebKit/WebLocalizableStrings.h>

#ifdef USE_NEW_KEY_GENERATION
#import <WebKit/WebNewKeyGeneration.h>
#else 
#import <WebKit/WebKeyGeneration.h>
#endif

@implementation WebKeyGenerator

+ (void)createSharedGenerator
{
    if (![self sharedGenerator]) {
        [[[self alloc] init] release];
    }
    ASSERT([[self sharedGenerator] isKindOfClass:self]);
}

- (void)dealloc
{
    [strengthMenuItemTitles release];
    [super dealloc];
}

- (NSArray *)strengthMenuItemTitles
{
    if (!strengthMenuItemTitles) {
        strengthMenuItemTitles = [[NSArray alloc] initWithObjects:
            UI_STRING("2048 (High Grade)", "Menu item title for KEYGEN pop-up menu"),
            UI_STRING("1024 (Medium Grade)", "Menu item title for KEYGEN pop-up menu"),
            UI_STRING("512 (Low Grade)", "Menu item title for KEYGEN pop-up menu"), nil];
    }
    return strengthMenuItemTitles;
}

- (NSString *)signedPublicKeyAndChallengeStringWithStrengthIndex:(unsigned)index challenge:(NSString *)challenge pageURL:(NSURL *)pageURL
{    
    // This switch statement must always be synced with the UI strings returned by strengthMenuItemTitles.
    UInt32 keySize;
    switch (index) {
        case 0:
            keySize = 2048;
            break;
        case 1:
            keySize = 1024;
            break;
        case 2:
            keySize = 512;
            break;
        default:
            return nil;
    }
    
    NSString *keyDescription = [NSString stringWithFormat:UI_STRING("Key from %@", "name of keychain key generated by the KEYGEN tag"), [pageURL host]];
    return [(NSString *)signedPublicKeyAndChallengeString(keySize, (CFStringRef)challenge, (CFStringRef)keyDescription) autorelease];
}

- (WebCertificateParseResult)addCertificatesToKeychainFromData:(NSData *)data
{
    return addCertificatesToKeychainFromData([data bytes], [data length]);
}

@end
