/****************************************************************************
** KDOM::DataSlave meta object code from reading C++ file 'KDOMDataSlave.h'
**
** Created: Thu Dec 16 18:31:43 2004
**      by: The Qt MOC ($Id$)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#undef QT_NO_COMPAT
#include "KDOMDataSlave.h"
#include <qmetaobject.h>
#include <qapplication.h>

#include <private/qucomextra_p.h>
#if !defined(Q_MOC_OUTPUT_REVISION) || (Q_MOC_OUTPUT_REVISION != 26)
#error "This file was generated using the moc from 3.3.3. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

const char *KDOM::DataSlave::className() const
{
    return "KDOM::DataSlave";
}

QMetaObject *KDOM::DataSlave::metaObj = 0;
static QMetaObjectCleanUp cleanUp_KDOM__DataSlave( "KDOM::DataSlave", &KDOM::DataSlave::staticMetaObject );

#ifndef QT_NO_TRANSLATION
QString KDOM::DataSlave::tr( const char *s, const char *c )
{
    if ( qApp )
	return qApp->translate( "KDOM::DataSlave", s, c, QApplication::DefaultCodec );
    else
	return QString::fromLatin1( s );
}
#ifndef QT_NO_TRANSLATION_UTF8
QString KDOM::DataSlave::trUtf8( const char *s, const char *c )
{
    if ( qApp )
	return qApp->translate( "KDOM::DataSlave", s, c, QApplication::UnicodeUTF8 );
    else
	return QString::fromUtf8( s );
}
#endif // QT_NO_TRANSLATION_UTF8

#endif // QT_NO_TRANSLATION

QMetaObject* KDOM::DataSlave::staticMetaObject()
{
    if ( metaObj )
	return metaObj;
    QMetaObject* parentObject = QObject::staticMetaObject();
    static const QUParameter param_slot_0[] = {
	{ "job", &static_QUType_ptr, "KIO::Job", QUParameter::In },
	{ "data", &static_QUType_varptr, "\x1d", QUParameter::In }
    };
    static const QUMethod slot_0 = {"slotData", 2, param_slot_0 };
    static const QUParameter param_slot_1[] = {
	{ "job", &static_QUType_ptr, "KIO::Job", QUParameter::In }
    };
    static const QUMethod slot_1 = {"slotResult", 1, param_slot_1 };
    static const QMetaData slot_tbl[] = {
	{ "slotData(KIO::Job*,const QByteArray&)", &slot_0, QMetaData::Private },
	{ "slotResult(KIO::Job*)", &slot_1, QMetaData::Private }
    };
    static const QUParameter param_signal_0[] = {
	{ "jobTicket", &static_QUType_ptr, "unsigned long", QUParameter::In },
	{ "buffer", &static_QUType_ptr, "QBuffer", QUParameter::In }
    };
    static const QUMethod signal_0 = {"notify", 2, param_signal_0 };
    static const QUParameter param_signal_1[] = {
	{ "jobTicket", &static_QUType_ptr, "unsigned long", QUParameter::In },
	{ "data", &static_QUType_varptr, "\x1d", QUParameter::In },
	{ "eof", &static_QUType_bool, 0, QUParameter::In }
    };
    static const QUMethod signal_1 = {"notifyIncremental", 3, param_signal_1 };
    static const QMetaData signal_tbl[] = {
	{ "notify(unsigned long,QBuffer*)", &signal_0, QMetaData::Public },
	{ "notifyIncremental(unsigned long,const QByteArray&,bool)", &signal_1, QMetaData::Public }
    };
    metaObj = QMetaObject::new_metaobject(
	"KDOM::DataSlave", parentObject,
	slot_tbl, 2,
	signal_tbl, 2,
#ifndef QT_NO_PROPERTIES
	0, 0,
	0, 0,
#endif // QT_NO_PROPERTIES
	0, 0 );
    cleanUp_KDOM__DataSlave.setMetaObject( metaObj );
    return metaObj;
}

void* KDOM::DataSlave::qt_cast( const char* clname )
{
    if ( !qstrcmp( clname, "KDOM::DataSlave" ) )
	return this;
    return QObject::qt_cast( clname );
}

#include <qobjectdefs.h>
#include <qsignalslotimp.h>

// SIGNAL notify
void KDOM::DataSlave::notify( unsigned long t0, QBuffer* t1 )
{
    if ( signalsBlocked() )
	return;
    QConnectionList *clist = receivers( staticMetaObject()->signalOffset() + 0 );
    if ( !clist )
	return;
    QUObject o[3];
    static_QUType_ptr.set(o+1,&t0);
    static_QUType_ptr.set(o+2,t1);
    activate_signal( clist, o );
}

// SIGNAL notifyIncremental
void KDOM::DataSlave::notifyIncremental( unsigned long t0, const QByteArray& t1, bool t2 )
{
    if ( signalsBlocked() )
	return;
    QConnectionList *clist = receivers( staticMetaObject()->signalOffset() + 1 );
    if ( !clist )
	return;
    QUObject o[4];
    static_QUType_ptr.set(o+1,&t0);
    static_QUType_varptr.set(o+2,&t1);
    static_QUType_bool.set(o+3,t2);
    activate_signal( clist, o );
}

bool KDOM::DataSlave::qt_invoke( int _id, QUObject* _o )
{
    switch ( _id - staticMetaObject()->slotOffset() ) {
    case 0: slotData((KIO::Job*)static_QUType_ptr.get(_o+1),(const QByteArray&)*((const QByteArray*)static_QUType_ptr.get(_o+2))); break;
    case 1: slotResult((KIO::Job*)static_QUType_ptr.get(_o+1)); break;
    default:
	return QObject::qt_invoke( _id, _o );
    }
    return TRUE;
}

bool KDOM::DataSlave::qt_emit( int _id, QUObject* _o )
{
    switch ( _id - staticMetaObject()->signalOffset() ) {
    case 0: notify((unsigned long)(*((unsigned long*)static_QUType_ptr.get(_o+1))),(QBuffer*)static_QUType_ptr.get(_o+2)); break;
    case 1: notifyIncremental((unsigned long)(*((unsigned long*)static_QUType_ptr.get(_o+1))),(const QByteArray&)*((const QByteArray*)static_QUType_ptr.get(_o+2)),(bool)static_QUType_bool.get(_o+3)); break;
    default:
	return QObject::qt_emit(_id,_o);
    }
    return TRUE;
}
#ifndef QT_NO_PROPERTIES

bool KDOM::DataSlave::qt_property( int id, int f, QVariant* v)
{
    return QObject::qt_property( id, f, v);
}

bool KDOM::DataSlave::qt_static_property( QObject* , int , int , QVariant* ){ return FALSE; }
#endif // QT_NO_PROPERTIES
