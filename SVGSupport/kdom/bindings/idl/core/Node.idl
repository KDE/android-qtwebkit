/*
 * Copyright (c) 2004 World Wide Web Consortium,
 *
 * (Massachusetts Institute of Technology, European Research Consortium for
 * Informatics and Mathematics, Keio University). All Rights Reserved. This
 * work is distributed under the W3C(r) Software License [1] in the hope that
 * it will be useful, but WITHOUT ANY WARRANTY; without even the implied
 * warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 * [1] http://www.w3.org/Consortium/Legal/2002/copyright-software-20021231
 */

module core
{
	interface Node : events::EventTarget {
		// Node types
		const unsigned short ELEMENT_NODE					= 1;
		const unsigned short ATTRIBUTE_NODE					= 2;
		const unsigned short TEXT_NODE						= 3;
		const unsigned short CDATA_SECTION_NODE				= 4;
		const unsigned short ENTITY_REFERENCE_NODE			= 5;
		const unsigned short ENTITY_NODE					= 6;
		const unsigned short PROCESSING_INSTRUCTION_NODE	= 7;
		const unsigned short COMMENT_NODE					= 8;
		const unsigned short DOCUMENT_NODE					= 9;
		const unsigned short DOCUMENT_TYPE_NODE				= 10;
		const unsigned short DOCUMENT_FRAGMENT_NODE			= 11;
		const unsigned short NOTATION_NODE					= 12;

		readonly attribute DOMString nodeName;
		attribute DOMString nodeValue [raises(DOMException)];

		readonly attribute unsigned short nodeType;
		readonly attribute Node parentNode;
		readonly attribute NodeList childNodes;
		readonly attribute Node firstChild;
		readonly attribute Node lastChild;
		readonly attribute Node previousSibling;
		readonly attribute Node nextSibling;
		readonly attribute NamedNodeMap attributes;

		// Modified in DOM Level 2:
		readonly attribute Document ownerDocument;

		// Modified in DOM Level 3:
		Node insertBefore(in Node newChild,
						  in Node refChild)
						  [raises(DOMException)];

		// Modified in DOM Level 3:
		Node replaceChild(in Node newChild,
						  in Node oldChild)
						  [raises(DOMException)];

		// Modified in DOM Level 3:
		Node removeChild(in Node oldChild)
						 [raises(DOMException)];

		// Modified in DOM Level 3:
		Node appendChild(in Node newChild)
						 [raises(DOMException)];

		boolean hasChildNodes();

		Node cloneNode(in boolean deep);

		// Modified in DOM Level 3:
		void normalize();

		// Introduced in DOM Level 2:
		boolean isSupported(in DOMString feature,
							in DOMString version);

		// Introduced in DOM Level 2:
		readonly attribute DOMString namespaceURI;

		// Introduced in DOM Level 2:
		attribute DOMString prefix [raises(DOMException)];

		// Introduced in DOM Level 2:
		readonly attribute DOMString localName;

		// Introduced in DOM Level 2:
		boolean hasAttributes();

		// Introduced in DOM Level 3:
		readonly attribute DOMString baseURI;

		// Document positions
		const unsigned short DOCUMENT_POSITION_DISCONNECTED				= 0x01;
		const unsigned short DOCUMENT_POSITION_PRECEDING				= 0x02;
		const unsigned short DOCUMENT_POSITION_FOLLOWING				= 0x04;
		const unsigned short DOCUMENT_POSITION_CONTAINS					= 0x08;
		const unsigned short DOCUMENT_POSITION_CONTAINED_BY				= 0x10;
		const unsigned short DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC	= 0x20;

		// Introduced in DOM Level 3:
		unsigned short compareDocumentPosition(in Node other)
											   [raises(DOMException)];

		// Introduced in DOM Level 3:
		attribute DOMString textContent [raises(DOMException)];

		// Introduced in DOM Level 3:
		boolean isSameNode(in Node other);

		// Introduced in DOM Level 3:
		DOMString lookupPrefix(in DOMString namespaceURI);

		// Introduced in DOM Level 3:
		boolean isDefaultNamespace(in DOMString namespaceURI);

		// Introduced in DOM Level 3:
		DOMString lookupNamespaceURI(in DOMString prefix);

		// Introduced in DOM Level 3:
		boolean isEqualNode(in Node arg);

		/* FIXME
		// Introduced in DOM Level 3:
		DOMObject getFeature(in DOMString feature,
							 in DOMString version);

		// Introduced in DOM Level 3:
		DOMUserData setUserData(in DOMString key,
								in DOMUserData data,
								in UserDataHandler handler);

		// Introduced in DOM Level 3:
		DOMUserData getUserData(in DOMString key);
		*/
	};
};
