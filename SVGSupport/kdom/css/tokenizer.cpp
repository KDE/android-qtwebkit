/*
 * This file is part of the DOM implementation for KDE.
 *
 * Copyright (C) 2003 Lars Knoll (knoll@kde.org)
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public License
 * along with this library; see the file COPYING.LIB.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Steet, Fifth Floor,
 * Boston, MA 02110-1301, USA.
 */

/* This file is mostly data generated by flex. Unfortunately flex
   can't handle 16bit strings directly, so we just copy the part of
   the code we need and modify it to our needs.

   Most of the defines below are to make sure we can easily use the
   flex generated code, using as little editing as possible.

   The flex syntax to generate the lexer are more or less directly
   copied from the CSS2.1 specs, with some fixes for comments and
   the important symbol.

   To regenerate, run flex on tokenizer.flex. After this, copy the
   data tables and the YY_DECL method over to this file. Remove the
   init code from YY_DECL and change the YY_END_OF_BUFFER to only call
   yyterminate().

*/

// --------- begin generated code -------------------
#define YY_NUM_RULES 50
#define YY_END_OF_BUFFER 51
static yyconst short int yy_accept[370] =
    {   0,
        0,    0,   51,   49,    2,    2,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   42,   49,   49,   49,   49,
       11,   11,   11,   11,   49,   49,    2,    0,    0,    0,
       10,    0,   13,    0,    8,    0,    0,    9,    0,    0,
        0,   11,   11,   42,    0,   41,    0,    0,   42,   47,
        0,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   40,   12,   40,   40,   37,    0,    0,    0,    0,
        0,    0,    0,    0,   11,   11,    7,   46,   11,    0,
       11,    0,   11,   11,    0,   11,    6,    5,    0,    0,
        0,   10,    0,    0,   13,   13,    0,    0,   10,    0,

        0,    4,   12,   40,   40,   40,    0,    0,   42,   47,
       40,   40,   40,   40,   47,   40,   40,   40,    0,   40,
       40,   28,   40,   24,   26,   40,   38,   30,   40,   29,
       36,   40,   32,   31,   27,   40,    0,    0,    0,    0,
        0,    0,    0,    0,   11,   11,   11,   11,   12,   11,
       11,    0,   47,   11,    0,    0,    0,   13,    0,    0,
       40,    0,    1,   42,   47,   40,   40,   40,   40,   47,
       40,   40,   47,   40,   40,   40,   40,   33,   40,   39,
       12,   34,    3,    0,    0,    0,    0,    0,    0,    0,
       11,   11,   11,   43,    0,    0,   47,   46,    0,    0,

       13,    0,    0,    0,   42,   47,   40,   40,   40,   40,
       47,   40,   40,   47,   47,   40,   40,   40,   35,    0,
        0,    0,    0,    0,    0,   15,   11,   11,   11,   48,
        0,   47,    0,    0,    0,    0,   45,    0,    0,    0,
       13,    0,   42,   47,   40,   40,   40,   40,   47,   40,
       40,   47,   47,   47,   40,   40,   25,    0,    0,    0,
        0,   16,    0,   11,   11,   11,   48,    0,   47,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   45,    0,
        0,    0,    0,   13,    0,   42,   40,   40,    0,    0,
        0,   14,    0,   11,   11,   48,    0,   47,    0,   44,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   13,    0,   40,   40,    0,   18,    0,
        0,   11,   48,    0,   47,    0,   44,    0,    0,    0,
       44,    0,    0,    0,    0,   40,    0,    0,    0,    0,
        0,   48,    0,    0,    0,   23,    0,    0,    0,   17,
       19,   48,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   20,    0,    0,    0,   21,   22,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    4,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    6,    7,    8,    9,   10,   11,   12,   13,   14,
       15,   16,   17,   12,   18,   19,   20,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   12,   12,   22,
       23,   24,   25,   26,   30,   31,   32,   33,   34,   35,
       36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
       46,   47,   48,   49,   50,   51,   39,   52,   39,   53,
       12,   27,   12,   28,   29,   12,   30,   31,   32,   33,

       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
       44,   45,   46,   47,   48,   49,   50,   51,   39,   52,
       39,   53,   12,   54,   12,   55,    1,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,

       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56
    } ;

static yyconst int yy_meta[57] =
    {   0,
        1,    2,    3,    3,    3,    4,    4,    4,    4,    4,
        4,    4,    4,    5,    4,    4,    4,    6,    4,    4,
        6,    4,    4,    4,    4,    4,    7,    4,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    4,    4,    7
    } ;

static yyconst short int yy_base[393] =
    {   0,
        0,    0,  855, 1871,   55,   60,   65,   64,  814,  817,
       60,  814,   56,  815,  819,   93,  827,   63,  126,  802,
       61,  148,   75,  137,  800,  799,  183,  188,  779,   70,
     1871,  225,  793,  174, 1871,   63,  259, 1871,  782,   64,
      180,   82,  149,  276,  789, 1871,  777,  782,  210,  777,
      244,   53,  299,  759,  766,   42,  121,  143,   73,  772,
      128,  175,  207,  221,   83,  770,  778,  742,  744,  735,
      735,  742,  745,  737,  189,  333, 1871, 1871,  205,  282,
      348,  739,  326,  222,  363,  240, 1871, 1871,  706,  296,
      144,  145,  397,  431,  723,  465,  315,  224,  255,  499,

      533, 1871,  180,  242,   52,  318,  733,  101,  416,  723,
      518,  705,  712,  246,  720,  716,  567,  715,  574,  172,
        0,  714,  704,  712,  711,  147,  693,  692,  194,  690,
      688,  275,  687,  686,  678,  294,  686,  666,  672,  657,
      654,  665,  642,  647,  582,  273,  616,  608,  659,  329,
      330,  634,  654,  332,  634,  212,  640,  655,  328,  661,
      325,  661, 1871,  676,  638,  691,  620,  620,  320,  628,
        0,  609,  619,  697,  609,  731,  358,  608,  344,  607,
      383,  605, 1871,  582,  583,  579,  583,  588,  591,  590,
      723,  738,  753, 1871,  759,  777,  598,  811,  564,  797,

      812,  818,  594,  370,  833,  571,  848,  551,  558,  364,
      566,    0,  554,  564,  561,  854,  869,  347,  558,  542,
      535,  564,  534,  549,  514, 1871,  875,  890,  905,  911,
      929,  536,  963,  989,  258,  394, 1871, 1015,  498,  949,
      975, 1022, 1037, 1871,  517,  349,  381,  430, 1871,  513,
      384, 1871, 1871, 1871, 1043, 1058,  484,  452,  457,  455,
      440, 1871,  443, 1064, 1079, 1094, 1100, 1118,  460,  472,
      411,  504, 1152,  396, 1186, 1220, 1246, 1272, 1298, 1324,
     1358,  454, 1137, 1171, 1206,    0, 1232, 1258,  465,  432,
      423, 1871,  415,  511, 1284, 1365, 1383,  418,  572, 1871,

      452,  417, 1338, 1417, 1451,  515,  399, 1430, 1485, 1519,
     1504,  379, 1526, 1534, 1541,  553, 1549,  494, 1871,  385,
      382,  519, 1556,  395, 1871, 1465,  432,  446, 1564, 1598,
      429,  467, 1584, 1599,  338,  654,  341,  301,  319,  314,
      291, 1605, 1620, 1626, 1641, 1871,  290,  264,  242, 1871,
     1871, 1871, 1647, 1662, 1668,  209,  204,  172, 1683, 1689,
     1704,  152, 1871,  116, 1710, 1725, 1871, 1871, 1871, 1759,
     1761, 1767, 1769, 1773, 1776, 1782, 1786, 1792, 1799,  108,
     1803, 1805, 1809, 1816, 1820, 1827, 1833, 1839, 1845, 1851,
     1857, 1863

    } ;

static yyconst short int yy_def[393] =
    {   0,
      369,    1,  369,  369,  369,  369,  369,  370,  371,  369,
      372,  369,  373,  369,  369,  369,  369,  369,  374,  369,
      375,  375,  375,  375,  369,  369,  369,  369,  369,  370,
      369,  376,  371,  377,  369,  372,  378,  369,  369,  369,
      374,  375,  375,   16,  379,  369,  380,  369,   16,  369,
      381,  382,  382,   53,   53,   53,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  369,  369,  369,  369,
      369,  369,  369,  369,  375,   22,  369,  369,  375,  383,
       22,  369,  375,  375,  369,  375,  369,  369,  369,  370,
      370,  370,  370,  376,  371,  371,  372,  372,  372,  372,

      378,  369,  369,  382,  382,  382,  379,  384,   16,  369,
       53,  111,  111,  111,  369,  382,  382,  382,  385,  382,
      111,  382,  111,  382,  382,  382,  382,  382,  382,  382,
      382,  382,  382,  382,  382,  382,  369,  369,  369,  369,
      369,  369,  369,  369,   76,  375,   76,   22,  369,  375,
      375,  369,  369,  375,  369,  370,   93,   96,  372,  100,
      382,  386,  369,   16,  369,  111,  166,  166,  166,  369,
      166,  166,  369,  117,  382,  117,  382,  382,  382,  382,
      382,  382,  369,  369,  369,  369,  369,  369,  369,  369,
       76,  147,   22,  369,  369,  369,  369,  387,  369,   93,

       96,  100,  386,  384,   16,  369,  166,  207,  207,  207,
      369,  207,  207,  369,  369,  117,  176,  382,  382,  369,
      369,  369,  369,  369,  369,  369,   76,  147,   22,  369,
      369,  369,  387,  387,  388,  389,  369,  390,  369,   93,
       96,  100,   16,  369,  382,  382,  382,  382,  369,  382,
      382,  369,  369,  369,  117,  176,  382,  369,  369,  369,
      369,  369,  369,   76,  147,   22,  369,  369,  369,  369,
      388,  369,  391,  389,  392,  387,  387,  387,  387,  387,
      390,  369,   93,   96,  100,  243,  117,  176,  369,  369,
      369,  369,  369,  266,  147,  369,  369,  369,  369,  369,

      388,  388,  388,  388,  391,  389,  389,  389,  389,  392,
      280,  369,   93,   96,  100,  382,  176,  369,  369,  369,
      369,  266,  369,  369,  369,  388,  388,  388,  304,  389,
      389,  389,  309,  280,  369,  382,  369,  369,  369,  369,
      369,  369,  304,  309,  280,  369,  369,  369,  369,  369,
      369,  369,  304,  309,  280,  369,  369,  369,  304,  309,
      280,  369,  369,  369,  304,  309,  369,  369,    0,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369

    } ;

static yyconst short int yy_nxt[1928] =
    {   0,
        4,    5,    6,    5,    5,    5,    7,    8,    9,   10,
        4,    4,   11,    4,    4,   12,    4,   13,   14,   15,
       16,   17,    4,    4,    4,   18,   19,   20,   21,   22,
       22,   22,   22,   22,   22,   21,   21,   21,   21,   21,
       21,   21,   23,   21,   21,   21,   21,   21,   21,   24,
       21,   21,   21,   25,   26,   21,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   28,   28,   28,   28,
       28,   31,   31,   39,   78,   31,   40,   31,  119,  119,
       68,  120,   41,  124,   40,  161,   37,   80,   78,   37,
       32,   82,   83,  125,   69,   78,   32,   70,   43,  119,

       71,   80,   29,   46,   72,   73,  103,   74,   80,  119,
       47,   48,  136,   49,   60,  128,  108,   50,   84,   51,
      163,   52,   53,   53,   54,   55,   56,   53,   57,   58,
       59,   60,   61,   60,   62,   63,   60,   64,   60,   65,
       66,   60,   60,   60,   60,   60,   76,  119,   60,  368,
       78,   31,   31,   85,  119,   76,   76,   76,   76,   76,
       76,   78,   78,   80,  129,   82,   83,  126,   81,  119,
       32,   32,   50,  119,   80,   80,  179,   81,   81,   81,
       81,   81,   81,   86,   27,   27,   27,   27,   27,   28,
       28,   28,   28,   28,   96,  127,   82,   82,  119,  367,

       76,  119,   78,   96,   96,   96,   96,   96,   96,   76,
       76,   76,   76,   76,   76,   80,  130,  177,   78,   31,
      119,  364,  131,   82,  132,   29,   30,   30,   30,   90,
      109,   80,   92,  119,  110,   78,   31,  363,   32,  111,
      111,  112,  113,  114,  111,   93,  180,  119,   80,  362,
       37,   94,  133,   78,   93,   93,   93,   93,   93,   93,
       36,   36,   36,   97,  117,  272,   80,   31,  119,  134,
      151,   99,  135,  117,  117,  117,  117,  117,  117,  100,
      154,   37,  358,  122,  273,  101,   78,  124,  100,  100,
      100,  100,  100,  100,  369,  181,   44,  125,   30,   80,

      369,  119,  147,   31,  357,   60,   60,  104,  105,  106,
       60,  147,  147,  147,  147,  147,  147,   36,   60,  121,
      119,  356,   32,  110,  351,  119,  182,   31,  121,  121,
      121,  121,  121,  121,   75,   75,   75,   75,   75,   78,
       31,   37,   78,  194,  119,  198,  150,  350,  349,  150,
      348,  119,   80,  145,   37,   80,   80,  369,   80,  124,
      178,  124,  145,  145,  145,  145,  145,  145,  148,  125,
      119,  125,  110,  119,  347,  119,  219,  148,  148,  148,
      148,  148,  148,  152,  119,  204,  346,  153,  257,  163,
      122,  218,  152,  152,  152,  152,  152,  152,   91,  156,

      156,  156,   91,  181,   31,  124,  272,  119,  272,  119,
      119,  272,  195,  341,  161,  125,  340,  157,  272,  178,
      275,  335,  275,   32,  272,  275,  157,  157,  157,  157,
      157,  157,   30,   30,   30,   90,  164,  273,   92,  272,
      165,  272,  325,  273,  321,  166,  166,  167,  168,  169,
      166,   93,  320,  272,  271,  275,  119,   94,  273,  272,
       93,   93,   93,   93,   93,   93,   95,   95,   95,   95,
       95,  124,  273,  270,  270,  270,  270,  270,  273,  272,
      319,  125,  318,  312,  298,  158,  237,  293,  292,  291,
      290,   34,  289,  275,  158,  158,  158,  158,  158,  158,

       98,  159,  159,  159,   98,  299,  299,  299,  299,  299,
      119,   31,   75,   75,   75,   75,   75,  274,  300,  160,
      146,  146,  146,  146,  146,   37,  337,  272,  160,  160,
      160,  160,  160,  160,   36,   36,   36,   97,  171,  119,
      338,  275,  165,  119,  339,   99,  282,  171,  171,  171,
      171,  171,  171,  100,  116,  116,  116,  116,  116,  101,
      269,  263,  100,  100,  100,  100,  100,  100,  116,  116,
      116,  116,  116,  299,  299,  299,  299,  299,  262,  119,
      261,  260,  259,  258,  119,  254,  300,  174,  253,  178,
      252,  251,  122,  119,  176,  249,  174,  174,  174,  174,

      174,  174,  191,  176,  176,  176,  176,  176,  176,  204,
      239,  191,  191,  191,  191,  191,  191,  146,  146,  146,
      146,  146,  232,  226,  225,  224,  223,  222,  193,  221,
      220,  119,  165,  119,  119,  119,  192,  193,  193,  193,
      193,  193,  193,  215,  178,  192,  192,  192,  192,  192,
      192,  195,  214,  213,  196,  175,  175,  175,  175,  175,
      200,  122,  211,  196,  196,  196,  196,  196,  196,  200,
      200,  200,  200,  200,  200,  201,  204,  199,  197,  149,
      119,  202,  190,  189,  201,  201,  201,  201,  201,  201,
      202,  202,  202,  202,  202,  202,  205,  188,  187,  186,

      206,  185,  184,  183,  119,  207,  207,  208,  209,  210,
      207,  212,  119,  119,  119,  206,  119,  216,  119,  119,
      212,  212,  212,  212,  212,  212,  216,  216,  216,  216,
      216,  216,  175,  175,  175,  175,  175,  119,  119,  178,
      119,  119,  119,  227,  173,  172,  122,  170,  108,   34,
      155,  217,  227,  227,  227,  227,  227,  227,  228,  149,
      217,  217,  217,  217,  217,  217,  144,  228,  228,  228,
      228,  228,  228,  229,  143,  142,  141,  206,  140,  230,
      139,  138,  229,  229,  229,  229,  229,  229,  230,  230,
      230,  230,  230,  230,  195,  137,  119,  231,  119,  123,

      122,  115,   44,   51,  108,  102,  231,  231,  231,  231,
      231,  231,  233,  233,  233,  233,  233,  240,  235,   34,
       89,   88,   87,  236,   77,  237,  240,  240,  240,  240,
      240,  240,  241,   67,   45,   44,   38,  238,  242,   35,
       34,  241,  241,  241,  241,  241,  241,  242,  242,  242,
      242,  242,  242,  243,  369,  369,  369,  244,  369,  369,
      369,  369,  245,  245,  246,  247,  248,  245,  250,  369,
      369,  369,  244,  369,  255,  369,  369,  250,  250,  250,
      250,  250,  250,  255,  255,  255,  255,  255,  255,  256,
      369,  369,  369,  369,  369,  264,  369,  369,  256,  256,

      256,  256,  256,  256,  264,  264,  264,  264,  264,  264,
      265,  369,  369,  369,  369,  369,  369,  369,  369,  265,
      265,  265,  265,  265,  265,  266,  369,  369,  369,  244,
      369,  267,  369,  369,  266,  266,  266,  266,  266,  266,
      267,  267,  267,  267,  267,  267,  195,  369,  369,  268,
      369,  369,  369,  369,  369,  369,  369,  369,  268,  268,
      268,  268,  268,  268,  233,  233,  233,  233,  233,  283,
      235,  369,  369,  369,  369,  236,  369,  237,  283,  283,
      283,  283,  283,  283,  369,  369,  369,  369,  369,  238,
      270,  270,  270,  270,  270,  284,  369,  369,  369,  369,

      369,  369,  369,  237,  284,  284,  284,  284,  284,  284,
      369,  369,  369,  369,  369,  238,  270,  270,  270,  270,
      276,  369,  278,  369,  369,  369,  369,  278,  278,  279,
      369,  369,  369,  369,  369,  280,  369,  369,  369,  369,
      369,  281,  285,  369,  280,  280,  280,  280,  280,  280,
      369,  285,  285,  285,  285,  285,  285,  286,  369,  369,
      369,  369,  369,  287,  369,  369,   60,   60,  104,  105,
      106,   60,  287,  287,  287,  287,  287,  287,  288,  369,
      369,  369,  369,  369,  294,  369,  369,  288,  288,  288,
      288,  288,  288,  294,  294,  294,  294,  294,  294,  295,

      369,  369,  369,  369,  369,  369,  369,  369,  295,  295,
      295,  295,  295,  295,   79,  369,  369,  369,  369,  369,
      296,  369,  369,   79,   79,   79,   79,   79,   79,  296,
      296,  296,  296,  296,  296,  195,  369,  369,  297,  369,
      369,  369,  369,  369,  369,  369,  369,  297,  297,  297,
      297,  297,  297,  271,  271,  271,  301,  313,  369,  303,
      369,  369,  369,  369,  369,  369,  313,  313,  313,  313,
      313,  313,  304,  369,  369,  369,  369,  369,  305,  369,
      369,  304,  304,  304,  304,  304,  304,  274,  274,  274,
      306,  314,  369,  369,  369,  369,  369,  369,  308,  369,

      314,  314,  314,  314,  314,  314,  309,  369,  369,  369,
      369,  369,  310,  369,  369,  309,  309,  309,  309,  309,
      309,  270,  270,  270,  270,  270,  315,  369,  369,  369,
      369,  369,  369,  369,  237,  315,  315,  315,  315,  315,
      315,  369,  369,  369,  369,  369,  238,  270,  270,  270,
      270,  270,  316,  369,  369,  369,  369,  369,  369,  369,
      237,  316,  316,  316,  316,  316,  316,  369,  369,  369,
      369,  369,  238,  270,  270,  270,  270,  270,  317,  369,
      369,  369,  369,  369,  369,  369,  237,  317,  317,  317,
      317,  317,  317,  369,  369,  369,  369,  369,  238,  270,

      270,  270,  270,  270,  322,  369,  369,  369,  369,  369,
      369,  369,  237,  322,  322,  322,  322,  322,  322,  369,
      369,  369,  369,  369,  238,  276,  276,  276,  276,  276,
      369,  369,  369,  369,  369,  369,  369,  369,  237,  326,
      299,  299,  299,  326,  311,  272,  369,  369,  369,  369,
      238,  369,  327,  311,  311,  311,  311,  311,  311,  270,
      270,  270,  270,  276,  273,  278,  369,  369,  369,  369,
      278,  278,  279,  369,  369,  369,  369,  369,  280,  369,
      369,  369,  369,  369,  281,  323,  369,  280,  280,  280,
      280,  280,  280,  369,  323,  323,  323,  323,  323,  323,

      195,  369,  369,  324,  369,  369,  369,  369,  369,  369,
      369,  369,  324,  324,  324,  324,  324,  324,  302,  328,
      328,  328,  302,  369,  272,  369,  369,  369,  369,  369,
      369,  330,  299,  299,  299,  330,  369,  329,  369,  369,
      369,  369,  272,  273,  331,  369,  329,  329,  329,  329,
      329,  329,  271,  271,  271,  301,  275,  369,  303,  369,
      369,  369,  369,  369,  369,  369,  326,  299,  299,  299,
      326,  304,  272,  369,  369,  369,  369,  305,  369,  327,
      304,  304,  304,  304,  304,  304,  307,  332,  332,  332,
      307,  273,  369,  369,  369,  369,  369,  272,  369,  369,

      369,  369,  369,  369,  369,  333,  369,  369,  369,  369,
      369,  275,  369,  369,  333,  333,  333,  333,  333,  333,
      274,  274,  274,  306,  334,  369,  369,  369,  369,  369,
      369,  308,  369,  334,  334,  334,  334,  334,  334,  309,
      369,  369,  369,  369,  369,  310,   30,  369,  309,  309,
      309,  309,  309,  309,   33,   30,   30,   30,   30,   30,
       30,   36,  369,   33,   33,   33,   33,   33,   33,  336,
       36,   36,   36,   36,   36,   36,  342,  369,  336,  336,
      336,  336,  336,  336,  343,  342,  342,  342,  342,  342,
      342,  369,  369,  343,  343,  343,  343,  343,  343,  330,

      299,  299,  299,  330,  344,  369,  369,  369,  369,  369,
      272,  369,  331,  344,  344,  344,  344,  344,  344,  345,
      369,  369,  369,  369,  275,  352,  369,  369,  345,  345,
      345,  345,  345,  345,  352,  352,  352,  352,  352,  352,
      353,  369,  369,  369,  369,  369,  354,  369,  369,  353,
      353,  353,  353,  353,  353,  354,  354,  354,  354,  354,
      354,  355,  369,  369,  369,  369,  369,  359,  369,  369,
      355,  355,  355,  355,  355,  355,  359,  359,  359,  359,
      359,  359,  360,  369,  369,  369,  369,  369,  361,  369,
      369,  360,  360,  360,  360,  360,  360,  361,  361,  361,

      361,  361,  361,  365,  369,  369,  369,  369,  369,  366,
      369,  369,  365,  365,  365,  365,  365,  365,  366,  366,
      366,  366,  366,  366,  234,  369,  369,  369,  369,  369,
      271,  369,  369,  234,  234,  234,  234,  234,  234,  271,
      271,  271,  271,  271,  271,  274,  369,  369,  369,  369,
      369,  369,  369,  369,  274,  274,  274,  274,  274,  274,
       30,  369,   30,   30,   30,   30,   33,   33,   36,  369,
       36,   36,   36,   36,   42,   42,   75,   75,   75,   75,
       79,   79,   79,   91,   91,   91,   91,   91,   91,   95,
       95,   95,   95,   98,   98,   98,   98,   98,   98,  107,

      107,  107,  107,  107,  107,  107,  116,  116,  116,  116,
      118,  118,  146,  146,  146,  146,  162,  162,  162,  162,
      162,  162,  162,  175,  175,  175,  175,  203,  203,  203,
      203,  203,  203,  203,  234,  234,  234,  369,  234,  234,
      271,  369,  271,  271,  271,  271,  274,  369,  274,  274,
      274,  274,  277,  277,  277,  277,  277,  277,  302,  302,
      302,  302,  302,  302,  307,  307,  307,  307,  307,  307,
        3,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,

      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369
    } ;

static yyconst short int yy_chk[1928] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    5,    5,    5,    5,
        5,    6,    6,    6,    6,    6,    7,    7,    7,    7,
        7,    8,   11,   13,   21,   36,   13,   30,  105,   52,
       18,   52,   13,   56,   40,  105,   11,   21,   23,   36,
        8,   23,   23,   56,   18,   42,   30,   18,   13,   59,

       18,   23,    7,   16,   18,   18,   40,   18,   42,   65,
       16,   16,   65,   16,  380,   59,  108,   16,   23,   16,
      108,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   19,   57,   16,  364,
       24,   91,   92,   24,   61,   19,   19,   19,   19,   19,
       19,   22,   43,   24,   61,   43,   43,   57,   22,   58,
       91,   92,   22,  126,   22,   43,  126,   22,   22,   22,
       22,   22,   22,   24,   27,   27,   27,   27,   27,   28,
       28,   28,   28,   28,   34,   58,  103,  103,  120,  362,

       41,   62,   75,   34,   34,   34,   34,   34,   34,   41,
       41,   41,   41,   41,   41,   75,   62,  120,   79,  156,
      129,  358,   62,   63,   63,   28,   32,   32,   32,   32,
       49,   79,   32,   63,   49,   84,   98,  357,  156,   49,
       49,   49,   49,   49,   49,   32,  129,   64,   84,  356,
       98,   32,   64,   86,   32,   32,   32,   32,   32,   32,
       37,   37,   37,   37,   51,  235,   86,   99,  104,   64,
       84,   37,   64,   51,   51,   51,   51,   51,   51,   37,
       86,   99,  349,  104,  235,   37,  146,  114,   37,   37,
       37,   37,   37,   37,   44,  132,   44,  114,   90,  146,

       44,  132,   80,   90,  348,   44,   44,   44,   44,   44,
       44,   80,   80,   80,   80,   80,   80,   97,   44,   53,
      136,  347,   90,   53,  341,   53,  136,   97,   53,   53,
       53,   53,   53,   53,   76,   76,   76,   76,   76,   83,
      159,   97,  150,  151,  106,  154,   83,  340,  339,  150,
      338,  161,   83,   76,  159,  150,  151,   76,  154,  106,
      161,  169,   76,   76,   76,   76,   76,   76,   81,  106,
      179,  169,   81,  218,  337,  246,  179,   81,   81,   81,
       81,   81,   81,   85,  177,  204,  335,   85,  218,  204,
      246,  177,   85,   85,   85,   85,   85,   85,   93,   93,

       93,   93,   93,  181,   93,  210,  236,  247,  274,  181,
      251,  307,  324,  321,  247,  210,  320,   93,  271,  251,
      236,  312,  274,   93,  302,  307,   93,   93,   93,   93,
       93,   93,   94,   94,   94,   94,  109,  271,   94,  327,
      109,  331,  298,  302,  293,  109,  109,  109,  109,  109,
      109,   94,  291,  328,  301,  331,  248,   94,  327,  301,
       94,   94,   94,   94,   94,   94,   96,   96,   96,   96,
       96,  248,  328,  270,  270,  270,  270,  270,  301,  332,
      290,  248,  289,  282,  269,   96,  270,  263,  261,  260,
      259,   96,  258,  332,   96,   96,   96,   96,   96,   96,

      100,  100,  100,  100,  100,  272,  272,  272,  272,  272,
      257,  100,  294,  294,  294,  294,  294,  306,  272,  100,
      322,  322,  322,  322,  322,  100,  318,  306,  100,  100,
      100,  100,  100,  100,  101,  101,  101,  101,  111,  250,
      318,  306,  111,  245,  318,  101,  239,  111,  111,  111,
      111,  111,  111,  101,  316,  316,  316,  316,  316,  101,
      232,  225,  101,  101,  101,  101,  101,  101,  117,  117,
      117,  117,  117,  299,  299,  299,  299,  299,  224,  316,
      223,  222,  221,  220,  219,  215,  299,  117,  214,  213,
      211,  209,  208,  117,  119,  206,  117,  117,  117,  117,

      117,  117,  145,  119,  119,  119,  119,  119,  119,  203,
      199,  145,  145,  145,  145,  145,  145,  147,  147,  147,
      147,  147,  197,  190,  189,  188,  187,  186,  148,  185,
      184,  182,  148,  180,  178,  175,  147,  148,  148,  148,
      148,  148,  148,  173,  172,  147,  147,  147,  147,  147,
      147,  152,  170,  168,  152,  336,  336,  336,  336,  336,
      157,  167,  165,  152,  152,  152,  152,  152,  152,  157,
      157,  157,  157,  157,  157,  158,  162,  155,  153,  149,
      336,  160,  144,  143,  158,  158,  158,  158,  158,  158,
      160,  160,  160,  160,  160,  160,  164,  142,  141,  140,

      164,  139,  138,  137,  135,  164,  164,  164,  164,  164,
      164,  166,  134,  133,  131,  166,  130,  174,  128,  127,
      166,  166,  166,  166,  166,  166,  174,  174,  174,  174,
      174,  174,  176,  176,  176,  176,  176,  125,  124,  123,
      122,  118,  116,  191,  115,  113,  112,  110,  107,   95,
       89,  176,  191,  191,  191,  191,  191,  191,  192,   82,
      176,  176,  176,  176,  176,  176,   74,  192,  192,  192,
      192,  192,  192,  193,   73,   72,   71,  193,   70,  195,
       69,   68,  193,  193,  193,  193,  193,  193,  195,  195,
      195,  195,  195,  195,  196,   67,   66,  196,   60,   55,

       54,   50,   48,   47,   45,   39,  196,  196,  196,  196,
      196,  196,  198,  198,  198,  198,  198,  200,  198,   33,
       29,   26,   25,  198,   20,  198,  200,  200,  200,  200,
      200,  200,  201,   17,   15,   14,   12,  198,  202,   10,
        9,  201,  201,  201,  201,  201,  201,  202,  202,  202,
      202,  202,  202,  205,    3,    0,    0,  205,    0,    0,
        0,    0,  205,  205,  205,  205,  205,  205,  207,    0,
        0,    0,  207,    0,  216,    0,    0,  207,  207,  207,
      207,  207,  207,  216,  216,  216,  216,  216,  216,  217,
        0,    0,    0,    0,    0,  227,    0,    0,  217,  217,

      217,  217,  217,  217,  227,  227,  227,  227,  227,  227,
      228,    0,    0,    0,    0,    0,    0,    0,    0,  228,
      228,  228,  228,  228,  228,  229,    0,    0,    0,  229,
        0,  230,    0,    0,  229,  229,  229,  229,  229,  229,
      230,  230,  230,  230,  230,  230,  231,    0,    0,  231,
        0,    0,    0,    0,    0,    0,    0,    0,  231,  231,
      231,  231,  231,  231,  233,  233,  233,  233,  233,  240,
      233,    0,    0,    0,    0,  233,    0,  233,  240,  240,
      240,  240,  240,  240,    0,    0,    0,    0,    0,  233,
      234,  234,  234,  234,  234,  241,  234,    0,    0,    0,

        0,  234,    0,  234,  241,  241,  241,  241,  241,  241,
        0,    0,    0,    0,    0,  234,  238,  238,  238,  238,
      238,    0,  238,    0,    0,    0,    0,  238,  238,  238,
        0,    0,    0,    0,    0,  238,    0,    0,    0,    0,
        0,  238,  242,    0,  238,  238,  238,  238,  238,  238,
        0,  242,  242,  242,  242,  242,  242,  243,    0,    0,
        0,  243,    0,  255,    0,    0,  243,  243,  243,  243,
      243,  243,  255,  255,  255,  255,  255,  255,  256,    0,
        0,    0,    0,    0,  264,    0,    0,  256,  256,  256,
      256,  256,  256,  264,  264,  264,  264,  264,  264,  265,

        0,    0,    0,    0,    0,    0,    0,    0,  265,  265,
      265,  265,  265,  265,  266,    0,    0,    0,  266,    0,
      267,    0,    0,  266,  266,  266,  266,  266,  266,  267,
      267,  267,  267,  267,  267,  268,    0,    0,  268,    0,
        0,    0,    0,    0,    0,    0,    0,  268,  268,  268,
      268,  268,  268,  273,  273,  273,  273,  283,    0,  273,
        0,    0,    0,    0,    0,    0,  283,  283,  283,  283,
      283,  283,  273,    0,    0,    0,    0,    0,  273,    0,
        0,  273,  273,  273,  273,  273,  273,  275,  275,  275,
      275,  284,    0,    0,    0,    0,    0,    0,  275,    0,

      284,  284,  284,  284,  284,  284,  275,    0,    0,    0,
        0,    0,  275,    0,    0,  275,  275,  275,  275,  275,
      275,  276,  276,  276,  276,  276,  285,  276,    0,    0,
        0,    0,  276,    0,  276,  285,  285,  285,  285,  285,
      285,    0,    0,    0,    0,    0,  276,  277,  277,  277,
      277,  277,  287,  277,    0,    0,    0,    0,  277,    0,
      277,  287,  287,  287,  287,  287,  287,    0,    0,    0,
        0,    0,  277,  278,  278,  278,  278,  278,  288,  278,
        0,    0,    0,    0,  278,    0,  278,  288,  288,  288,
      288,  288,  288,    0,    0,    0,    0,    0,  278,  279,

      279,  279,  279,  279,  295,  279,    0,    0,    0,    0,
      279,    0,  279,  295,  295,  295,  295,  295,  295,    0,
        0,    0,    0,    0,  279,  280,  280,  280,  280,  280,
        0,  280,    0,    0,    0,    0,  280,    0,  280,  303,
      303,  303,  303,  303,  280,  303,    0,    0,    0,    0,
      280,    0,  303,  280,  280,  280,  280,  280,  280,  281,
      281,  281,  281,  281,  303,  281,    0,    0,    0,    0,
      281,  281,  281,    0,    0,    0,    0,    0,  281,    0,
        0,    0,    0,    0,  281,  296,    0,  281,  281,  281,
      281,  281,  281,    0,  296,  296,  296,  296,  296,  296,

      297,    0,    0,  297,    0,    0,    0,    0,    0,    0,
        0,    0,  297,  297,  297,  297,  297,  297,  304,  304,
      304,  304,  304,    0,  304,    0,    0,    0,    0,    0,
        0,  308,  308,  308,  308,  308,    0,  304,    0,    0,
        0,    0,  308,  304,  308,    0,  304,  304,  304,  304,
      304,  304,  305,  305,  305,  305,  308,    0,  305,    0,
        0,    0,    0,    0,    0,    0,  326,  326,  326,  326,
      326,  305,  326,    0,    0,    0,    0,  305,    0,  326,
      305,  305,  305,  305,  305,  305,  309,  309,  309,  309,
      309,  326,    0,    0,    0,    0,    0,  309,    0,    0,

        0,    0,    0,    0,    0,  309,    0,    0,    0,    0,
        0,  309,    0,    0,  309,  309,  309,  309,  309,  309,
      310,  310,  310,  310,  311,    0,    0,    0,    0,    0,
        0,  310,    0,  311,  311,  311,  311,  311,  311,  310,
        0,    0,    0,    0,    0,  310,  313,    0,  310,  310,
      310,  310,  310,  310,  314,  313,  313,  313,  313,  313,
      313,  315,    0,  314,  314,  314,  314,  314,  314,  317,
      315,  315,  315,  315,  315,  315,  323,    0,  317,  317,
      317,  317,  317,  317,  329,  323,  323,  323,  323,  323,
      323,    0,    0,  329,  329,  329,  329,  329,  329,  330,

      330,  330,  330,  330,  333,    0,    0,    0,    0,    0,
      330,    0,  330,  333,  333,  333,  333,  333,  333,  334,
        0,    0,    0,    0,  330,  342,    0,    0,  334,  334,
      334,  334,  334,  334,  342,  342,  342,  342,  342,  342,
      343,    0,    0,    0,    0,    0,  344,    0,    0,  343,
      343,  343,  343,  343,  343,  344,  344,  344,  344,  344,
      344,  345,    0,    0,    0,    0,    0,  353,    0,    0,
      345,  345,  345,  345,  345,  345,  353,  353,  353,  353,
      353,  353,  354,    0,    0,    0,    0,    0,  355,    0,
        0,  354,  354,  354,  354,  354,  354,  355,  355,  355,

      355,  355,  355,  359,    0,    0,    0,    0,    0,  360,
        0,    0,  359,  359,  359,  359,  359,  359,  360,  360,
      360,  360,  360,  360,  361,    0,    0,    0,    0,    0,
      365,    0,    0,  361,  361,  361,  361,  361,  361,  365,
      365,  365,  365,  365,  365,  366,    0,    0,    0,    0,
        0,    0,    0,    0,  366,  366,  366,  366,  366,  366,
      370,    0,  370,  370,  370,  370,  371,  371,  372,    0,
      372,  372,  372,  372,  373,  373,  374,  374,  374,  374,
      375,  375,  375,  376,  376,  376,  376,  376,  376,  377,
      377,  377,  377,  378,  378,  378,  378,  378,  378,  379,

      379,  379,  379,  379,  379,  379,  381,  381,  381,  381,
      382,  382,  383,  383,  383,  383,  384,  384,  384,  384,
      384,  384,  384,  385,  385,  385,  385,  386,  386,  386,
      386,  386,  386,  386,  387,  387,  387,    0,  387,  387,
      388,    0,  388,  388,  388,  388,  389,    0,  389,  389,
      389,  389,  390,  390,  390,  390,  390,  390,  391,  391,
      391,  391,  391,  391,  392,  392,  392,  392,  392,  392,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,

      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  369
    } ;


YY_DECL
    {
    register yy_state_type yy_current_state;
    register unsigned short *yy_cp, *yy_bp;
    register int yy_act;

#line 24 "tokenizer.flex"


#line 1146"lex.yy.c"

    while ( 1 )        /* loops until end-of-file is reached */
        {
        yy_cp = yy_c_buf_p;

        /* Support of yytext. */
        *yy_cp = yy_hold_char;

        /* yy_bp points to the position in yy_ch_buf of the start of
         * the current run.
         */
        yy_bp = yy_cp;

        yy_current_state = yy_start;
//yy_match:
        do
            {
            register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
            if ( yy_accept[yy_current_state] )
                {
                (yy_last_accepting_state) = yy_current_state;
                (yy_last_accepting_cpos) = yy_cp;
                }
            while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
                {
                yy_current_state = (int) yy_def[yy_current_state];
                if ( yy_current_state >= 370 )
                    yy_c = yy_meta[(unsigned int) yy_c];
                }
            yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
            ++yy_cp;
            }
        while ( yy_base[yy_current_state] != 1871 );

yy_find_action:
        yy_act = yy_accept[yy_current_state];
        if ( yy_act == 0 )
            { /* have to back up */
            yy_cp = (yy_last_accepting_cpos);
            yy_current_state = (yy_last_accepting_state);
            yy_act = yy_accept[yy_current_state];
            }

        YY_DO_BEFORE_ACTION;

do_action:    /* This label is used only to access EOF actions. */

        switch ( yy_act )
    { /* beginning of action switch */
            case 0: /* must back up */
            /* undo the effects of YY_DO_BEFORE_ACTION */
            *yy_cp = (yy_hold_char);
            yy_cp = (yy_last_accepting_cpos);
            yy_current_state = (yy_last_accepting_state);
            goto yy_find_action;


case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 26 "tokenizer.flex"
/* ignore comments */
    YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 28 "tokenizer.flex"
{yyTok = S; return yyTok;}
    YY_BREAK
case 3:
YY_RULE_SETUP
#line 30 "tokenizer.flex"
{yyTok = SGML_CD; return yyTok;}
    YY_BREAK
case 4:
YY_RULE_SETUP
#line 31 "tokenizer.flex"
{yyTok = SGML_CD; return yyTok;}
    YY_BREAK
case 5:
YY_RULE_SETUP
#line 32 "tokenizer.flex"
{yyTok = INCLUDES; return yyTok;}
    YY_BREAK
case 6:
YY_RULE_SETUP
#line 33 "tokenizer.flex"
{yyTok = DASHMATCH; return yyTok;}
    YY_BREAK
case 7:
YY_RULE_SETUP
#line 34 "tokenizer.flex"
{yyTok = BEGINSWITH; return yyTok;}
    YY_BREAK
case 8:
YY_RULE_SETUP
#line 35 "tokenizer.flex"
{yyTok = ENDSWITH; return yyTok;}
    YY_BREAK
case 9:
YY_RULE_SETUP
#line 36 "tokenizer.flex"
{yyTok = CONTAINS; return yyTok;}
    YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 38 "tokenizer.flex"
{yyTok = STRING; return yyTok;}
    YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 40 "tokenizer.flex"
{yyTok = IDENT; return yyTok;}
    YY_BREAK
case 12:
YY_RULE_SETUP
#line 42 "tokenizer.flex"
{yyTok = NTH; return yyTok;}
    YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 44 "tokenizer.flex"
{yyTok = HASH; return yyTok;}
    YY_BREAK
case 14:
YY_RULE_SETUP
#line 46 "tokenizer.flex"
{yyTok = IMPORT_SYM; return yyTok;}
    YY_BREAK
case 15:
YY_RULE_SETUP
#line 47 "tokenizer.flex"
{yyTok = PAGE_SYM; return yyTok;}
    YY_BREAK
case 16:
YY_RULE_SETUP
#line 48 "tokenizer.flex"
{yyTok = MEDIA_SYM; return yyTok;}
    YY_BREAK
case 17:
YY_RULE_SETUP
#line 49 "tokenizer.flex"
{yyTok = FONT_FACE_SYM; return yyTok;}
    YY_BREAK
case 18:
YY_RULE_SETUP
#line 50 "tokenizer.flex"
{yyTok = CHARSET_SYM; return yyTok;}
    YY_BREAK
case 19:
YY_RULE_SETUP
#line 51 "tokenizer.flex"
{yyTok = NAMESPACE_SYM; return yyTok; }
    YY_BREAK
case 20:
YY_RULE_SETUP
#line 52 "tokenizer.flex"
{yyTok = KHTML_RULE_SYM; return yyTok; }
    YY_BREAK
case 21:
YY_RULE_SETUP
#line 53 "tokenizer.flex"
{yyTok = KHTML_DECLS_SYM; return yyTok; }
    YY_BREAK
case 22:
YY_RULE_SETUP
#line 54 "tokenizer.flex"
{yyTok = KHTML_VALUE_SYM; return yyTok; }
    YY_BREAK
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 56 "tokenizer.flex"
{yyTok = IMPORTANT_SYM; return yyTok;}
    YY_BREAK
case 24:
YY_RULE_SETUP
#line 58 "tokenizer.flex"
{yyTok = EMS; return yyTok;}
    YY_BREAK
case 25:
YY_RULE_SETUP
#line 59 "tokenizer.flex"
{yyTok = QEMS; return yyTok;} /* quirky ems */
    YY_BREAK
case 26:
YY_RULE_SETUP
#line 60 "tokenizer.flex"
{yyTok = EXS; return yyTok;}
    YY_BREAK
case 27:
YY_RULE_SETUP
#line 61 "tokenizer.flex"
{yyTok = PXS; return yyTok;}
    YY_BREAK
case 28:
YY_RULE_SETUP
#line 62 "tokenizer.flex"
{yyTok = CMS; return yyTok;}
    YY_BREAK
case 29:
YY_RULE_SETUP
#line 63 "tokenizer.flex"
{yyTok = MMS; return yyTok;}
    YY_BREAK
case 30:
YY_RULE_SETUP
#line 64 "tokenizer.flex"
{yyTok = INS; return yyTok;}
    YY_BREAK
case 31:
YY_RULE_SETUP
#line 65 "tokenizer.flex"
{yyTok = PTS; return yyTok;}
    YY_BREAK
case 32:
YY_RULE_SETUP
#line 66 "tokenizer.flex"
{yyTok = PCS; return yyTok;}
    YY_BREAK
case 33:
YY_RULE_SETUP
#line 67 "tokenizer.flex"
{yyTok = DEGS; return yyTok;}
    YY_BREAK
case 34:
YY_RULE_SETUP
#line 68 "tokenizer.flex"
{yyTok = RADS; return yyTok;}
    YY_BREAK
case 35:
YY_RULE_SETUP
#line 69 "tokenizer.flex"
{yyTok = GRADS; return yyTok;}
    YY_BREAK
case 36:
YY_RULE_SETUP
#line 70 "tokenizer.flex"
{yyTok = MSECS; return yyTok;}
    YY_BREAK
case 37:
YY_RULE_SETUP
#line 71 "tokenizer.flex"
{yyTok = SECS; return yyTok;}
    YY_BREAK
case 38:
YY_RULE_SETUP
#line 72 "tokenizer.flex"
{yyTok = HERZ; return yyTok;}
    YY_BREAK
case 39:
YY_RULE_SETUP
#line 73 "tokenizer.flex"
{yyTok = KHERZ; return yyTok;}
    YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 74 "tokenizer.flex"
{yyTok = DIMEN; return yyTok;}
    YY_BREAK
case 41:
YY_RULE_SETUP
#line 75 "tokenizer.flex"
{yyTok = PERCENTAGE; return yyTok;}
    YY_BREAK
case 42:
YY_RULE_SETUP
#line 76 "tokenizer.flex"
{yyTok = NUMBER; return yyTok;}
    YY_BREAK
case 43:
YY_RULE_SETUP
#line 78 "tokenizer.flex"
{yyTok = NOTFUNCTION; return yyTok;}
    YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 79 "tokenizer.flex"
{yyTok = URI; return yyTok;}
    YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 80 "tokenizer.flex"
{yyTok = URI; return yyTok;}
    YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 81 "tokenizer.flex"
{yyTok = FUNCTION; return yyTok;}
    YY_BREAK
case 47:
YY_RULE_SETUP
#line 83 "tokenizer.flex"
{yyTok = UNICODERANGE; return yyTok;}
    YY_BREAK
case 48:
YY_RULE_SETUP
#line 84 "tokenizer.flex"
{yyTok = UNICODERANGE; return yyTok;}
    YY_BREAK
case 49:
YY_RULE_SETUP
#line 86 "tokenizer.flex"
{yyTok = *yytext; return yyTok;}
    YY_BREAK
case 50:
YY_RULE_SETUP
#line 88 "tokenizer.flex"
ECHO;
    YY_BREAK
#line 1489 "lex.yy.c"
case YY_STATE_EOF(INITIAL):
        yyterminate();

    case YY_END_OF_BUFFER:
        yy_c_buf_p = yytext;
        yy_act = YY_STATE_EOF(YY_START);
        goto do_action;

    default:
        YY_FATAL_ERROR(
            "fatal flex scanner internal error--no action found" );
    } /* end of action switch */
        } /* end of scanning one token */
} /* end of yylex */
