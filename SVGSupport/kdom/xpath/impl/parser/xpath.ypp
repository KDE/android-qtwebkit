%{

#include "AxisImpl.h"
#include <kdom/DOMString.h>
#include "ExprNodeImpl.h"
#include "FunctionCallImpl.h"
#include "LiteralImpl.h"
#include "NumberImpl.h"
#include "OperatorImpl.h"
#include "OperatorImpl.h"
#include "ParserState.h"
#include "StepImpl.h"
#include "StringImpl.h"
#include "VariableRefImpl.h"
#include "XPathFactoryBaseImpl.h"

using namespace KDOM;
using namespace KDOM::XPath;

int xpathyyerror(const char *msg)
{
	ParserState::setError(QString(msg));
	return 1;
}

#define YYDEBUG 1
#define YYSTACK_USE_ALLOCA 0
#define YYERROR_VERBOSE 1

extern int xpathyylex();

#define factory XPathFactoryBaseImpl::defaultFactory

%}

%expect 21

%union
{
	int ival;
	double dval;
	char *sval;
	ExprNodeImpl *expr;
}

%token <sval> LITERAL
%token <sval> QNAME
%token <dval> NUMBER

%token OR
%token AND
%token EQUALS
%token LT
%token GT
%token LTE
%token GTE
%token PLUS
%token MINUS
%token STAR
%token MOD
%token DIV
%token BAR

%token LPAREN
%token RPAREN
%token LSQUARE
%token RSQUARE

%token COMMA
%token AT

%token DOT
%token DOTDOT
%token COLON
%token COLONCOLON
%token SLASH
%token SLASHSLASH

%token TEXT
%token NODE
%token PROCESSING_INSTRUCTION
%token COMMENT

%token <sval> VARIABLE_REFERENCE
%token <sval> NAME

%token <ival> AXIS

%type <expr> OrExpr AndExpr EqualityExpr RelationalExpr UnionExpr
%type <expr> AdditiveExpr MultiplicativeExpr UnaryExpr PrimaryExpr
%type <expr> FilterExpr LocationPath Step PathExpr AxisSpecifier
%type <expr> FunctionCall Expr NodeTest AbbreviatedStep Args
%type <expr> AbbreviatedAxisSpecifier FunctionName
%type <expr> PredicateExpr RelativeLocationPath AbbreviatedRelativeLocationPath
%type <expr> OptRelativeLocationPath

%type <sval> OptLiteral

%type <ival> NameTest

%%

Expr: /* nothing */                   { 
                                        $$ = factory()->createLiteral(new StringImpl("Empty"));
					ParserState::setNode($$);
                                      }
| OrExpr                              {
                                        $$ = $1;
					ParserState::setNode($$);
                                      }
;

OrExpr: AndExpr
| OrExpr OR AndExpr                   {
                                        $$ = factory()->createOperator(OperatorImpl::OperatorOr);
                                        $$->addArg($1); 
                                        $$->addArg($3); 
                                      }
;

AndExpr: EqualityExpr
| AndExpr AND EqualityExpr            {
                                        $$ = factory()->createOperator(OperatorImpl::OperatorAnd);
                                        $$->addArg($1); 
                                        $$->addArg($3); 
                                      }
;

EqualityExpr: RelationalExpr          { $$ = $1; }                      
| EqualityExpr EQUALS RelationalExpr  {
                                        $$ = factory()->createOperator(OperatorImpl::OperatorEqual);
                                        $$->addArg($1); 
                                        $$->addArg($3); 
                                      }
;

RelationalExpr: AdditiveExpr
| RelationalExpr LT AdditiveExpr      {
                                        $$ = factory()->createOperator(OperatorImpl::OperatorLessThan);
                                        $$->addArg($1); 
                                        $$->addArg($3); 
                                      }
| RelationalExpr GT AdditiveExpr      {
                                        $$ = factory()->createOperator(OperatorImpl::OperatorGreaterThan);
                                        $$->addArg($1); 
                                        $$->addArg($3); 
                                      }
| RelationalExpr LTE AdditiveExpr     {
                                        $$ = factory()->createOperator(OperatorImpl::OperatorLessThanEquals);
                                        $$->addArg($1); 
                                        $$->addArg($3); 
                                      }
| RelationalExpr GTE AdditiveExpr     {
                                        $$ = factory()->createOperator(OperatorImpl::OperatorGreaterThanEquals);
                                        $$->addArg($1); 
                                        $$->addArg($3); 
                                      }
;

AdditiveExpr: MultiplicativeExpr
| AdditiveExpr PLUS MultiplicativeExpr  {
                                          $$ = factory()->createOperator(OperatorImpl::OperatorPlus);
                                          $$->addArg($1); 
                                          $$->addArg($3); 
                                        }
| AdditiveExpr MINUS MultiplicativeExpr {
                                          $$ = factory()->createOperator(OperatorImpl::OperatorMinus);
                                          $$->addArg($1); 
                                          $$->addArg($3); 
                                        }
;

MultiplicativeExpr: UnaryExpr
| MultiplicativeExpr STAR UnaryExpr  {
                                       $$ = factory()->createOperator(OperatorImpl::OperatorMultiply);
                                       $$->addArg($1); 
                                       $$->addArg($3); 
                                     }
| MultiplicativeExpr DIV UnaryExpr   {
                                       $$ = factory()->createOperator(OperatorImpl::OperatorDiv);
                                       $$->addArg($1); 
                                       $$->addArg($3); 
                                     }
| MultiplicativeExpr MOD UnaryExpr   {
                                       $$ = factory()->createOperator(OperatorImpl::OperatorMod);
                                       $$->addArg($1); 
                                       $$->addArg($3); 
                                     }
;

UnaryExpr: UnionExpr
| '-' UnaryExpr                      {
                                       $$ = factory()->createOperator(OperatorImpl::OperatorUnaryMinus);
                                       $$->addArg($2); 
                                     }
;

PrimaryExpr: LPAREN Expr RPAREN      { $$ = $2; }
| LITERAL                            { $$ = factory()->createLiteral(new StringImpl($1)); }
| NUMBER                             { $$ = factory()->createLiteral(new NumberImpl($1)); }
| FunctionCall
| VARIABLE_REFERENCE                 { $$ = factory()->createVariableRef($1); }
;

FunctionCall:
FunctionName LPAREN RPAREN
| FunctionName LPAREN Args RPAREN    {
                                       $$ = $1;
                                       for(int i = 0; i < $3->argCount(); i++)
					   $$->addArg($3->arg(i));
				       delete $3;
                                     }
;

FunctionName: NAME                   { $$ = factory()->createFunctionCall($1); }
;

Args: Expr                           { 
                                       $$ = new ExprNodeImpl();
                                       $$->addArg($1);
                                     }
| Args COMMA Expr                    {
                                       $$ = $1;
				       $$->addArg($3);
                                     }
;

/*
 * Location Paths
 */

UnionExpr: PathExpr
| UnionExpr BAR PathExpr
;

PathExpr: LocationPath
| FilterExpr
| FilterExpr SLASH RelativeLocationPath
| FilterExpr SLASHSLASH RelativeLocationPath
;

FilterExpr: PrimaryExpr
| FilterExpr Predicate
;

Predicate: LSQUARE PredicateExpr RSQUARE
;

PredicateExpr: Expr
;

RelativeLocationPath: Step
| RelativeLocationPath SLASH Step
| AbbreviatedRelativeLocationPath
;

AbbreviatedRelativeLocationPath: RelativeLocationPath SLASHSLASH Step
;

Step: AxisSpecifier NodeTest Predicates
                                     {
					 $$ = $2;
					 if($1)
					     $$->addArg($1);
                                     }
| AbbreviatedStep
;

AxisSpecifier: AXIS COLONCOLON       { $$ = factory()->createAxis((AxisImpl::AxisId) $1); }
| AbbreviatedAxisSpecifier
;

Predicates: /* nothing */
| Predicates LSQUARE Expr RSQUARE
;

NodeTest: QNAME                      {
                                        $$ = factory()->createStep(StepImpl::StepQName);
                                     }
| STAR                               {
                                        $$ = factory()->createStep(StepImpl::StepStar);
                                     }
| NAME NameTest                      {
					StepImpl *si = factory()->createStep(StepImpl::StepNameTest);
					si->setName($1);
					si->setStar($2 ? true : false);
					$$ = si;
                                     }
| PROCESSING_INSTRUCTION LPAREN OptLiteral RPAREN
                                     {
                                        $$ = factory()->createStep(StepImpl::StepProcessingInstruction);
                                     }
| COMMENT LPAREN RPAREN              {
                                        $$ = factory()->createStep(StepImpl::StepComment);
                                     }
| TEXT LPAREN RPAREN                 {
                                        $$ = factory()->createStep(StepImpl::StepText);
                                     }
| NODE LPAREN RPAREN                 {
                                        $$ = factory()->createStep(StepImpl::StepNode);
                                     }
;

NameTest: COLON STAR                 { $$ = 1; }
| /* nothing */                      { $$ = 0; }
;

OptLiteral: /* nothing */            {}
| LITERAL
;

AbbreviatedAxisSpecifier: /* nothing */ { $$ = 0; }
| AT                                    {}
;

AbbreviatedStep: DOT                 { $$ = factory()->createStep(StepImpl::StepDot); }
| DOTDOT                             { $$ = factory()->createStep(StepImpl::StepDotDot); }
;

LocationPath: RelativeLocationPath {}
| AbsoluteLocationPath {}
;

AbsoluteLocationPath: SLASH OptRelativeLocationPath
| AbbreviatedAbsoluteLocationPath
;

OptRelativeLocationPath: /* nothing */
RelativeLocationPath
;

AbbreviatedAbsoluteLocationPath: SLASHSLASH RelativeLocationPath 
;

%%

