#!/usr/bin/perl
#
#   This file is part of the KDE libraries
#
#   Copyright (C) 1999 Lars Knoll (knoll@mpi-hd.mpg.de)
#                 2003 Dirk Mueller (mueller@kde.org)
#                 2004-2005 Nikolas Zimmermann (wildfox@kde.org)
#
#   This library is free software; you can redistribute it and/or
#   modify it under the terms of the GNU Library General Public
#   License as published by the Free Software Foundation; either
#   version 2 of the License, or (at your option) any later version.
#
#   This library is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#   Library General Public License for more details.
#
#   You should have received a copy of the GNU Library General Public License
#   along with this library; see the file COPYING.LIB.  If not, write to
#   the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
#   Boston, MA 02111-1307, USA.
#

my $nsFull = $ARGV[1];
my $ns = $nsFull; $ns =~ s/K//;

my $filec = lc($ns) . "attrs.c";
my $fileh = lc($ns) . "attrs.h";
my $filein = lc($ns) . "attrs.in";
my $filegperf = lc($ns) . "attrs.gperf";

open IN, $filein or die "Can't open $filein\n";
open header, ">$fileh" or die "Can't open $fileh\n";
open out, ">$filegperf" or die "Can't open $filegperf\n";

print out "%{\n/* This file is automatically generated from $filein by dommakeattrs, do not edit */\n#include \"$fileh\"\n%}\n";
print out "struct attrs {\n\tint name;\n\tint id;\n};\n%%\n";

print header "/* This file is automatically generated from
$filein by dommakeattrs, do not edit */\n/* Copyright 1999 Lars Knoll */\n\n#ifndef ${nsFull}_ATTRS_H\n#define ${nsFull}_ATTRS_H\n\n#include <kglobal.h>\n\n";

my %amap = ();

$num = 0;
if ($nsFull ne "KDOM") {
	$num = 27; # ALWAYS KEEP IN SYNC WITH KDOM'S ATTR_LAST_DOMATTR
}

while (<IN>) {
    chomp;
    $attr = $_;

	if(not($attr =~ /#/) and (length($attr) > 0)) {
	    $num = $num + 1;

	    $up = uc($attr);
	    push(@a, $up);

		$pup = $up;
	    $pup =~ s/-/_/g;

	    $amap{$pup} = $num;
		
    	print out $attr . ", ATTR_" . $pup . "\n";
	    print header "#define ATTR_" . $pup . " " . $num . "\n";
    }
}

close(IN);

print header "#define ATTR_LAST_${ns}ATTR $num\n";

print out "%%\n";
close out;

print header "\nnamespace ${nsFull}\n{\n";
print header "\tconst char *getAttrName(unsigned short id);\n";
print header "\tint getAttrID(const char *tagStr, int len);\n";
print header "};\n";

print header "\n#endif\n";
close header;

my $result = system("/bin/sh", "-c", "gperf -c -a -L 'ANSI-C' -P -G -D -E -C -o -t -k '*' -Nfind${ns}Attr -Hhash_attr -Wwordlist_attr -Qspool_attr -s 3 $filegperf > $filec");
if ($result) {
  unlink "$filec";
  exit $result;
}

# read the hash mappings (is there a better way?)
my %hmap = ();
open(IN, "< $filec");
while(<IN>) {
  if (/spool_attr_str(\d+), ATTR_([\w_]+)/) {
    $hmap{$amap{$2}} = $1;
  }
}
close(IN);  

open(OUT, ">> $filec");
print OUT "\n\nstatic const unsigned short attrList[] = {\n";
print OUT "    65535,\n";

while(defined ($line = shift @a)) {
    my $l = $line;

	if(not($l =~ /#/) and (length($l) > 0)) {
		$l =~ y/-/_/;
    	
		die if !length($hmap{$amap{$l}});

	    print OUT "    " .$hmap{$amap{$l}}.",\n";
	}
}
print OUT "    65535\n};\n\n";
print OUT "const char *${nsFull}::getAttrName(unsigned short id)\n{\n";
print OUT "    if (!id || id > TOTAL_KEYWORDS) return \"\";\n";
print OUT "    return spool_attr + wordlist_attr[attrList[id]].name;\n";
print OUT "}\n";
print OUT "\nint ${nsFull}::getAttrID(const char *tagStr, int len)\n";
print OUT "{\n";
print OUT "    const struct attrs *attrPtr = find${ns}Attr(tagStr, len);\n";
print OUT "    if(!attrPtr)\n";
print OUT "      return 0;\n";
print OUT "    return attrPtr->id;\n";
print OUT "}\n";




