


Extending by lineBoundary
Test 1, LTR:
  Extending forward: "\nabc ABC xyz DEF def\n"[(1,1), (1,20)]
  Extending backward:  "\nabc ABC xyz DEF def\n"[(1,20), (1,1)]
Test 1, RTL:
  Extending forward: "\nabc ABC xyz DEF def\n"[(1,1), (1,20)]
  Extending backward:  "\nabc ABC xyz DEF def\n"[(1,20), (1,1)]
Test 2, LTR:
  Extending forward: "\nABC xyz DEF def GHI\n"[(1,1), (1,20)]
  Extending backward:  "\nABC xyz DEF def GHI\n"[(1,20), (1,1)]
Test 2, RTL:
  Extending forward: "\nABC xyz DEF def GHI\n"[(1,1), (1,20)]
  Extending backward:  "\nABC xyz DEF def GHI\n"[(1,20), (1,1)]
Test 3, LTR:
  Extending forward: "\nABC DEF ABC\n"[(1,1), (1,12)]
  Extending backward:  "\nABC DEF ABC\n"[(1,12), (1,1)]
Test 3, RTL:
  Extending forward: "\nABC DEF ABC\n"[(1,1), (1,12)]
  Extending backward:  "\nABC DEF ABC\n"[(1,12), (1,1)]
Test 4, LTR:
  Extending forward: "\nabc efd dabeb\n"[(1,1), (1,14)]
  Extending backward:  "\nabc efd dabeb\n"[(1,14), (1,1)]
Test 4, RTL:
  Extending forward: "\nabc efd dabeb\n"[(1,1), (1,14)]
  Extending backward:  "\nabc efd dabeb\n"[(1,14), (1,1)]
Test 5, LTR:
  Extending forward: "Lorem "[(0,0)], " amet"[(0,5)]
  Extending backward:  " amet"[(0,5)], "Lorem "[(0,0)]
Test 5, RTL:
  Extending forward: "Lorem "[(0,0)], " amet"[(0,5)]
  Extending backward:  " amet"[(0,5)], "Lorem "[(0,0)]
Test 6, LTR:
  Extending forward: "Lorem "[(0,0)], " amet"[(0,5)]
  Extending backward:  " amet"[(0,5)], "Lorem "[(0,0)]
Test 6, RTL:
  Extending forward: "Lorem "[(0,0)], " amet"[(0,5)]
  Extending backward:  " amet"[(0,5)], "Lorem "[(0,0)]
Test 7, LTR:
  Extending forward: "Lorem "[(0,0)], " amet"[(0,5)]
  Extending backward:  " amet"[(0,5)], "Lorem "[(0,0)]
Test 7, RTL:
  Extending forward: "Lorem "[(0,0)], " amet"[(0,5)]
  Extending backward:  " amet"[(0,5)], "Lorem "[(0,0)]
Test 8, LTR:
  Extending forward: "Lorem "[(0,0)], " amet"[(0,5)]
  Extending backward:  " amet"[(0,5)], "Lorem "[(0,0)]
Test 8, RTL:
  Extending forward: "Lorem "[(0,0)], " amet"[(0,5)]
  Extending backward:  " amet"[(0,5)], "Lorem "[(0,0)]
Test 9, LTR:
  Extending forward: "Lorem "[(0,0), (0,5)]
  Extending backward:  "Lorem "[(0,5), (0,0)]
Test 9, RTL:
  Extending forward: "Lorem "[(0,0), (0,5)]
  Extending backward:  "Lorem "[(0,5), (0,0)]
Test 10, LTR:
  Extending forward: "Lorem "[(0,0)], " amet"[(0,5)]
  Extending backward:  " amet"[(0,5)], "Lorem "[(0,0)]
Test 10, RTL:
  Extending forward: "Lorem "[(0,0)], " amet"[(0,5)]
  Extending backward:  " amet"[(0,5)], "Lorem "[(0,0)]
Test 11, LTR:
  Extending forward: "Lorem "[(0,0)], "ipsum dolor"[(0,11)]
  Extending backward:  "ipsum dolor"[(0,11)], "Lorem "[(0,0)]
Test 11, RTL:
  Extending forward: "Lorem "[(0,0)], "ipsum dolor"[(0,11)]
  Extending backward:  "ipsum dolor"[(0,11)], "Lorem "[(0,0)]
Test 12, LTR:
  Extending forward: "Lorem "[(0,0)], " amet"[(0,5)]
  Extending backward:  " amet"[(0,5)], "Lorem "[(0,0)]
Test 12, RTL:
  Extending forward: "Lorem "[(0,0)], " amet"[(0,5)]
  Extending backward:  " amet"[(0,5)], "Lorem "[(0,0)]
Test 13, LTR:
  Extending forward: "Lorem "[(0,0), (0,5)]
  Extending backward:  "Lorem "[(0,5), (0,0)]
Test 13, RTL:
  Extending forward: "Lorem "[(0,0), (0,5)]
  Extending backward:  "Lorem "[(0,5), (0,0)]
Test 14, LTR:
  Extending forward: "\n Just\n "[(2,2)], "\n BFDX\n"[(2,6)]
  Extending backward:  "\n BFDX\n"[(2,6)], "\n Just\n "[(2,2)]
Test 14, RTL:
  Extending forward: "\n Just\n "[(2,2)], "\n BFDX\n"[(2,6)]
  Extending backward:  "\n BFDX\n"[(2,6)], "\n Just\n "[(2,2)]
Test 15, LTR:
  Extending forward: "\n Just\n "[(2,2)], "\n ever\n"[(2,6)]
  Extending backward:  "\n ever\n"[(2,6)], "\n Just\n "[(2,2)]
Test 15, RTL:
  Extending forward: "\n Just\n "[(2,2)], "\n ever\n"[(2,6)]
  Extending backward:  "\n ever\n"[(2,6)], "\n Just\n "[(2,2)]
Test 16, LTR:
  Extending forward: "car means ABC."[(0,0), (0,14)]
  Extending backward:  "car means ABC."[(0,14), (0,0)]
Test 16, RTL:
  Extending forward: "car means ABC."[(0,0), (0,14)]
  Extending backward:  "car means ABC."[(0,14), (0,0)]
Test 17, LTR:
  Extending forward: "᪜car DEF ABC.᪝"[(0,0), (0,14)]
  Extending backward:  "᪜car DEF ABC.᪝"[(0,14), (0,0)]
Test 17, RTL:
  Extending forward: "᪜car DEF ABC.᪝"[(0,0), (0,14)]
  Extending backward:  "᪜car DEF ABC.᪝"[(0,14), (0,0)]
Test 18, LTR:
  Extending forward: "he said "᪜car DEF ABC᪝.""[(0,0), (0,24)]
  Extending backward:  "he said "᪜car DEF ABC᪝.""[(0,24), (0,0)]
Test 18, RTL:
  Extending forward: "he said "᪜car DEF ABC᪝.""[(0,0), (0,24)]
  Extending backward:  "he said "᪜car DEF ABC᪝.""[(0,24), (0,0)]
Test 19, LTR:
  Extending forward: "GHI JKL MNO '᪛he said "᪜car DEF ABC᪝"᪝'?"[(0,0), (0,40)]
  Extending backward:  "GHI JKL MNO '᪛he said "᪜car DEF ABC᪝"᪝'?"[(0,40), (0,0)]
Test 19, RTL:
  Extending forward: "GHI JKL MNO '᪛he said "᪜car DEF ABC᪝"᪝'?"[(0,0), (0,40)]
  Extending backward:  "GHI JKL MNO '᪛he said "᪜car DEF ABC᪝"᪝'?"[(0,40), (0,0)]
Test 20, LTR:
  Extending forward: "ABC abc DEF"[(0,0), (0,11)]
  Extending backward:  "ABC abc DEF"[(0,11), (0,0)]
Test 20, RTL:
  Extending forward: "ABC abc DEF"[(0,0), (0,11)]
  Extending backward:  "ABC abc DEF"[(0,11), (0,0)]
Test 21, LTR:
  Extending forward: "abcdefg abcdefg abcdefg a abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg "[(0,0), (0,16)]
  Extending backward:  "abcdefg abcdefg abcdefg a abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg "[(0,16)]
Test 21, RTL:
  Extending forward: "abcdefg abcdefg abcdefg a abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg "[(0,0), (0,16)]
  Extending backward:  "abcdefg abcdefg abcdefg a abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg "[(0,16)]
Test 22, LTR:
  Extending forward: "abcdefg abcdefg abcdefg a abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg "[(0,0), (0,16)]
  Extending backward:  "abcdefg abcdefg abcdefg a abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg "[(0,16)]
Test 22, RTL:
  Extending forward: "abcdefg abcdefg abcdefg a abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg "[(0,0), (0,16)]
  Extending backward:  "abcdefg abcdefg abcdefg a abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg abcdefg "[(0,16)]

