This test checks that toString() round-trip on a function that has prefix, postfix and typeof operators applied to group expression will not remove the grouping. Also checks that evaluation of such a expression produces run-time exception

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


PASS unevalf(eval(unevalf(prefix_should_preserve_parens))) is unevalf(prefix_should_preserve_parens)
PASS unevalf(prefix_should_preserve_parens).indexOf('(x, y)') >= 0 is true
PASS prefix_should_preserve_parens(1, 2, 3); threw exception ReferenceError: Prefix ++ operator applied to value that is not a reference..
PASS eval(unevalf(prefix_should_preserve_parens))(1, 2, 3); threw exception ReferenceError: Prefix ++ operator applied to value that is not a reference..
PASS unevalf(eval(unevalf(postfix_should_preserve_parens))) is unevalf(postfix_should_preserve_parens)
PASS unevalf(postfix_should_preserve_parens).indexOf('(x, y)') >= 0 is true
PASS postfix_should_preserve_parens(1, 2, 3); threw exception ReferenceError: Postfix ++ operator applied to value that is not a reference..
PASS eval(unevalf(postfix_should_preserve_parens))(1, 2, 3); threw exception ReferenceError: Postfix ++ operator applied to value that is not a reference..
PASS unevalf(eval(unevalf(both_should_preserve_parens))) is unevalf(both_should_preserve_parens)
PASS unevalf(both_should_preserve_parens).indexOf('(x, y)') >= 0 is true
PASS both_should_preserve_parens(1, 2, 3); threw exception ReferenceError: Prefix ++ operator applied to value that is not a reference..
PASS eval(unevalf(both_should_preserve_parens))(1, 2, 3); threw exception ReferenceError: Prefix ++ operator applied to value that is not a reference..
PASS unevalf(eval(unevalf(prefix_should_preserve_parens_multi))) is unevalf(prefix_should_preserve_parens_multi)
PASS unevalf(prefix_should_preserve_parens_multi).indexOf('(x, y)') >= 0 is true
PASS prefix_should_preserve_parens_multi(1, 2, 3); threw exception ReferenceError: Prefix -- operator applied to value that is not a reference..
PASS eval(unevalf(prefix_should_preserve_parens_multi))(1, 2, 3); threw exception ReferenceError: Prefix -- operator applied to value that is not a reference..
PASS unevalf(eval(unevalf(postfix_should_preserve_parens_multi))) is unevalf(postfix_should_preserve_parens_multi)
PASS unevalf(postfix_should_preserve_parens_multi).indexOf('(x, y)') >= 0 is true
PASS postfix_should_preserve_parens_multi(1, 2, 3); threw exception ReferenceError: Postfix -- operator applied to value that is not a reference..
PASS eval(unevalf(postfix_should_preserve_parens_multi))(1, 2, 3); threw exception ReferenceError: Postfix -- operator applied to value that is not a reference..
PASS unevalf(eval(unevalf(prefix_should_preserve_parens_multi1))) is unevalf(prefix_should_preserve_parens_multi1)
PASS unevalf(prefix_should_preserve_parens_multi1).indexOf('(x, y)') >= 0 is true
PASS prefix_should_preserve_parens_multi1(1, 2, 3); threw exception ReferenceError: Prefix -- operator applied to value that is not a reference..
PASS eval(unevalf(prefix_should_preserve_parens_multi1))(1, 2, 3); threw exception ReferenceError: Prefix -- operator applied to value that is not a reference..
PASS unevalf(eval(unevalf(postfix_should_preserve_parens_multi1))) is unevalf(postfix_should_preserve_parens_multi1)
PASS unevalf(postfix_should_preserve_parens_multi1).indexOf('(x, y)') >= 0 is true
PASS postfix_should_preserve_parens_multi1(1, 2, 3); threw exception ReferenceError: Postfix -- operator applied to value that is not a reference..
PASS eval(unevalf(postfix_should_preserve_parens_multi1))(1, 2, 3); threw exception ReferenceError: Postfix -- operator applied to value that is not a reference..
PASS unevalf(eval(unevalf(prefix_should_preserve_parens_multi2))) is unevalf(prefix_should_preserve_parens_multi2)
PASS unevalf(prefix_should_preserve_parens_multi2).indexOf('(x, y)') >= 0 is true
PASS prefix_should_preserve_parens_multi2(1, 2, 3); threw exception ReferenceError: Prefix -- operator applied to value that is not a reference..
PASS eval(unevalf(prefix_should_preserve_parens_multi2))(1, 2, 3); threw exception ReferenceError: Prefix -- operator applied to value that is not a reference..
PASS unevalf(eval(unevalf(postfix_should_preserve_parens_multi2))) is unevalf(postfix_should_preserve_parens_multi2)
PASS unevalf(postfix_should_preserve_parens_multi2).indexOf('(x, y)') >= 0 is true
PASS postfix_should_preserve_parens_multi2(1, 2, 3); threw exception ReferenceError: Postfix ++ operator applied to value that is not a reference..
PASS eval(unevalf(postfix_should_preserve_parens_multi2))(1, 2, 3); threw exception ReferenceError: Postfix ++ operator applied to value that is not a reference..
PASS unevalf(eval(unevalf(typeof_should_preserve_parens))) is unevalf(typeof_should_preserve_parens)
PASS unevalf(typeof_should_preserve_parens).indexOf('(x, y)') >= 0 is true
PASS typeof_should_preserve_parens('a', 1); is 'number'
PASS eval(unevalf(typeof_should_preserve_parens))('a', 1); is 'number'
PASS unevalf(eval(unevalf(typeof_should_preserve_parens1))) is unevalf(typeof_should_preserve_parens1)
PASS unevalf(typeof_should_preserve_parens1).indexOf('(x, y)') >= 0 is true
PASS typeof_should_preserve_parens1('a', 1); is 'number'
PASS eval(unevalf(typeof_should_preserve_parens1))('a', 1); is 'number'
PASS unevalf(eval(unevalf(typeof_should_preserve_parens2))) is unevalf(typeof_should_preserve_parens2)
PASS unevalf(typeof_should_preserve_parens2).indexOf('(x, y)') >= 0 is true
PASS typeof_should_preserve_parens2('a', 1); is 'number'
PASS eval(unevalf(typeof_should_preserve_parens2))('a', 1); is 'number'
PASS unevalf(eval(unevalf(typeof_should_preserve_parens_multi))) is unevalf(typeof_should_preserve_parens_multi)
PASS unevalf(typeof_should_preserve_parens_multi).indexOf('(x, y)') >= 0 is true
PASS typeof_should_preserve_parens_multi('a', 1); is 'number'
PASS eval(unevalf(typeof_should_preserve_parens_multi))('a', 1); is 'number'
PASS successfullyParsed is true

TEST COMPLETE

