KDE JS Test

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


Start Of Test
PASS isNaN(Date.prototype.valueOf()) is true
PASS d.getMinutes() is 45
PASS d.getUTCMinutes() is 45
PASS d.getDay() is 6
PASS d.getMonth() is 2
PASS d.getFullYear() is 2002
PASS Number(d) is 1017492323515
PASS Boolean(d) is true
PASS (new Date(100)).valueOf() is 100
PASS (new Date(true)).valueOf() is 1
PASS (new Date(false)).valueOf() is 0
PASS typeof (new Date()).toString() is 'string'
PASS typeof ('' + new Date()) is 'string'
PASS typeof (new Date() + new Date()) is 'string'
PASS isNaN(Number(new Date('foo'))) is true
PASS new Date(10001) - new Date(10000) is 1
PASS '' - new Date(10000) is -10000
PASS 2 * new Date(10000) is 20000
PASS var d = new Date(); d == String(d) is true
PASS d0.getHours() is 0
PASS d1.getUTCHours() is 0
PASS d1.getUTCHours() is 11
PASS d2.getMilliseconds() is 11
PASS d2.getSeconds() is 11
PASS d2.getMilliseconds() is 22
PASS d2.getMinutes() is 11
PASS d2.getSeconds() is 22
PASS d2.getMilliseconds() is 33
PASS d2.getHours() is 11
PASS d2.getMinutes() is 22
PASS d2.getSeconds() is 33
PASS d2.getMilliseconds() is 44
PASS d2.getMonth() is 3
PASS d2.getDate() is 20
PASS d2.getFullYear() is 1976
PASS d2.getMonth() is 3
PASS d2.getDate() is 20
PASS d2.setYear(0), d2.getFullYear() is 1900
PASS d2.setYear(1), d2.getFullYear() is 1901
PASS d2.setYear(99), d2.getFullYear() is 1999
FAIL d2.setYear(100), d2.getFullYear() should be 100. Was 2000
PASS d2.setYear(2050), d2.getFullYear() is 2050
FAIL d2.setYear(1899), d2.getFullYear() should be 1899. Was 3799
PASS d2.setYear(2000), d2.getFullYear() is 2000
PASS d2.setYear(2100), d2.getFullYear() is 2100
PASS dateRef.getDay() is 6
PASS dateRef.getDate() is 5
PASS dateRef.getMonth() is 10
PASS dateRef.getYear() is 94
PASS dateRef.getFullYear() is 1994
PASS dateRef.getMinutes() is 15
PASS dateRef.getSeconds() is 30
PASS dateRef.getUTCDay() is 6
PASS dateRef.getUTCDate() is 5
PASS dateRef.getUTCMonth() is 10
PASS dateRef.getUTCFullYear() is 1994
PASS dateRef.getUTCHours() is 13
PASS dateRef.getUTCMinutes() is 15
PASS dateRef.getUTCSeconds() is 30
FAIL d.toUTCString() should be Sat, 05 Nov 1994 13:15:30 GMT. Was Invalid Date
FAIL d.toUTCString().replace('GMT', '+0000') should be Sat, 05 Nov 1994 13:15:30 +0000. Was Invalid Date
FAIL dateRef.getDay() should be 4. Was 3
FAIL dateRef.getDate() should be 5. Was 4
PASS dateRef.getMonth() is 10
PASS dateRef.getFullYear() is 2065
PASS dateRef.getMinutes() is 15
PASS dateRef.getSeconds() is 30
FAIL dateRef.getUTCDay() should be 4. Was 3
FAIL dateRef.getUTCDate() should be 5. Was 4
PASS dateRef.getUTCMonth() is 10
PASS dateRef.getUTCFullYear() is 2065
PASS dateRef.getUTCHours() is 13
PASS dateRef.getUTCMinutes() is 15
PASS dateRef.getUTCSeconds() is 30
FAIL dateRef.getDay() should be 3. Was 2
FAIL dateRef.getDate() should be 5. Was 4
PASS dateRef.getMonth() is 10
PASS dateRef.getFullYear() is 2064
PASS dateRef.getMinutes() is 15
PASS dateRef.getSeconds() is 30
FAIL dateRef.getUTCDay() should be 3. Was 2
FAIL dateRef.getUTCDate() should be 5. Was 4
PASS dateRef.getUTCMonth() is 10
PASS dateRef.getUTCFullYear() is 2064
PASS dateRef.getUTCHours() is 13
PASS dateRef.getUTCMinutes() is 15
PASS dateRef.getUTCSeconds() is 30
FAIL d.toUTCString().replace('GMT', '+0000') should be Tue, 05 Nov 2024 13:15:30 +0000. Was Invalid Date
FAIL d.toUTCString().replace('GMT', '+0000') should be Mon, 05 Nov 2040 13:15:30 +0000. Was Invalid Date
FAIL d.toUTCString().replace('GMT', '+0000') should be Fri, 05 Nov 2100 13:15:30 +0000. Was Invalid Date
FAIL d.toUTCString().replace('GMT', '+0000') should be Thu, 04 Nov 2004 22:15:30 +0000. Was Invalid Date
PASS (new Date('Dec 25 1995 1:30 PM UTC')).valueOf() is 819898200000
PASS (new Date('Dec 25 1995 1:30 pm UTC')).valueOf() is 819898200000
PASS (new Date('Dec 25 1995 1:30 AM UTC')).valueOf() is 819855000000
PASS (new Date('Dec 25 1995 1:30 am UTC')).valueOf() is 819855000000
PASS (new Date('Dec 25 1995 12:00 PM UTC')).valueOf() is 819892800000
PASS (new Date('Dec 25 1995 12:00 AM UTC')).valueOf() is 819849600000
PASS (new Date('Dec 25 1995 00:00 AM UTC')).valueOf() is 819849600000
PASS (new Date('Dec 25 1995 00:00 PM UTC')).valueOf() is 819892800000
PASS isNaN(new Date('Dec 25 1995 13:30 AM UTC')).valueOf() is true
PASS new Date('Sat, 01 Dec 2000 08:00:00 GMT').getMonth() is 11
PASS new Date('01 Jan 99 22:00 +0100').getFullYear() is 1999
PASS new Date('May 09 1999 13:12:40 GMT').getDate() is 9
PASS new Date('Wednesday February 09 1999 13:12:40 GMT').getMonth() is 1
PASS new Date('Wednesday January 09 1999 13:12:40 GMT').getFullYear() is 1999
PASS new Date('Wednesday January 09 13:12:40 GMT 1999').getFullYear() is 1999
PASS new Date('Wednesday January 06 13:12:40 GMT 2100').getFullYear() is 2100
PASS (new Date('\n21\rFeb\f\v\t 2004')).getFullYear() is 2004
PASS (new Date('Dec 25 1995 gmt')).valueOf() is 819849600000
PASS (new Date('Dec 25 1995 utc')).valueOf() is 819849600000
PASS new Date('3/31/2005').getDate() is 31
PASS new Date('3/31/2005').getHours() is 0
PASS new Date('7/31/2005').getHours() is 0
PASS new Date('3/31/2005 GMT').getFullYear() is 2005
PASS new Date('3/31/2005 12:45:15').getDate() is 31
PASS new Date('3/31/2005 12:45:15').getMonth() is 2
PASS new Date('3/31/2005 12:45:15').getSeconds() is 15
PASS new Date('2003/02/03').getMonth() is 1
PASS new Date('2003/02/03 02:01:04 UTC').getSeconds() is 4
PASS jul27Num is Date.parse(jul27Str).valueOf()
PASS typeof Date.parse(0) is 'number'
PASS isNaN(Date.parse(0)) is true
PASS Date.parse(new String(jul27Str)).valueOf() is jul27Num
PASS isNaN(Number(new Date('01 ANF 2000'))) is true
PASS isNaN(Number(new Date('ANF 01 2000'))) is true
PASS oldHours is d.getHours()
PASS Date.UTC(1800, 0, 1) is -5364662400000
PASS Date.UTC(1800, 2, 1) is -5359564800000
PASS Date.UTC(1899, 0, 1) is -2240524800000
PASS Date.UTC(1900, 0, 1) is -2208988800000
PASS Date.UTC(1960, 0, 1) is -315619200000
PASS Date.UTC(1970, 0, 1) is 0
PASS Date.UTC(3000, 0, 1) is 32503680000000
PASS (new Date(-5364662400000)).valueOf() is -5364662400000
PASS (new Date(-2240524800000)).valueOf() is -2240524800000
PASS (new Date(-2208988800000)).valueOf() is -2208988800000
PASS (new Date(-315619200000)).valueOf() is -315619200000
PASS (new Date(0)).valueOf() is 0
PASS (new Date(32503680000000)).valueOf() is 32503680000000
PASS d.getDay() is 5
PASS d.getYear() == 1100 || d.getYear() == 3000 is true
PASS d.getFullYear() is 3000
PASS d.getDay() is 3
PASS d.getHours() is 0
PASS new Date('3/31/2099').getFullYear() is 2099
PASS new Date('3/31/2099').getMonth() is 2
PASS d.valueOf() is 32503680000000
PASS d.getUTCDay() is 3
PASS d.getUTCHours() is 0
PASS d.getFullYear() is 1899
PASS d.getYear() == -1 || d.getYear() == 1899 is true
PASS d.getDay() is 0
PASS d.getHours() is 0
PASS d.getUTCDay() is 3
PASS d.getUTCDay() is 0
PASS d.toUTCString().replace('GMT', '+0000') is 'Sun, 01 Jan 1899 00:00:00 +0000'
PASS Number(new Date(8.64E15)) is 8.64E15
PASS Number(new Date(-8.64E15)) is -8.64E15
PASS isNaN(new Date(8.6400001E15)) is true
PASS isNaN(new Date(-8.6400001E15)) is true
PASS (new Date('January29,2005')).getDate() is 29
FAIL (new Date('12/25/1995 ::')).valueOf() should be 819878400000. Was NaN
End Of Test
PASS successfullyParsed is true

TEST COMPLETE

