2010-05-26  Gavin Barraclough  <barraclough@apple.com>

        Reviewed by NOBODY (revert).

        Temporarily rolling out r60267, I appear to have hoesed perf at the last minute. :-/ Fixing.

        * yarr/RegexCompiler.cpp:
        (JSC::Yarr::RegexPatternConstructor::atomBackReference):
        (JSC::Yarr::RegexPatternConstructor::quantifyAtom):
        * yarr/RegexJIT.cpp:
        (JSC::Yarr::RegexGenerator::TermGenerationState::term):
        (JSC::Yarr::RegexGenerator::generateParenthesesSingle):
        (JSC::Yarr::RegexGenerator::generateTerm):
        (JSC::Yarr::RegexGenerator::RegexGenerator):
        (JSC::Yarr::jitCompileRegex):
        * yarr/RegexPattern.h:
        (JSC::Yarr::RegexPattern::RegexPattern):
        (JSC::Yarr::RegexPattern::reset):

2010-05-26  Gustavo Noronha Silva  <gns@gnome.org>

        Build fixes for make distcheck.

        * GNUmakefile.am:

2010-05-26  Gavin Barraclough  <barraclough@apple.com>

        Reviewed by Oliver Hunt.

        Bug 39795 - Add support for YARR JIT generation of greedy quantified parens at the end of the main disjunction.

        If the last item in a main disjunction is a quantified set of parentheses,
        this is easier to code generate for than the general case for quantified
        parentheses. This is because we never need to backtrack into the parentheses
        - the first match will be the final and accepted match.

        This patch also somewhat reverts a recent change to when fallback to PCRE
        occurs. At the minute the compiler is tracking on patterns which will
        require JIT fallback. This is handy from a performance perspective (it saves
        the failed attempt at JIT compilation), but it means introducing knowledge
        of the JITs capabilities into the other layers of the regex compilers. For
        the specific feature of back-references, add a flag tracking their presence
        on the pattern, and make these expressions fallback without attempting to
        JIT. For parentheses, return to detecting which cases are have or have not
        been handled during JIT compilation.

        18% progression on tagcloud, ~1.5% overall on sunspidey.

        * yarr/RegexCompiler.cpp:
        (JSC::Yarr::RegexPatternConstructor::atomBackReference):
        (JSC::Yarr::RegexPatternConstructor::quantifyAtom):
        * yarr/RegexJIT.cpp:
        (JSC::Yarr::RegexGenerator::TermGenerationState::isLastTerm):
        (JSC::Yarr::RegexGenerator::TermGenerationState::isMainDisjunction):
        (JSC::Yarr::RegexGenerator::generateParenthesesGreedyNoBacktrack):
        (JSC::Yarr::RegexGenerator::generateTerm):
        (JSC::Yarr::RegexGenerator::RegexGenerator):
        (JSC::Yarr::RegexGenerator::shouldFallBack):
        (JSC::Yarr::jitCompileRegex):
        * yarr/RegexPattern.h:
        (JSC::Yarr::RegexPattern::RegexPattern):
        (JSC::Yarr::RegexPattern::reset):

2010-05-26  Geoffrey Garen  <ggaren@apple.com>

        Reviewed by Sam Weinig.

        Fixed a crash seen on the Leopard bot, caused by merge.

        * jit/JITStubs.cpp:
        (JSC::DEFINE_STUB_FUNCTION): Get the return address from the callframe,
        since it's no longer passed to us as an argument.

2010-05-25  Geoffrey Garen  <ggaren@apple.com>

        Fixed build failure caused by merge.

        * jit/JITStubs.cpp:
        (JSC::DEFINE_STUB_FUNCTION): On error, return a single value, since this
        function no longer returns a pair.

2010-05-25  Geoffrey Garen  <ggaren@apple.com>

        Reviewed by Oliver Hunt.

        <rdar://problem/8020221>
        
        Fixed a crash seen on Windows when calling a function with too many
        arguments.
        
        SunSpider reports no change.
        
        No test because the ASSERT I added fires in existing tests.

        * jit/JITStubs.cpp:
        (JSC::DEFINE_STUB_FUNCTION): Make sure to grow the registerFile when too
        many arguments have been provided, since the caller only allocated enough
        registerFile space for the arguments it provided, not enough for the extra
        copy of arguments we're going to need.

2010-05-25  Kwang Yul Seo  <skyul@company100.net>

        Reviewed by Darin Adler.

        Build fix for JSFunction
        https://bugs.webkit.org/show_bug.cgi?id=39658

        MSVC can't compile one of JSFunction constructors when JIT is disabled.
        "PassRefPtr<NativeExecutable>" causes the compile error as NativeExecutable is not defined. 
        Add ENABLE(JIT) guard to the constructor.

        * runtime/JSFunction.cpp:
        (JSC::JSFunction::JSFunction):
        * runtime/JSFunction.h:

2010-05-24  Gavin Barraclough  <barraclough@apple.com>

        Reviewed by Sam Weinig.

        Bug 39643 - Clean up code generation in the JIT of stub function calls for op_call.

        Presently, as soon as op-call strays off the hot path we set up a set of values on
        the stack to be passed as arguments to cti functions, in case any should be called.

        Instead, hoist the setup of the callframe to happen slightly sooner, and make the
        cti functions to compile & check arity read these values from the callframe. This
        allows up to remove the deprecated methods to manually set up cti arguments, rather
        than using JITStubCall.h.

        * interpreter/CallFrame.h:
        * jit/JIT.h:
        * jit/JITCall.cpp:
        (JSC::JIT::compileOpCallInitializeCallFrame):
        (JSC::JIT::compileOpCallVarargs):
        (JSC::JIT::compileOpCallVarargsSlowCase):
        (JSC::JIT::compileOpCall):
        (JSC::JIT::compileOpCallSlowCase):
        * jit/JITCall32_64.cpp:
        (JSC::JIT::compileOpCallInitializeCallFrame):
        (JSC::JIT::compileOpCallVarargs):
        (JSC::JIT::compileOpCallVarargsSlowCase):
        (JSC::JIT::compileOpCall):
        (JSC::JIT::compileOpCallSlowCase):
        * jit/JITInlineMethods.h:
        * jit/JITOpcodes.cpp:
        (JSC::JIT::privateCompileCTIMachineTrampolines):
        * jit/JITOpcodes32_64.cpp:
        (JSC::JIT::privateCompileCTIMachineTrampolines):
        * jit/JITStubs.cpp:
        (JSC::DEFINE_STUB_FUNCTION):
        * jit/JITStubs.h:
        (JSC::):

2010-05-24  Gavin Barraclough  <barraclough@apple.com>

        Reviewed by Sam Weinig.
        Relanding r60075.

        * bytecode/CodeBlock.cpp:
        (JSC::CodeBlock::dump):
        (JSC::CodeBlock::getByIdExceptionInfoForBytecodeOffset):
        * bytecode/CodeBlock.h:
        * bytecode/Opcode.h:
        * bytecompiler/BytecodeGenerator.cpp:
        (JSC::BytecodeGenerator::BytecodeGenerator):
        (JSC::BytecodeGenerator::emitConstruct):
        * bytecompiler/BytecodeGenerator.h:
        (JSC::BytecodeGenerator::emitGetByIdExceptionInfo):
        * interpreter/Interpreter.cpp:
        (JSC::Interpreter::privateExecute):
        * jit/JIT.cpp:
        (JSC::JIT::privateCompileMainPass):
        * jit/JIT.h:
        * jit/JITCall.cpp:
        (JSC::JIT::compileOpCall):
        (JSC::JIT::compileOpCallSlowCase):
        * jit/JITCall32_64.cpp:
        (JSC::JIT::compileOpCall):
        (JSC::JIT::compileOpCallSlowCase):
        * jit/JITOpcodes.cpp:
        (JSC::JIT::privateCompileCTIMachineTrampolines):
        (JSC::JIT::privateCompileCTINativeCall):
        (JSC::JIT::emit_op_neq_null):
        (JSC::JIT::emit_op_convert_this):
        (JSC::JIT::emit_op_get_callee):
        (JSC::JIT::emit_op_create_this):
        * jit/JITOpcodes32_64.cpp:
        (JSC::JIT::privateCompileCTIMachineTrampolines):
        (JSC::JIT::privateCompileCTINativeCall):
        (JSC::JIT::emit_op_get_callee):
        (JSC::JIT::emit_op_create_this):
        * jit/JITStubs.cpp:
        (JSC::DEFINE_STUB_FUNCTION):
        (JSC::JITThunks::hostFunctionStub):
        * jit/JITStubs.h:
        (JSC::JITThunks::ctiNativeConstruct):
        (JSC::):
        * runtime/ExceptionHelpers.cpp:
        (JSC::createNotAnObjectError):
        * runtime/Executable.h:
        (JSC::NativeExecutable::create):
        (JSC::NativeExecutable::NativeExecutable):
        * runtime/JSFunction.cpp:
        (JSC::callHostFunctionAsConstructor):
        * runtime/JSFunction.h:
        * wtf/Platform.h:

== Rolled over to ChangeLog-2010-05-24 ==
