2003-11-08  Darin Adler  <darin@apple.com>

        Reviewed by John.

        - fixed 3477528 -- array.sort(function) fails if the function returns a non-zero value that rounds to zero

        * kjs/array_object.cpp:
        (compareByStringForQSort): Added checks for undefined values to match what the specification calls for.
        (compareWithCompareFunctionForQSort): Added checks for undefined values as above, and also changed the
        code that looks at the compare function result to look at the number returned without rounding to an integer.
        (ArrayProtoFuncImp::call): Changed the code that looks at the compare function result to look at the number
        returned without rounding to an integer.

=== Safari-113 ===

2003-11-03  Vicki Murley <vicki@apple.com>

        Reviewed by kocienda.

	- fixed <rdar://problem/3471096>: non-B&I builds should not use order files, because they cause false "regressions" in perf.

        * JavaScriptCore.pbproj/project.pbxproj: added empty SECTORDER_FLAGS variables to the Development and Deployment build styles

2003-11-02  Darin Adler  <darin@apple.com>

        Reviewed by Maciej.

        - changed list manipulation to use Harri Porten's idea of a circular
          linked list that is built from head to tail rather than building the
          list backwards and reversing the list when done

        * kjs/grammar.y: Handle CatchNode and FinallyNode in a type-safe way.
        Change many places that passed 0L to pass nothing at all, or to pass 0.

        * kjs/nodes.h:
        (KJS::ElementNode::ElementNode): Build a circular list instead of a 0-terminated
        backwards list.
        (KJS::ArrayNode::ArrayNode): Break the circular list instead of reversing the list.
        (KJS::PropertyValueNode::PropertyValueNode): Moved before ObjectLiteralNode so the
        inline code in ObjectLiteralNode works. Build a circular list instead of a 0-terminated
        backwards list. Made the case for the first node separate so we don't need a nil check.
        (KJS::ObjectLiteralNode::ObjectLiteralNode): Break the circular list instead of
        reversing the list.
        (KJS::ArgumentListNode::ArgumentListNode): Build a circular list instead of a 0-terminated
        backwards list. Also, made the constructors inline (moved here from .cpp file).
        (KJS::ArgumentsNode::ArgumentsNode): Break the circular list instead of
        reversing the list.
        (KJS::NewExprNode::NewExprNode): Changed a 0L to 0.
        (KJS::StatListNode::StatListNode): Make this constructor no longer inline (moved into
        .cpp file). The one in the .cpp file builds a circular list instead of a 0-terminated
        backwards list.
        (KJS::VarDeclListNode::VarDeclListNode): Build a circular list instead of a 0-terminated
        backwards list.
        (KJS::VarStatementNode::VarStatementNode): Break the circular list instead of reversing
        the list.
        (KJS::BlockNode::BlockNode): Make this constructor no longer inline (moved into .cpp file).
        The one in the .cpp file breaks the list instead of reversing it.
        (KJS::ForNode::ForNode): Break the circular list instead of reversing the list.
        (KJS::CaseClauseNode::CaseClauseNode): Break the circular list instead of reversing the
        list.
        (KJS::ClauseListNode::ClauseListNode): Build a circular list instead of a 0-terminated
        backwards list.
        (KJS::CaseBlockNode::CaseBlockNode): Make this constructor no longer inline (moved into
        .cpp file). The one in the .cpp file breaks the list instead of reversing it.
        (KJS::TryNode::TryNode): Changed constructor to take typed parameters for the catch and
        finally nodes rather than just Node.
        (KJS::ParameterNode::ParameterNode): Build a circular list instead of a 0-terminated
        backwards list.
        (KJS::FuncDeclNode::FuncDeclNode): Break the circular list instead of reversing the
        list.
        (KJS::FuncExprNode::FuncExprNode): Break the circular list instead of reversing the
        list.

        * kjs/nodes.cpp:
        (StatListNode::StatListNode): Moved this constructor here, no longer inline.
        Did the "break circular list" thing instead of the "reverse list" thing.
        Added setLoc calls to match KJS in the KDE tree; since we don't currently
        use the JavaScript debugging support, it's unclear whether there's any benefit, but
        later we might be using it and it's good to be as close as possible.
        (BlockNode::BlockNode): Moved this constructor here, no longer inline.
        Did the "break circular list" thing instead of the "reverse list" thing.
        Added setLoc calls.
        (CaseBlockNode::CaseBlockNode): Moved this constructor here, no longer inline.
        Did the "break circular list" thing instead of the "reverse list" thing.
        (SourceElementsNode::SourceElementsNode): Moved this constructor here, no longer inline.
        Did the "break circular list" thing instead of the "reverse list" thing.
        Added setLoc calls.

        * kjs/grammar.cpp: Regenerated.
        * kjs/grammar.cpp.h: Regenerated.
        * kjs/grammar.h: Regenerated.

=== Safari-112 ===

2003-10-30  Maciej Stachowiak  <mjs@apple.com>

        Reviewed by Ken.

	- fixed 3427069 - browsing mp3.com causes leaks (KJS)
	
        * kjs/string_object.cpp:
        (StringProtoFuncImp::call): Don't do an early return, since that
	could leak a temporary regexp.

2003-10-29  Maciej Stachowiak  <mjs@apple.com>

        Reviewed by Darin.

	- fixed 3426076 - Leak of JS lexer data visiting http://www.ebay.com
	
        * kjs/grammar.cpp:
        (yyerror): Updated the commented code.
        * kjs/grammar.y: Don't delete string and identifier tokens when done
	with them any more, they'll get cleaned up by the lexer now.
        * kjs/internal.cpp:
        (Parser::parse): Tell lexer when done parsing.
        * kjs/lexer.cpp:
        (Lexer::Lexer): Initialize new data members.
        (Lexer::lex): Use new methods to make strings and identifiers, and
	save them.
        (Lexer::makeIdentifier): Make a new Identifier and save it in an
	auto-growing array.
        (Lexer::makeUString): Likewise for UStrings.
        (Lexer::doneParsing): Clean up arrays of Ifentifiers and UStrings.
        * kjs/lexer.h:

2003-10-28  Maciej Stachowiak  <mjs@apple.com>

        Reviewed by Ken.

	- fixed 3413962 -  malicious web pages can kill all future JavaScript execution by breaking recursion limit check
	
        * kjs/nodes.cpp:
        (FunctionCallNode::evaluate): If we're going to return early due
	to breaking the recursion limit, make sure to lower it again, or
	it will creep up by one each time it's exceeded.

2003-10-26  Darin Adler  <darin@apple.com>

        * JavaScriptCorePrefix.h: Added a C case to the NULL definition since we use C as well
        as C++ in this project.

2003-10-26  Darin Adler  <darin@apple.com>

        - rolled in some CString changes Harri Porten did on the KDE side

        * kjs/ustring.cpp:
        (KJS::CString::CString): Use memcpy instead of strcpy for speed. Fix an off by one error
        in the copy constructor.
        (KJS::CString::operator=): Use memcpy instead of strcpy for speed.

        * JavaScriptCorePrefix.h: Add a definition of NULL here that takes advantage of the GNU
        __null feature even if the system C library doesn't.

== Rolled over to ChangeLog-2003-10-25 ==
