#!/usr/bin/perl -w

# Copyright (C) 2006 Apple Computer, Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer. 
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution. 
# 3.  Neither the name of Apple Computer, Inc. ("Apple") nor the names of
#     its contributors may be used to endorse or promote products derived
#     from this software without specific prior written permission. 
#
# THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Script to do a rename in WebCore. It's sort of a "one time use" script,
# but we might change it around for other uses later.

use strict;
use FindBin;
use lib $FindBin::Bin;
use webkitdirs;
use File::Find;

setConfiguration();
chdirWebKit();

my %words;

# find all files in WebCore we want to process

my @paths;
find(\&wanted, "JavaScriptCore");
find(\&wanted, "WebCore");

sub wanted
{
    my $file = $_;

    if ($file eq "icu") {
        $File::Find::prune = 1;
        return;
    }

    if ($file =~ /^\../) {
        $File::Find::prune = 1;
        return;
    }

    return if $file =~ /^ChangeLog/;
    return if -d $file;

    push @paths, $File::Find::name;
}

my %renames = (
    "KHTML_NO_XBL" => "WEBKIT_NO_XBL",
    "KHTML_XSLT" => "WEBKIT_XSLT",
    "KURL" => "PlatformURL",
    "KURLMac" => "PlatformURLMac",
    "KURL_H_" => "PlatformURL_h",
    "KXMLCORE_ASSERTIONS_H" => "WTF_Assertions_h",
    "KXMLCORE_COMPILER_" => "WTF_COMPILER_",
    "KXMLCORE_COMPILER_BORLAND" => "WTF_COMPILER_BORLAND",
    "KXMLCORE_COMPILER_CYGWIN" => "WTF_COMPILER_CYGWIN",
    "KXMLCORE_COMPILER_GCC" => "WTF_COMPILER_GCC",
    "KXMLCORE_COMPILER_MSVC" => "WTF_COMPILER_MSVC",
    "KXMLCORE_FAST_MALLOC_H" => "WTF_FastMalloc_h",
    "KXMLCORE_FAST_MALLOC_INTERNAL_H" => "WTF_FastMallocInternal_h",
    "KXMLCORE_FORWARD_H" => "WTF_Forward_h",
    "KXMLCORE_HASH_COUNTED_SET_H" => "WTF_HashCountedSet_h",
    "KXMLCORE_HASH_FUNCTIONS_H" => "WTF_HashFunctions_h",
    "KXMLCORE_HASH_MAP_H" => "WTF_HashMap_h",
    "KXMLCORE_HASH_SET_H" => "WTF_HashSet_h",
    "KXMLCORE_HASH_TABLE_H" => "WTF_HashTable_h",
    "KXMLCORE_HASH_TRAITS_H" => "WTF_HashTraits_h",
    "KXMLCORE_LIST_REF_PTR_H" => "WTF_ListRefPtr_h",
    "KXMLCORE_NONCOPYABLE" => "WTF_Noncopyable_h",
    "KXMLCORE_OWN_ARRAY_PTR_H" => "WTF_OwnArrayPtr_h",
    "KXMLCORE_OWN_PTR_H" => "WTF_OwnPtr_h",
    "KXMLCORE_PASS_REF_PTR_H" => "WTF_PassRefPtr_h",
    "KXMLCORE_PLATFORM_" => "WTF_PLATFORM_",
    "KXMLCORE_PLATFORM_ARM" => "WTF_PLATFORM_ARM",
    "KXMLCORE_PLATFORM_BIG_ENDIAN" => "WTF_PLATFORM_BIG_ENDIAN",
    "KXMLCORE_PLATFORM_DARWIN" => "WTF_PLATFORM_DARWIN",
    "KXMLCORE_PLATFORM_GDK" => "WTF_PLATFORM_GDK",
    "KXMLCORE_PLATFORM_H" => "WTF_PLATFORM_H",
    "KXMLCORE_PLATFORM_KDE" => "WTF_PLATFORM_KDE",
    "KXMLCORE_PLATFORM_MAC" => "WTF_PLATFORM_MAC",
    "KXMLCORE_PLATFORM_MIDDLE_ENDIAN" => "WTF_PLATFORM_MIDDLE_ENDIAN",
    "KXMLCORE_PLATFORM_PPC" => "WTF_PLATFORM_PPC",
    "KXMLCORE_PLATFORM_PPC64" => "WTF_PLATFORM_PPC64",
    "KXMLCORE_PLATFORM_UNIX" => "WTF_PLATFORM_UNIX",
    "KXMLCORE_PLATFORM_WIN" => "WTF_PLATFORM_WIN",
    "KXMLCORE_PLATFORM_WIN_OS" => "WTF_PLATFORM_WIN_OS",
    "KXMLCORE_PLATFORM_X86" => "WTF_PLATFORM_X86",
    "KXMLCORE_PLATFORM_X86_64" => "WTF_PLATFORM_X86_64",
    "KXMLCORE_PRETTY_FUNCTION" => "WTF_PRETTY_FUNCTION",
    "KXMLCORE_PRIVATE_INLINE" => "WTF_PRIVATE_INLINE",
    "KXMLCORE_REF_PTR_H" => "WTF_REF_PTR_H",
    "KXMLCORE_UNUSED_PARAM" => "WTF_UNUSED_PARAM",
    "KXMLCORE_USE_" => "WTF_USE_",
    "KXMLCORE_USE_ICU_UNICODE" => "WTF_USE_ICU_UNICODE",
    "KXMLCORE_USE_MULTIPLE_THREADS" => "WTF_USE_MULTIPLE_THREADS",
    "KXMLCORE_USE_QT4_UNICODE" => "WTF_USE_QT4_UNICODE",
    "KXMLCORE_VECTOR_H" => "WTF_Vector_h",
    "KXMLCORE_VECTOR_TRAITS_H" => "WTF_VectorTraits_h",
    "KX_FEATURE" => "WTF_FEATURE",
    "allCachedObjects" => "allCachedResources",
    "cachedObject" => "cachedResource",
    "m_docObjects" => "m_resources",
    "removeCachedObject" => "remove",
    "StreamingTextDecoder" => "TextCodec",
    "StreamingTextDecoderMac" => "TextCodecMac",
    "StreamingTextDecoderICU" => "TextCodecICU",
    "StreamingTextDecoder_h" => "TextCodec_h",
    "StreamingTextDecoderMac_H" => "TextCodecMac_h",
    "StreamingTextDecoderICU_H" => "TextCodecICU_h",
    "Decoder" => "TextResourceDecoder",
    "Decoder_h" => "TextResourceDecoder_h",
    "isAncestor" => "hasAncestor",
);

# rename files

my %newFile;
for my $file (sort @paths) {
    my $f = $file;
    $f = "$1$renames{$2}$3" if $f =~ /^(.*\/)(\w+)(\.\w+)$/ && $renames{$2};
    if ($f ne $file) {
        $newFile{$file} = $f;
    }
}

for my $file (sort @paths) {
    if ($newFile{$file}) {
        my $newFile = $newFile{$file};
        print "Renaming $file to $newFile\n";
        system "svn move $file $newFile";
    }
}

# change all file contents

for my $file (sort @paths) {
    $file = $newFile{$file} if $newFile{$file};
    my $contents;
    {
        local $/;
        open FILE, $file or die;
        $contents = <FILE>;
        close FILE;
    }
    my $newContents = $contents;

    for my $from (keys %renames) {
        $newContents =~ s/\b$from(?!["\w])/$renames{$from}/g; # this " unconfuses Xcode syntax highlighting
    }

    if ($newContents ne $contents) {
        open FILE, ">", $file or die;
        print FILE $newContents;
        close FILE;
    }
}
