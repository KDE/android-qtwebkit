#!/usr/bin/perl -w

# Copyright (C) 2006, 2007, 2008 Apple Inc. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# 1.  Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer. 
# 2.  Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution. 
# 3.  Neither the name of Apple Computer, Inc. ("Apple") nor the names of
#     its contributors may be used to endorse or promote products derived
#     from this software without specific prior written permission. 
#
# THIS SOFTWARE IS PROVIDED BY APPLE AND ITS CONTRIBUTORS "AS IS" AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL APPLE OR ITS CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Script to do a rename in JavaScriptCore, WebCore, and WebKit.

use strict;
use FindBin;
use lib $FindBin::Bin;
use webkitdirs;
use File::Find;

setConfiguration();
chdirWebKit();

my %words;

# find all files we want to process

my @paths;
find(\&wanted, "JavaScriptCore");
find(\&wanted, "JavaScriptGlue");
find(\&wanted, "WebCore");
find(\&wanted, "WebKit");

sub wanted
{
    my $file = $_;

    if ($file eq "icu") {
        $File::Find::prune = 1;
        return;
    }

    if ($file =~ /^\../) {
        $File::Find::prune = 1;
        return;
    }

    return if $file =~ /^ChangeLog/;
    return if -d $file;

    push @paths, $File::Find::name;
}

my %renames = (
    "ArrayObjectImp" => "ArrayConstructor",
    "BooleanInstance" => "BooleanObject",
    "BooleanObjectImp" => "BooleanConstructor",
    "DateObjectFuncImp" => "DateFunction",
    "DateObjectImp" => "DateConstructor",
    "ErrorObjectImp" => "ErrorConstructor",
    "NativeErrorImp" => "NativeErrorConstructor",
    "FunctionObjectImp" => "FunctionConstructor",
    "InternalFunctionImp" => "InternalFunction",
    "MathObjectImp" => "MathObject",
    "NumberInstance" => "NumberObject",
    "NumberObjectImp" => "NumberConstructor",
    "ObjectObjectImp" => "ObjectConstructor",
    "RegExpImp" => "RegExpObject",
    "RegExpObjectImp" => "RegExpConstructor",
    "RegExpObjectImpPrivate" => "RegExpConstructorPrivate",
    "RegExpProtoFunc" => "RegExpFunction",
    "RegExpImpTable" => "regExpTable",
    "RegExpObjectImpTable" => "regExpConstructorTable",
    "StringInstance" => "StringObject",
    "StringInstanceThatMasqueradesAsUndefined" => "StringObjectThatMasqueradesAsUndefined",
    "StringObjectImp" => "StringConstructor",
    "StringObjectFuncImp" => "StringConstructorFunction",
);

my %plannedRenames = (
    "ARRAY_INSTANCE_H" => "JSArray_h",
    "CLONE_CONTENTS" => "Clone",
    "DELETE_CONTENTS" => "Delete",
    "DateInstance" => "Date",
    "EXTRACT_CONTENTS" => "Extract",
    "ErrorInstance" => "Error", # after eliminating the existing Error class which is just a namespace for two functions
    "FTPDirectoryTokenizer" => "FTPDirectoryDocumentBuilder",
    "HTMLTokenizer" => "HTMLDocumentBuilder",
    "ImageConstructorImp" => "JSImageConstructor",
    "ImageTokenizer" => "ImageDocumentBuilder",
    "JSHTMLOptionElementConstructor" => "JSOptionConstructor",
    "KJS_PROPERTY_SLOT_H" => "PropertySlot_h",
    "KJS_SCOPE_CHAIN_H" => "ScopeChain_h",
    "KURL" => "URL",
    "KURLCFNet" => "URLCF",
    "KURLMac" => "URLMac",
    "KURL_H_" => "URL_h",
    "List" => "JSArgumentList",
    "Navigator" => "JSNavigator",
    "ObjcFallbackObjectImp" => "ObjCFallbackObject",
    "PluginTokenizer" => "PluginDocumentBuilder",
    "RenderView" => "RenderViewport",
    "RuntimeObjectImp" => "ForeignObject",
    "StringImpl" => "SharedString",
    "TextTokenizer" => "TextDocumentBuilder",
    "ThreadSafeShared" => "ThreadSafeRefCounted",
    "Tokenizer" => "DocumentBuilder",
    "Tokenizer_h" => "DocumentBuilder_h",
    "XMLTokenizer" => "XMLDocumentBuilder",
    "XSLTProcessorPrototypeTable" => "JSXSLTProcessorPrototypeTable",
    "animationController" => "animation",
    "array_instance" => "JSArray",
    "array_object" => "ArrayPrototype",
    "bool_object" => "BooleanObject",
    "createTokenizer" => "createBuilder",
    "date_object" => "Date",
    "equalIgnoringCase" => "equalFoldingCase",
    "error_object" => "Error",
    "function_object" => "FunctionPrototype",
    "isHTMLTokenizer" => "isHTMLDocumentBuilder",
    "m_tokenizer" => "m_builder",
    "math_object" => "MathObject",
    "property_map" => "PropertyMap",
    "property_slot" => "PropertySlot",
    "regexp_object" => "RegExpObject",
    "scope_chain" => "ScopeChain",
    "scope_chain_mark" => "ScopeChainMark",
    "scope_chain_mark_h" => "ScopeChainMark_h",
    "scriptProxy" => "script",
    "selectionController" => "selection",
    "string_object" => "StringObject",
    "tokenizerProcessedData" => "documentBuilderProcessedData",
);

# rename files

my %newFile;
for my $file (sort @paths) {
    my $f = $file;
    $f = "$1$renames{$2}$3" if $f =~ /^(.*\/)(\w+)(\.\w+)$/ && $renames{$2};
    if ($f ne $file) {
        $newFile{$file} = $f;
    }
}

for my $file (sort @paths) {
    if ($newFile{$file}) {
        my $newFile = $newFile{$file};
        print "Renaming $file to $newFile\n";
        system "svn move $file $newFile";
    }
}

# change all file contents

for my $file (sort @paths) {
    $file = $newFile{$file} if $newFile{$file};
    my $contents;
    {
        local $/;
        open FILE, $file or die;
        $contents = <FILE>;
        close FILE;
    }
    my $newContents = $contents;

    for my $from (keys %renames) {
        $newContents =~ s/\b$from(?!["\w])/$renames{$from}/g; # this " unconfuses Xcode syntax highlighting
    }

    if ($newContents ne $contents) {
        open FILE, ">", $file or die;
        print FILE $newContents;
        close FILE;
    }
}
